/*
 * ReSTFS
 * ReSTFS Open API 3.0 Spec
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.eue.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Limits
 */


public class Limits {
  @JsonProperty("fileSize")
  private Long fileSize = null;

  @JsonProperty("resourcesPerContainer")
  private Integer resourcesPerContainer = null;

  @JsonProperty("resourcesPerTrash")
  private Integer resourcesPerTrash = null;

  @JsonProperty("pathLength")
  private Integer pathLength = null;

  @JsonProperty("maxGuestsPerRequest")
  private Integer maxGuestsPerRequest = null;

  public Limits fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Get fileSize
   * @return fileSize
  **/
  @Schema(description = "")
  public Long getFileSize() {
    return fileSize;
  }

  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }

  public Limits resourcesPerContainer(Integer resourcesPerContainer) {
    this.resourcesPerContainer = resourcesPerContainer;
    return this;
  }

   /**
   * Get resourcesPerContainer
   * @return resourcesPerContainer
  **/
  @Schema(description = "")
  public Integer getResourcesPerContainer() {
    return resourcesPerContainer;
  }

  public void setResourcesPerContainer(Integer resourcesPerContainer) {
    this.resourcesPerContainer = resourcesPerContainer;
  }

  public Limits resourcesPerTrash(Integer resourcesPerTrash) {
    this.resourcesPerTrash = resourcesPerTrash;
    return this;
  }

   /**
   * Get resourcesPerTrash
   * @return resourcesPerTrash
  **/
  @Schema(description = "")
  public Integer getResourcesPerTrash() {
    return resourcesPerTrash;
  }

  public void setResourcesPerTrash(Integer resourcesPerTrash) {
    this.resourcesPerTrash = resourcesPerTrash;
  }

  public Limits pathLength(Integer pathLength) {
    this.pathLength = pathLength;
    return this;
  }

   /**
   * Get pathLength
   * @return pathLength
  **/
  @Schema(description = "")
  public Integer getPathLength() {
    return pathLength;
  }

  public void setPathLength(Integer pathLength) {
    this.pathLength = pathLength;
  }

  public Limits maxGuestsPerRequest(Integer maxGuestsPerRequest) {
    this.maxGuestsPerRequest = maxGuestsPerRequest;
    return this;
  }

   /**
   * Get maxGuestsPerRequest
   * @return maxGuestsPerRequest
  **/
  @Schema(description = "")
  public Integer getMaxGuestsPerRequest() {
    return maxGuestsPerRequest;
  }

  public void setMaxGuestsPerRequest(Integer maxGuestsPerRequest) {
    this.maxGuestsPerRequest = maxGuestsPerRequest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Limits limits = (Limits) o;
    return Objects.equals(this.fileSize, limits.fileSize) &&
        Objects.equals(this.resourcesPerContainer, limits.resourcesPerContainer) &&
        Objects.equals(this.resourcesPerTrash, limits.resourcesPerTrash) &&
        Objects.equals(this.pathLength, limits.pathLength) &&
        Objects.equals(this.maxGuestsPerRequest, limits.maxGuestsPerRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, resourcesPerContainer, resourcesPerTrash, pathLength, maxGuestsPerRequest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Limits {\n");
    
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    resourcesPerContainer: ").append(toIndentedString(resourcesPerContainer)).append("\n");
    sb.append("    resourcesPerTrash: ").append(toIndentedString(resourcesPerTrash)).append("\n");
    sb.append("    pathLength: ").append(toIndentedString(pathLength)).append("\n");
    sb.append("    maxGuestsPerRequest: ").append(toIndentedString(maxGuestsPerRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
