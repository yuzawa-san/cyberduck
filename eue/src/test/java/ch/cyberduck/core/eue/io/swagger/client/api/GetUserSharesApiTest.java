/*
 * ReSTFS
 * ReSTFS Open API 3.0 Spec
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.eue.io.swagger.client.api;

import ch.cyberduck.core.AlphanumericRandomStringService;
import ch.cyberduck.core.DisabledPasswordCallback;
import ch.cyberduck.core.Path;
import ch.cyberduck.core.eue.AbstractEueSessionTest;
import ch.cyberduck.core.eue.EueDeleteFeature;
import ch.cyberduck.core.eue.EueDirectoryFeature;
import ch.cyberduck.core.eue.EueResourceIdProvider;
import ch.cyberduck.core.eue.io.swagger.client.ApiException;
import ch.cyberduck.core.eue.io.swagger.client.model.ShareCreationResponseEntry;
import ch.cyberduck.core.eue.io.swagger.client.model.UserSharesModel;
import ch.cyberduck.core.exception.BackgroundException;
import ch.cyberduck.core.features.Delete;
import ch.cyberduck.core.transfer.TransferStatus;
import ch.cyberduck.test.IntegrationTest;

import org.junit.Test;
import org.junit.Ignore;
import org.junit.experimental.categories.Category;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertTrue;

/**
 * API tests for GetUserSharesApi
 */
@Category(IntegrationTest.class)
public class GetUserSharesApiTest extends AbstractEueSessionTest {

    private final GetUserSharesApi api = new GetUserSharesApi();

    /**
     * 
     *
     * Retrieve the metadata of all shares of this user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void shareGetTest() throws ApiException, BackgroundException {
        String cookie = null;
        String option = null;
        final EueResourceIdProvider fileid = new EueResourceIdProvider(session);
        final Path folder = new EueDirectoryFeature(session, fileid).mkdir(new Path(new AlphanumericRandomStringService().random(), EnumSet.of(Path.Type.directory)), new TransferStatus());
        final ShareCreationResponseEntry shareCreationResponseEntry = createShare(fileid, folder);
        final String shareName = shareCreationResponseEntry.getEntity().getName();
        UserSharesModel sharesModel = api.shareGet(cookie, option);
        new EueDeleteFeature(session, fileid).delete(Collections.singletonList(folder), new DisabledPasswordCallback(), new Delete.DisabledCallback());
        assertTrue(sharesModel.stream().anyMatch(sm -> sm.getName().equalsIgnoreCase(shareName)));
    }
}
