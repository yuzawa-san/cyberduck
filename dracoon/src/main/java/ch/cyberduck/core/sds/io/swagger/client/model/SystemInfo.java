/*
 * DRACOON API
 * REST Web Services for DRACOON<br>built at: 1970-01-01 00:00:00.000<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * OpenAPI spec version: 4.28.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.sds.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.sds.io.swagger.client.model.AuthMethod;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * System information (default language and authentication methods)
 */
@Schema(description = "System information (default language and authentication methods)")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-25T23:34:01.480829+02:00[Europe/Paris]")
public class SystemInfo {
  @JsonProperty("languageDefault")
  private String languageDefault = null;

  @JsonProperty("hideLoginInputFields")
  private Boolean hideLoginInputFields = null;

  @JsonProperty("s3Hosts")
  private List<String> s3Hosts = new ArrayList<>();

  @JsonProperty("s3EnforceDirectUpload")
  private Boolean s3EnforceDirectUpload = null;

  @JsonProperty("useS3Storage")
  private Boolean useS3Storage = null;

  @JsonProperty("authMethods")
  private List<AuthMethod> authMethods = new ArrayList<>();

  public SystemInfo languageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
    return this;
  }

   /**
   * System default language  cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)
   * @return languageDefault
  **/
  @Schema(required = true, description = "System default language  cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)")
  public String getLanguageDefault() {
    return languageDefault;
  }

  public void setLanguageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
  }

  public SystemInfo hideLoginInputFields(Boolean hideLoginInputFields) {
    this.hideLoginInputFields = hideLoginInputFields;
    return this;
  }

   /**
   * &amp;#128640; Since v4.13.0  Defines if login fields should be hidden
   * @return hideLoginInputFields
  **/
  @Schema(required = true, description = "&#128640; Since v4.13.0  Defines if login fields should be hidden")
  public Boolean isHideLoginInputFields() {
    return hideLoginInputFields;
  }

  public void setHideLoginInputFields(Boolean hideLoginInputFields) {
    this.hideLoginInputFields = hideLoginInputFields;
  }

  public SystemInfo s3Hosts(List<String> s3Hosts) {
    this.s3Hosts = s3Hosts;
    return this;
  }

  public SystemInfo addS3HostsItem(String s3HostsItem) {
    this.s3Hosts.add(s3HostsItem);
    return this;
  }

   /**
   * &amp;#128640; Since v4.14.0  List of S3 Hosts for CSP header
   * @return s3Hosts
  **/
  @Schema(required = true, description = "&#128640; Since v4.14.0  List of S3 Hosts for CSP header")
  public List<String> getS3Hosts() {
    return s3Hosts;
  }

  public void setS3Hosts(List<String> s3Hosts) {
    this.s3Hosts = s3Hosts;
  }

  public SystemInfo s3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
    return this;
  }

   /**
   * &amp;#128640; Since v4.15.0  Determines whether S3 direct upload is enforced or not
   * @return s3EnforceDirectUpload
  **/
  @Schema(required = true, description = "&#128640; Since v4.15.0  Determines whether S3 direct upload is enforced or not")
  public Boolean isS3EnforceDirectUpload() {
    return s3EnforceDirectUpload;
  }

  public void setS3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
  }

  public SystemInfo useS3Storage(Boolean useS3Storage) {
    this.useS3Storage = useS3Storage;
    return this;
  }

   /**
   * &amp;#128640; Since v4.21.0  Defines if S3 is used as storage backend
   * @return useS3Storage
  **/
  @Schema(required = true, description = "&#128640; Since v4.21.0  Defines if S3 is used as storage backend")
  public Boolean isUseS3Storage() {
    return useS3Storage;
  }

  public void setUseS3Storage(Boolean useS3Storage) {
    this.useS3Storage = useS3Storage;
  }

  public SystemInfo authMethods(List<AuthMethod> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public SystemInfo addAuthMethodsItem(AuthMethod authMethodsItem) {
    this.authMethods.add(authMethodsItem);
    return this;
  }

   /**
   * &amp;#128679; Deprecated since v4.13.0  Authentication methods:  * &#x60;sql&#x60;  * &#x60;active_directory&#x60;  * &#x60;radius&#x60;  * &#x60;openid&#x60;  use &#x60;authData&#x60; instead
   * @return authMethods
  **/
  @Schema(required = true, description = "&#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `radius`  * `openid`  use `authData` instead")
  public List<AuthMethod> getAuthMethods() {
    return authMethods;
  }

  public void setAuthMethods(List<AuthMethod> authMethods) {
    this.authMethods = authMethods;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfo systemInfo = (SystemInfo) o;
    return Objects.equals(this.languageDefault, systemInfo.languageDefault) &&
        Objects.equals(this.hideLoginInputFields, systemInfo.hideLoginInputFields) &&
        Objects.equals(this.s3Hosts, systemInfo.s3Hosts) &&
        Objects.equals(this.s3EnforceDirectUpload, systemInfo.s3EnforceDirectUpload) &&
        Objects.equals(this.useS3Storage, systemInfo.useS3Storage) &&
        Objects.equals(this.authMethods, systemInfo.authMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageDefault, hideLoginInputFields, s3Hosts, s3EnforceDirectUpload, useS3Storage, authMethods);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfo {\n");
    
    sb.append("    languageDefault: ").append(toIndentedString(languageDefault)).append("\n");
    sb.append("    hideLoginInputFields: ").append(toIndentedString(hideLoginInputFields)).append("\n");
    sb.append("    s3Hosts: ").append(toIndentedString(s3Hosts)).append("\n");
    sb.append("    s3EnforceDirectUpload: ").append(toIndentedString(s3EnforceDirectUpload)).append("\n");
    sb.append("    useS3Storage: ").append(toIndentedString(useS3Storage)).append("\n");
    sb.append("    authMethods: ").append(toIndentedString(authMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
