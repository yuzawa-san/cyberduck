/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import org.joda.time.DateTime;
import java.io.File;
import ch.cyberduck.core.brick.io.swagger.client.model.GroupEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.GroupUserEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.PermissionEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.UserEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Ignore
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    
    /**
     * Delete Group User
     *
     * Delete Group User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupsGroupIdMembershipsUserIdTest() throws ApiException {
        Integer groupId = null;
        Integer userId = null;
        api.deleteGroupsGroupIdMembershipsUserId(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete Group
     *
     * Delete Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupsIdTest() throws ApiException {
        Integer id = null;
        api.deleteGroupsId(id);

        // TODO: test validations
    }
    
    /**
     * List Groups
     *
     * List Groups
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        String ids = null;
        List<GroupEntity> response = api.getGroups(cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, ids);

        // TODO: test validations
    }
    
    /**
     * List Permissions
     *
     * List Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsGroupIdPermissionsTest() throws ApiException {
        String groupId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        String path = null;
        String userId = null;
        Boolean includeGroups = null;
        List<PermissionEntity> response = api.getGroupsGroupIdPermissions(groupId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, path, userId, includeGroups);

        // TODO: test validations
    }
    
    /**
     * List Group Users
     *
     * List Group Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsGroupIdUsersTest() throws ApiException {
        Integer groupId = null;
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<GroupUserEntity> response = api.getGroupsGroupIdUsers(groupId, userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * Show Group
     *
     * Show Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsIdTest() throws ApiException {
        Integer id = null;
        GroupEntity response = api.getGroupsId(id);

        // TODO: test validations
    }
    
    /**
     * Update Group User
     *
     * Update Group User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchGroupsGroupIdMembershipsUserIdTest() throws ApiException {
        Integer groupId = null;
        Integer userId = null;
        Boolean admin = null;
        GroupUserEntity response = api.patchGroupsGroupIdMembershipsUserId(groupId, userId, admin);

        // TODO: test validations
    }
    
    /**
     * Update Group
     *
     * Update Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchGroupsIdTest() throws ApiException {
        Integer id = null;
        String name = null;
        String notes = null;
        String userIds = null;
        String adminIds = null;
        GroupEntity response = api.patchGroupsId(id, name, notes, userIds, adminIds);

        // TODO: test validations
    }
    
    /**
     * Create Group
     *
     * Create Group
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGroupsTest() throws ApiException {
        String name = null;
        String notes = null;
        String userIds = null;
        String adminIds = null;
        GroupEntity response = api.postGroups(name, notes, userIds, adminIds);

        // TODO: test validations
    }
    
    /**
     * Create User
     *
     * Create User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postGroupsGroupIdUsersTest() throws ApiException {
        Integer groupId = null;
        File avatarFile = null;
        Boolean avatarDelete = null;
        String changePassword = null;
        String changePasswordConfirmation = null;
        String email = null;
        String grantPermission = null;
        String groupIds = null;
        String password = null;
        String passwordConfirmation = null;
        Boolean announcementsRead = null;
        String allowedIps = null;
        Boolean attachmentsPermission = null;
        DateTime authenticateUntil = null;
        String authenticationMethod = null;
        Boolean billingPermission = null;
        Boolean bypassInactiveDisable = null;
        Boolean bypassSiteAllowedIps = null;
        Boolean davPermission = null;
        Boolean disabled = null;
        Boolean ftpPermission = null;
        String headerText = null;
        String language = null;
        Integer notificationDailySendTime = null;
        String name = null;
        String company = null;
        String notes = null;
        Boolean officeIntegrationEnabled = null;
        Integer passwordValidityDays = null;
        Boolean receiveAdminAlerts = null;
        Boolean requirePasswordChange = null;
        Boolean restapiPermission = null;
        Boolean selfManaged = null;
        Boolean sftpPermission = null;
        Boolean siteAdmin = null;
        Boolean skipWelcomeScreen = null;
        String sslRequired = null;
        Integer ssoStrategyId = null;
        Boolean subscribeToNewsletter = null;
        String require2fa = null;
        String timeZone = null;
        String userRoot = null;
        String username = null;
        UserEntity response = api.postGroupsGroupIdUsers(groupId, avatarFile, avatarDelete, changePassword, changePasswordConfirmation, email, grantPermission, groupIds, password, passwordConfirmation, announcementsRead, allowedIps, attachmentsPermission, authenticateUntil, authenticationMethod, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, davPermission, disabled, ftpPermission, headerText, language, notificationDailySendTime, name, company, notes, officeIntegrationEnabled, passwordValidityDays, receiveAdminAlerts, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, require2fa, timeZone, userRoot, username);

        // TODO: test validations
    }
    
}
