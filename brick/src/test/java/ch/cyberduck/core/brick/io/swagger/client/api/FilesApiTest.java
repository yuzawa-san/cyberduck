/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import org.joda.time.DateTime;
import ch.cyberduck.core.brick.io.swagger.client.model.FileEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Ignore
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    
    /**
     * Delete file/folder
     *
     * Delete file/folder
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteFilesPathTest() throws ApiException {
        String path = null;
        Boolean recursive = null;
        api.deleteFilesPath(path, recursive);

        // TODO: test validations
    }
    
    /**
     * Download file
     *
     * Download file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadTest() throws ApiException {
        String path = null;
        String action = null;
        String previewSize = null;
        Boolean withPreviews = null;
        Boolean withPriorityColor = null;
        FileEntity response = api.download(path, action, previewSize, withPreviews, withPriorityColor);

        // TODO: test validations
    }
    
    /**
     * Update file/folder metadata
     *
     * Update file/folder metadata
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchFilesPathTest() throws ApiException {
        String path = null;
        DateTime providedMtime = null;
        String priorityColor = null;
        FileEntity response = api.patchFilesPath(path, providedMtime, priorityColor);

        // TODO: test validations
    }
    
    /**
     * Upload file
     *
     * Upload file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postFilesPathTest() throws ApiException {
        String path = null;
        List<String> etagsEtag = null;
        List<Integer> etagsPart = null;
        String action = null;
        Integer length = null;
        Boolean mkdirParents = null;
        Integer part = null;
        Integer parts = null;
        DateTime providedMtime = null;
        String ref = null;
        Integer restart = null;
        Integer size = null;
        String structure = null;
        Boolean withRename = null;
        FileEntity response = api.postFilesPath(path, etagsEtag, etagsPart, action, length, mkdirParents, part, parts, providedMtime, ref, restart, size, structure, withRename);

        // TODO: test validations
    }
    
}
