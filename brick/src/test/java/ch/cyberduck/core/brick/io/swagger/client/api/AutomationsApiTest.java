/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.AutomationEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AutomationsApi
 */
@Ignore
public class AutomationsApiTest {

    private final AutomationsApi api = new AutomationsApi();

    
    /**
     * Delete Automation
     *
     * Delete Automation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAutomationsIdTest() throws ApiException {
        Integer id = null;
        api.deleteAutomationsId(id);

        // TODO: test validations
    }
    
    /**
     * List Automations
     *
     * List Automations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        String automation = null;
        List<AutomationEntity> response = api.getAutomations(cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, automation);

        // TODO: test validations
    }
    
    /**
     * Show Automation
     *
     * Show Automation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAutomationsIdTest() throws ApiException {
        Integer id = null;
        AutomationEntity response = api.getAutomationsId(id);

        // TODO: test validations
    }
    
    /**
     * Update Automation
     *
     * Update Automation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAutomationsIdTest() throws ApiException {
        Integer id = null;
        String automation = null;
        String source = null;
        String destination = null;
        List<String> destinations = null;
        String destinationReplaceFrom = null;
        String destinationReplaceTo = null;
        String interval = null;
        String path = null;
        String userIds = null;
        String groupIds = null;
        Map<String, String> schedule = null;
        String trigger = null;
        List<String> triggerActions = null;
        String triggerActionPath = null;
        Map<String, String> value = null;
        AutomationEntity response = api.patchAutomationsId(id, automation, source, destination, destinations, destinationReplaceFrom, destinationReplaceTo, interval, path, userIds, groupIds, schedule, trigger, triggerActions, triggerActionPath, value);

        // TODO: test validations
    }
    
    /**
     * Create Automation
     *
     * Create Automation
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postAutomationsTest() throws ApiException {
        String automation = null;
        String source = null;
        String destination = null;
        List<String> destinations = null;
        String destinationReplaceFrom = null;
        String destinationReplaceTo = null;
        String interval = null;
        String path = null;
        String userIds = null;
        String groupIds = null;
        Map<String, String> schedule = null;
        String trigger = null;
        List<String> triggerActions = null;
        String triggerActionPath = null;
        Map<String, String> value = null;
        AutomationEntity response = api.postAutomations(automation, source, destination, destinations, destinationReplaceFrom, destinationReplaceTo, interval, path, userIds, groupIds, schedule, trigger, triggerActions, triggerActionPath, value);

        // TODO: test validations
    }
    
}
