/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.ActionEntity;
import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HistoryApi
 */
@Ignore
public class HistoryApiTest {

    private final HistoryApi api = new HistoryApi();

    
    /**
     * List site full action history.
     *
     * List site full action history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void callListTest() throws ApiException {
        DateTime startAt = null;
        DateTime endAt = null;
        String display = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        List<ActionEntity> response = api.callList(startAt, endAt, display, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq);

        // TODO: test validations
    }
    
    /**
     * List history for specific file.
     *
     * List history for specific file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listForFileTest() throws ApiException {
        String path = null;
        DateTime startAt = null;
        DateTime endAt = null;
        String display = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        List<ActionEntity> response = api.listForFile(path, startAt, endAt, display, cursor, perPage, sortBy);

        // TODO: test validations
    }
    
    /**
     * List history for specific folder.
     *
     * List history for specific folder.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listForFolderTest() throws ApiException {
        String path = null;
        DateTime startAt = null;
        DateTime endAt = null;
        String display = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        List<ActionEntity> response = api.listForFolder(path, startAt, endAt, display, cursor, perPage, sortBy);

        // TODO: test validations
    }
    
    /**
     * List history for specific user.
     *
     * List history for specific user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listForUserTest() throws ApiException {
        Integer userId = null;
        DateTime startAt = null;
        DateTime endAt = null;
        String display = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        List<ActionEntity> response = api.listForUser(userId, startAt, endAt, display, cursor, perPage, sortBy);

        // TODO: test validations
    }
    
    /**
     * List site login history.
     *
     * List site login history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listLoginsTest() throws ApiException {
        DateTime startAt = null;
        DateTime endAt = null;
        String display = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        List<ActionEntity> response = api.listLogins(startAt, endAt, display, cursor, perPage, sortBy);

        // TODO: test validations
    }
    
}
