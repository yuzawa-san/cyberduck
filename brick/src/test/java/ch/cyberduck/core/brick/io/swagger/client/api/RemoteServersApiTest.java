/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.RemoteServerEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RemoteServersApi
 */
@Ignore
public class RemoteServersApiTest {

    private final RemoteServersApi api = new RemoteServersApi();

    
    /**
     * Delete Remote Server
     *
     * Delete Remote Server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRemoteServersIdTest() throws ApiException {
        Integer id = null;
        api.deleteRemoteServersId(id);

        // TODO: test validations
    }
    
    /**
     * List Remote Servers
     *
     * List Remote Servers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteServersTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        List<RemoteServerEntity> response = api.getRemoteServers(cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * Show Remote Server
     *
     * Show Remote Server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRemoteServersIdTest() throws ApiException {
        Integer id = null;
        RemoteServerEntity response = api.getRemoteServersId(id);

        // TODO: test validations
    }
    
    /**
     * Update Remote Server
     *
     * Update Remote Server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchRemoteServersIdTest() throws ApiException {
        Integer id = null;
        String awsAccessKey = null;
        String awsSecretKey = null;
        String password = null;
        String privateKey = null;
        String sslCertificate = null;
        String googleCloudStorageCredentialsJson = null;
        String wasabiAccessKey = null;
        String wasabiSecretKey = null;
        String backblazeB2KeyId = null;
        String backblazeB2ApplicationKey = null;
        String rackspaceApiKey = null;
        Boolean resetAuthentication = null;
        String azureBlobStorageAccessKey = null;
        String hostname = null;
        String name = null;
        Integer maxConnections = null;
        Integer port = null;
        String s3Bucket = null;
        String s3Region = null;
        String serverCertificate = null;
        String serverHostKey = null;
        String serverType = null;
        String ssl = null;
        String username = null;
        String googleCloudStorageBucket = null;
        String googleCloudStorageProjectId = null;
        String backblazeB2Bucket = null;
        String backblazeB2S3Endpoint = null;
        String wasabiBucket = null;
        String wasabiRegion = null;
        String rackspaceUsername = null;
        String rackspaceRegion = null;
        String rackspaceContainer = null;
        String oneDriveAccountType = null;
        String azureBlobStorageAccount = null;
        String azureBlobStorageContainer = null;
        String s3CompatibleBucket = null;
        String s3CompatibleRegion = null;
        String s3CompatibleEndpoint = null;
        String s3CompatibleAccessKey = null;
        String s3CompatibleSecretKey = null;
        RemoteServerEntity response = api.patchRemoteServersId(id, awsAccessKey, awsSecretKey, password, privateKey, sslCertificate, googleCloudStorageCredentialsJson, wasabiAccessKey, wasabiSecretKey, backblazeB2KeyId, backblazeB2ApplicationKey, rackspaceApiKey, resetAuthentication, azureBlobStorageAccessKey, hostname, name, maxConnections, port, s3Bucket, s3Region, serverCertificate, serverHostKey, serverType, ssl, username, googleCloudStorageBucket, googleCloudStorageProjectId, backblazeB2Bucket, backblazeB2S3Endpoint, wasabiBucket, wasabiRegion, rackspaceUsername, rackspaceRegion, rackspaceContainer, oneDriveAccountType, azureBlobStorageAccount, azureBlobStorageContainer, s3CompatibleBucket, s3CompatibleRegion, s3CompatibleEndpoint, s3CompatibleAccessKey, s3CompatibleSecretKey);

        // TODO: test validations
    }
    
    /**
     * Create Remote Server
     *
     * Create Remote Server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postRemoteServersTest() throws ApiException {
        String awsAccessKey = null;
        String awsSecretKey = null;
        String password = null;
        String privateKey = null;
        String sslCertificate = null;
        String googleCloudStorageCredentialsJson = null;
        String wasabiAccessKey = null;
        String wasabiSecretKey = null;
        String backblazeB2KeyId = null;
        String backblazeB2ApplicationKey = null;
        String rackspaceApiKey = null;
        Boolean resetAuthentication = null;
        String azureBlobStorageAccessKey = null;
        String hostname = null;
        String name = null;
        Integer maxConnections = null;
        Integer port = null;
        String s3Bucket = null;
        String s3Region = null;
        String serverCertificate = null;
        String serverHostKey = null;
        String serverType = null;
        String ssl = null;
        String username = null;
        String googleCloudStorageBucket = null;
        String googleCloudStorageProjectId = null;
        String backblazeB2Bucket = null;
        String backblazeB2S3Endpoint = null;
        String wasabiBucket = null;
        String wasabiRegion = null;
        String rackspaceUsername = null;
        String rackspaceRegion = null;
        String rackspaceContainer = null;
        String oneDriveAccountType = null;
        String azureBlobStorageAccount = null;
        String azureBlobStorageContainer = null;
        String s3CompatibleBucket = null;
        String s3CompatibleRegion = null;
        String s3CompatibleEndpoint = null;
        String s3CompatibleAccessKey = null;
        String s3CompatibleSecretKey = null;
        RemoteServerEntity response = api.postRemoteServers(awsAccessKey, awsSecretKey, password, privateKey, sslCertificate, googleCloudStorageCredentialsJson, wasabiAccessKey, wasabiSecretKey, backblazeB2KeyId, backblazeB2ApplicationKey, rackspaceApiKey, resetAuthentication, azureBlobStorageAccessKey, hostname, name, maxConnections, port, s3Bucket, s3Region, serverCertificate, serverHostKey, serverType, ssl, username, googleCloudStorageBucket, googleCloudStorageProjectId, backblazeB2Bucket, backblazeB2S3Endpoint, wasabiBucket, wasabiRegion, rackspaceUsername, rackspaceRegion, rackspaceContainer, oneDriveAccountType, azureBlobStorageAccount, azureBlobStorageContainer, s3CompatibleBucket, s3CompatibleRegion, s3CompatibleEndpoint, s3CompatibleAccessKey, s3CompatibleSecretKey);

        // TODO: test validations
    }
    
}
