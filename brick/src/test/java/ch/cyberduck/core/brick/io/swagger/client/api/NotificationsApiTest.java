/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.NotificationEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsApi
 */
@Ignore
public class NotificationsApiTest {

    private final NotificationsApi api = new NotificationsApi();

    
    /**
     * Delete Notification
     *
     * Delete Notification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNotificationsIdTest() throws ApiException {
        Integer id = null;
        api.deleteNotificationsId(id);

        // TODO: test validations
    }
    
    /**
     * List Notifications
     *
     * List Notifications
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        Integer groupId = null;
        String path = null;
        Boolean includeAncestors = null;
        List<NotificationEntity> response = api.getNotifications(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, groupId, path, includeAncestors);

        // TODO: test validations
    }
    
    /**
     * Show Notification
     *
     * Show Notification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsIdTest() throws ApiException {
        Integer id = null;
        NotificationEntity response = api.getNotificationsId(id);

        // TODO: test validations
    }
    
    /**
     * Update Notification
     *
     * Update Notification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNotificationsIdTest() throws ApiException {
        Integer id = null;
        Boolean notifyOnCopy = null;
        Boolean notifyUserActions = null;
        Boolean recursive = null;
        String sendInterval = null;
        NotificationEntity response = api.patchNotificationsId(id, notifyOnCopy, notifyUserActions, recursive, sendInterval);

        // TODO: test validations
    }
    
    /**
     * Create Notification
     *
     * Create Notification
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postNotificationsTest() throws ApiException {
        Integer userId = null;
        Boolean notifyOnCopy = null;
        Boolean notifyUserActions = null;
        Boolean recursive = null;
        String sendInterval = null;
        Integer groupId = null;
        String path = null;
        String username = null;
        NotificationEntity response = api.postNotifications(userId, notifyOnCopy, notifyUserActions, recursive, sendInterval, groupId, path, username);

        // TODO: test validations
    }
    
}
