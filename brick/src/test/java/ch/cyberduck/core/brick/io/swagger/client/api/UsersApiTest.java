/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.ApiKeyEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.As2KeyEntity;
import org.joda.time.DateTime;
import java.io.File;
import ch.cyberduck.core.brick.io.swagger.client.model.GroupUserEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.PermissionEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.PublicKeyEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.UserCipherUseEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.UserEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Delete User
     *
     * Delete User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsersIdTest() throws ApiException {
        Integer id = null;
        api.deleteUsersId(id);

        // TODO: test validations
    }
    
    /**
     * List Users
     *
     * List Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        String ids = null;
        String qUsername = null;
        String qEmail = null;
        String qNotes = null;
        String qAdmin = null;
        String qAllowedIps = null;
        String qPasswordValidityDays = null;
        String qSslRequired = null;
        String search = null;
        List<UserEntity> response = api.getUsers(cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, ids, qUsername, qEmail, qNotes, qAdmin, qAllowedIps, qPasswordValidityDays, qSslRequired, search);

        // TODO: test validations
    }
    
    /**
     * Show User
     *
     * Show User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersIdTest() throws ApiException {
        Integer id = null;
        UserEntity response = api.getUsersId(id);

        // TODO: test validations
    }
    
    /**
     * List Api Keys
     *
     * List Api Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdApiKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        List<ApiKeyEntity> response = api.getUsersUserIdApiKeys(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq);

        // TODO: test validations
    }
    
    /**
     * List As2 Keys
     *
     * List As2 Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdAs2KeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<As2KeyEntity> response = api.getUsersUserIdAs2Keys(userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * List User Cipher Uses
     *
     * List User Cipher Uses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdCipherUsesTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<UserCipherUseEntity> response = api.getUsersUserIdCipherUses(userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * List Group Users
     *
     * List Group Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdGroupsTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Integer groupId = null;
        List<GroupUserEntity> response = api.getUsersUserIdGroups(userId, cursor, perPage, groupId);

        // TODO: test validations
    }
    
    /**
     * List Permissions
     *
     * List Permissions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdPermissionsTest() throws ApiException {
        String userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        String path = null;
        String groupId = null;
        Boolean includeGroups = null;
        List<PermissionEntity> response = api.getUsersUserIdPermissions(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq, path, groupId, includeGroups);

        // TODO: test validations
    }
    
    /**
     * List Public Keys
     *
     * List Public Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersUserIdPublicKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<PublicKeyEntity> response = api.getUsersUserIdPublicKeys(userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * Update User
     *
     * Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUsersIdTest() throws ApiException {
        Integer id = null;
        File avatarFile = null;
        Boolean avatarDelete = null;
        String changePassword = null;
        String changePasswordConfirmation = null;
        String email = null;
        String grantPermission = null;
        Integer groupId = null;
        String groupIds = null;
        String password = null;
        String passwordConfirmation = null;
        Boolean announcementsRead = null;
        String allowedIps = null;
        Boolean attachmentsPermission = null;
        DateTime authenticateUntil = null;
        String authenticationMethod = null;
        Boolean billingPermission = null;
        Boolean bypassInactiveDisable = null;
        Boolean bypassSiteAllowedIps = null;
        Boolean davPermission = null;
        Boolean disabled = null;
        Boolean ftpPermission = null;
        String headerText = null;
        String language = null;
        Integer notificationDailySendTime = null;
        String name = null;
        String company = null;
        String notes = null;
        Boolean officeIntegrationEnabled = null;
        Integer passwordValidityDays = null;
        Boolean receiveAdminAlerts = null;
        Boolean requirePasswordChange = null;
        Boolean restapiPermission = null;
        Boolean selfManaged = null;
        Boolean sftpPermission = null;
        Boolean siteAdmin = null;
        Boolean skipWelcomeScreen = null;
        String sslRequired = null;
        Integer ssoStrategyId = null;
        Boolean subscribeToNewsletter = null;
        String require2fa = null;
        String timeZone = null;
        String userRoot = null;
        String username = null;
        UserEntity response = api.patchUsersId(id, avatarFile, avatarDelete, changePassword, changePasswordConfirmation, email, grantPermission, groupId, groupIds, password, passwordConfirmation, announcementsRead, allowedIps, attachmentsPermission, authenticateUntil, authenticationMethod, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, davPermission, disabled, ftpPermission, headerText, language, notificationDailySendTime, name, company, notes, officeIntegrationEnabled, passwordValidityDays, receiveAdminAlerts, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, require2fa, timeZone, userRoot, username);

        // TODO: test validations
    }
    
    /**
     * Create User
     *
     * Create User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersTest() throws ApiException {
        File avatarFile = null;
        Boolean avatarDelete = null;
        String changePassword = null;
        String changePasswordConfirmation = null;
        String email = null;
        String grantPermission = null;
        Integer groupId = null;
        String groupIds = null;
        String password = null;
        String passwordConfirmation = null;
        Boolean announcementsRead = null;
        String allowedIps = null;
        Boolean attachmentsPermission = null;
        DateTime authenticateUntil = null;
        String authenticationMethod = null;
        Boolean billingPermission = null;
        Boolean bypassInactiveDisable = null;
        Boolean bypassSiteAllowedIps = null;
        Boolean davPermission = null;
        Boolean disabled = null;
        Boolean ftpPermission = null;
        String headerText = null;
        String language = null;
        Integer notificationDailySendTime = null;
        String name = null;
        String company = null;
        String notes = null;
        Boolean officeIntegrationEnabled = null;
        Integer passwordValidityDays = null;
        Boolean receiveAdminAlerts = null;
        Boolean requirePasswordChange = null;
        Boolean restapiPermission = null;
        Boolean selfManaged = null;
        Boolean sftpPermission = null;
        Boolean siteAdmin = null;
        Boolean skipWelcomeScreen = null;
        String sslRequired = null;
        Integer ssoStrategyId = null;
        Boolean subscribeToNewsletter = null;
        String require2fa = null;
        String timeZone = null;
        String userRoot = null;
        String username = null;
        UserEntity response = api.postUsers(avatarFile, avatarDelete, changePassword, changePasswordConfirmation, email, grantPermission, groupId, groupIds, password, passwordConfirmation, announcementsRead, allowedIps, attachmentsPermission, authenticateUntil, authenticationMethod, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, davPermission, disabled, ftpPermission, headerText, language, notificationDailySendTime, name, company, notes, officeIntegrationEnabled, passwordValidityDays, receiveAdminAlerts, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, require2fa, timeZone, userRoot, username);

        // TODO: test validations
    }
    
    /**
     * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
     *
     * Trigger 2FA Reset process for user who has lost access to their existing 2FA methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersId2faResetTest() throws ApiException {
        Integer id = null;
        api.postUsersId2faReset(id);

        // TODO: test validations
    }
    
    /**
     * Resend user welcome email
     *
     * Resend user welcome email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersIdResendWelcomeEmailTest() throws ApiException {
        Integer id = null;
        api.postUsersIdResendWelcomeEmail(id);

        // TODO: test validations
    }
    
    /**
     * Unlock user who has been locked out due to failed logins.
     *
     * Unlock user who has been locked out due to failed logins.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersIdUnlockTest() throws ApiException {
        Integer id = null;
        api.postUsersIdUnlock(id);

        // TODO: test validations
    }
    
    /**
     * Create Api Key
     *
     * Create Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersUserIdApiKeysTest() throws ApiException {
        Integer userId = null;
        String name = null;
        DateTime expiresAt = null;
        String permissionSet = null;
        String path = null;
        ApiKeyEntity response = api.postUsersUserIdApiKeys(userId, name, expiresAt, permissionSet, path);

        // TODO: test validations
    }
    
    /**
     * Create As2 Key
     *
     * Create As2 Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersUserIdAs2KeysTest() throws ApiException {
        Integer userId = null;
        String as2PartnershipName = null;
        String publicKey = null;
        As2KeyEntity response = api.postUsersUserIdAs2Keys(userId, as2PartnershipName, publicKey);

        // TODO: test validations
    }
    
    /**
     * Create Public Key
     *
     * Create Public Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUsersUserIdPublicKeysTest() throws ApiException {
        Integer userId = null;
        String title = null;
        String publicKey = null;
        PublicKeyEntity response = api.postUsersUserIdPublicKeys(userId, title, publicKey);

        // TODO: test validations
    }
    
}
