/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.BundleEntity;
import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BundlesApi
 */
@Ignore
public class BundlesApiTest {

    private final BundlesApi api = new BundlesApi();

    
    /**
     * Delete Bundle
     *
     * Delete Bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBundlesIdTest() throws ApiException {
        Integer id = null;
        api.deleteBundlesId(id);

        // TODO: test validations
    }
    
    /**
     * List Bundles
     *
     * List Bundles
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBundlesTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        List<BundleEntity> response = api.getBundles(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq);

        // TODO: test validations
    }
    
    /**
     * Show Bundle
     *
     * Show Bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBundlesIdTest() throws ApiException {
        Integer id = null;
        BundleEntity response = api.getBundlesId(id);

        // TODO: test validations
    }
    
    /**
     * Update Bundle
     *
     * Update Bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchBundlesIdTest() throws ApiException {
        Integer id = null;
        List<String> paths = null;
        String password = null;
        Integer formFieldSetId = null;
        Integer clickwrapId = null;
        String code = null;
        String description = null;
        DateTime expiresAt = null;
        Integer inboxId = null;
        Integer maxUses = null;
        String note = null;
        Boolean previewOnly = null;
        Boolean requireRegistration = null;
        Boolean requireShareRecipient = null;
        BundleEntity response = api.patchBundlesId(id, paths, password, formFieldSetId, clickwrapId, code, description, expiresAt, inboxId, maxUses, note, previewOnly, requireRegistration, requireShareRecipient);

        // TODO: test validations
    }
    
    /**
     * Create Bundle
     *
     * Create Bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBundlesTest() throws ApiException {
        List<String> paths = null;
        Integer userId = null;
        String password = null;
        Integer formFieldSetId = null;
        DateTime expiresAt = null;
        Integer maxUses = null;
        String description = null;
        String note = null;
        String code = null;
        Boolean previewOnly = null;
        Boolean requireRegistration = null;
        Integer clickwrapId = null;
        Integer inboxId = null;
        Boolean requireShareRecipient = null;
        BundleEntity response = api.postBundles(paths, userId, password, formFieldSetId, expiresAt, maxUses, description, note, code, previewOnly, requireRegistration, clickwrapId, inboxId, requireShareRecipient);

        // TODO: test validations
    }
    
    /**
     * Send email(s) with a link to bundle
     *
     * Send email(s) with a link to bundle
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postBundlesIdShareTest() throws ApiException {
        Integer id = null;
        List<String> to = null;
        String note = null;
        List<Object> recipients = null;
        api.postBundlesIdShare(id, to, note, recipients);

        // TODO: test validations
    }
    
}
