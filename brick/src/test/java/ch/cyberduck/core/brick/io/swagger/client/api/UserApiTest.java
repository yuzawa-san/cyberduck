/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.ApiKeyEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.As2KeyEntity;
import org.joda.time.DateTime;
import java.io.File;
import ch.cyberduck.core.brick.io.swagger.client.model.GroupUserEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.PublicKeyEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.UserEntity;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * List Api Keys
     *
     * List Api Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserApiKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        List<ApiKeyEntity> response = api.getUserApiKeys(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq);

        // TODO: test validations
    }
    
    /**
     * List As2 Keys
     *
     * List As2 Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserAs2KeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<As2KeyEntity> response = api.getUserAs2Keys(userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * List Group Users
     *
     * List Group Users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserGroupsTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Integer groupId = null;
        List<GroupUserEntity> response = api.getUserGroups(userId, cursor, perPage, groupId);

        // TODO: test validations
    }
    
    /**
     * List Public Keys
     *
     * List Public Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserPublicKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        List<PublicKeyEntity> response = api.getUserPublicKeys(userId, cursor, perPage);

        // TODO: test validations
    }
    
    /**
     * Update User
     *
     * Update User
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        File avatarFile = null;
        Boolean avatarDelete = null;
        String changePassword = null;
        String changePasswordConfirmation = null;
        String email = null;
        String grantPermission = null;
        Integer groupId = null;
        String groupIds = null;
        String password = null;
        String passwordConfirmation = null;
        Boolean announcementsRead = null;
        String allowedIps = null;
        Boolean attachmentsPermission = null;
        DateTime authenticateUntil = null;
        String authenticationMethod = null;
        Boolean billingPermission = null;
        Boolean bypassInactiveDisable = null;
        Boolean bypassSiteAllowedIps = null;
        Boolean davPermission = null;
        Boolean disabled = null;
        Boolean ftpPermission = null;
        String headerText = null;
        String language = null;
        Integer notificationDailySendTime = null;
        String name = null;
        String company = null;
        String notes = null;
        Boolean officeIntegrationEnabled = null;
        Integer passwordValidityDays = null;
        Boolean receiveAdminAlerts = null;
        Boolean requirePasswordChange = null;
        Boolean restapiPermission = null;
        Boolean selfManaged = null;
        Boolean sftpPermission = null;
        Boolean siteAdmin = null;
        Boolean skipWelcomeScreen = null;
        String sslRequired = null;
        Integer ssoStrategyId = null;
        Boolean subscribeToNewsletter = null;
        String require2fa = null;
        String timeZone = null;
        String userRoot = null;
        String username = null;
        UserEntity response = api.patchUser(avatarFile, avatarDelete, changePassword, changePasswordConfirmation, email, grantPermission, groupId, groupIds, password, passwordConfirmation, announcementsRead, allowedIps, attachmentsPermission, authenticateUntil, authenticationMethod, billingPermission, bypassInactiveDisable, bypassSiteAllowedIps, davPermission, disabled, ftpPermission, headerText, language, notificationDailySendTime, name, company, notes, officeIntegrationEnabled, passwordValidityDays, receiveAdminAlerts, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, require2fa, timeZone, userRoot, username);

        // TODO: test validations
    }
    
    /**
     * Create Api Key
     *
     * Create Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUserApiKeysTest() throws ApiException {
        Integer userId = null;
        String name = null;
        DateTime expiresAt = null;
        String permissionSet = null;
        String path = null;
        ApiKeyEntity response = api.postUserApiKeys(userId, name, expiresAt, permissionSet, path);

        // TODO: test validations
    }
    
    /**
     * Create As2 Key
     *
     * Create As2 Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUserAs2KeysTest() throws ApiException {
        String as2PartnershipName = null;
        String publicKey = null;
        Integer userId = null;
        As2KeyEntity response = api.postUserAs2Keys(as2PartnershipName, publicKey, userId);

        // TODO: test validations
    }
    
    /**
     * Create Public Key
     *
     * Create Public Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postUserPublicKeysTest() throws ApiException {
        String title = null;
        String publicKey = null;
        Integer userId = null;
        PublicKeyEntity response = api.postUserPublicKeys(title, publicKey, userId);

        // TODO: test validations
    }
    
}
