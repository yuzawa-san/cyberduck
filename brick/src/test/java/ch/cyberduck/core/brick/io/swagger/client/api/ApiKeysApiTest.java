/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.api;

import ch.cyberduck.core.brick.io.swagger.client.ApiException;
import ch.cyberduck.core.brick.io.swagger.client.model.ApiKeyEntity;
import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeysApi
 */
@Ignore
public class ApiKeysApiTest {

    private final ApiKeysApi api = new ApiKeysApi();

    
    /**
     * Delete Api Key
     *
     * Delete Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeysIdTest() throws ApiException {
        Integer id = null;
        api.deleteApiKeysId(id);

        // TODO: test validations
    }
    
    /**
     * List Api Keys
     *
     * List Api Keys
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        Integer userId = null;
        String cursor = null;
        Integer perPage = null;
        Map<String, String> sortBy = null;
        Map<String, String> filter = null;
        Map<String, String> filterGt = null;
        Map<String, String> filterGteq = null;
        Map<String, String> filterLike = null;
        Map<String, String> filterLt = null;
        Map<String, String> filterLteq = null;
        List<ApiKeyEntity> response = api.getApiKeys(userId, cursor, perPage, sortBy, filter, filterGt, filterGteq, filterLike, filterLt, filterLteq);

        // TODO: test validations
    }
    
    /**
     * Show Api Key
     *
     * Show Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getApiKeysIdTest() throws ApiException {
        Integer id = null;
        ApiKeyEntity response = api.getApiKeysId(id);

        // TODO: test validations
    }
    
    /**
     * Update Api Key
     *
     * Update Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchApiKeysIdTest() throws ApiException {
        Integer id = null;
        String name = null;
        DateTime expiresAt = null;
        String permissionSet = null;
        ApiKeyEntity response = api.patchApiKeysId(id, name, expiresAt, permissionSet);

        // TODO: test validations
    }
    
    /**
     * Create Api Key
     *
     * Create Api Key
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postApiKeysTest() throws ApiException {
        Integer userId = null;
        String name = null;
        DateTime expiresAt = null;
        String permissionSet = null;
        String path = null;
        ApiKeyEntity response = api.postApiKeys(userId, name, expiresAt, permissionSet, path);

        // TODO: test validations
    }
    
}
