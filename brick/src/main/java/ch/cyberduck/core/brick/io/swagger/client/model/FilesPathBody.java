/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * FilesPathBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-17T09:08:22.070861+02:00[Europe/Zurich]")
public class FilesPathBody {
  @JsonProperty("action")
  private String action = null;

  @JsonProperty("etags[etag]")
  private List<String> etagsEtag = new ArrayList<>();

  @JsonProperty("etags[part]")
  private List<Integer> etagsPart = new ArrayList<>();

  @JsonProperty("length")
  private Integer length = null;

  @JsonProperty("mkdir_parents")
  private Boolean mkdirParents = null;

  @JsonProperty("part")
  private Integer part = null;

  @JsonProperty("parts")
  private Integer parts = null;

  @JsonProperty("provided_mtime")
  private DateTime providedMtime = null;

  @JsonProperty("ref")
  private String ref = null;

  @JsonProperty("restart")
  private Integer restart = null;

  @JsonProperty("size")
  private Long size = null;

  @JsonProperty("structure")
  private String structure = null;

  @JsonProperty("with_rename")
  private Boolean withRename = null;

  public FilesPathBody action(String action) {
    this.action = action;
    return this;
  }

   /**
   * The action to perform.  Can be &#x60;append&#x60;, &#x60;attachment&#x60;, &#x60;end&#x60;, &#x60;upload&#x60;, &#x60;put&#x60;, or may not exist
   * @return action
  **/
  @Schema(description = "The action to perform.  Can be `append`, `attachment`, `end`, `upload`, `put`, or may not exist")
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public FilesPathBody etagsEtag(List<String> etagsEtag) {
    this.etagsEtag = etagsEtag;
    return this;
  }

  public FilesPathBody addEtagsEtagItem(String etagsEtagItem) {
    this.etagsEtag.add(etagsEtagItem);
    return this;
  }

   /**
   * etag identifier.
   * @return etagsEtag
  **/
  @Schema(required = true, description = "etag identifier.")
  public List<String> getEtagsEtag() {
    return etagsEtag;
  }

  public void setEtagsEtag(List<String> etagsEtag) {
    this.etagsEtag = etagsEtag;
  }

  public FilesPathBody etagsPart(List<Integer> etagsPart) {
    this.etagsPart = etagsPart;
    return this;
  }

  public FilesPathBody addEtagsPartItem(Integer etagsPartItem) {
    this.etagsPart.add(etagsPartItem);
    return this;
  }

   /**
   * Part number.
   * @return etagsPart
  **/
  @Schema(required = true, description = "Part number.")
  public List<Integer> getEtagsPart() {
    return etagsPart;
  }

  public void setEtagsPart(List<Integer> etagsPart) {
    this.etagsPart = etagsPart;
  }

  public FilesPathBody length(Integer length) {
    this.length = length;
    return this;
  }

   /**
   * Length of file.
   * @return length
  **/
  @Schema(description = "Length of file.")
  public Integer getLength() {
    return length;
  }

  public void setLength(Integer length) {
    this.length = length;
  }

  public FilesPathBody mkdirParents(Boolean mkdirParents) {
    this.mkdirParents = mkdirParents;
    return this;
  }

   /**
   * Create parent directories if they do not exist?
   * @return mkdirParents
  **/
  @Schema(description = "Create parent directories if they do not exist?")
  public Boolean isMkdirParents() {
    return mkdirParents;
  }

  public void setMkdirParents(Boolean mkdirParents) {
    this.mkdirParents = mkdirParents;
  }

  public FilesPathBody part(Integer part) {
    this.part = part;
    return this;
  }

   /**
   * Part if uploading a part.
   * @return part
  **/
  @Schema(description = "Part if uploading a part.")
  public Integer getPart() {
    return part;
  }

  public void setPart(Integer part) {
    this.part = part;
  }

  public FilesPathBody parts(Integer parts) {
    this.parts = parts;
    return this;
  }

   /**
   * How many parts to fetch?
   * @return parts
  **/
  @Schema(description = "How many parts to fetch?")
  public Integer getParts() {
    return parts;
  }

  public void setParts(Integer parts) {
    this.parts = parts;
  }

  public FilesPathBody providedMtime(DateTime providedMtime) {
    this.providedMtime = providedMtime;
    return this;
  }

   /**
   * User provided modification time.
   * @return providedMtime
  **/
  @Schema(description = "User provided modification time.")
  public DateTime getProvidedMtime() {
    return providedMtime;
  }

  public void setProvidedMtime(DateTime providedMtime) {
    this.providedMtime = providedMtime;
  }

  public FilesPathBody ref(String ref) {
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @Schema(description = "")
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }

  public FilesPathBody restart(Integer restart) {
    this.restart = restart;
    return this;
  }

   /**
   * File byte offset to restart from.
   * @return restart
  **/
  @Schema(description = "File byte offset to restart from.")
  public Integer getRestart() {
    return restart;
  }

  public void setRestart(Integer restart) {
    this.restart = restart;
  }

  public FilesPathBody size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * Size of file.
   * @return size
  **/
  @Schema(description = "Size of file.")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public FilesPathBody structure(String structure) {
    this.structure = structure;
    return this;
  }

   /**
   * If copying folder, copy just the structure?
   * @return structure
  **/
  @Schema(description = "If copying folder, copy just the structure?")
  public String getStructure() {
    return structure;
  }

  public void setStructure(String structure) {
    this.structure = structure;
  }

  public FilesPathBody withRename(Boolean withRename) {
    this.withRename = withRename;
    return this;
  }

   /**
   * Allow file rename instead of overwrite?
   * @return withRename
  **/
  @Schema(description = "Allow file rename instead of overwrite?")
  public Boolean isWithRename() {
    return withRename;
  }

  public void setWithRename(Boolean withRename) {
    this.withRename = withRename;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesPathBody filesPathBody = (FilesPathBody) o;
    return Objects.equals(this.action, filesPathBody.action) &&
        Objects.equals(this.etagsEtag, filesPathBody.etagsEtag) &&
        Objects.equals(this.etagsPart, filesPathBody.etagsPart) &&
        Objects.equals(this.length, filesPathBody.length) &&
        Objects.equals(this.mkdirParents, filesPathBody.mkdirParents) &&
        Objects.equals(this.part, filesPathBody.part) &&
        Objects.equals(this.parts, filesPathBody.parts) &&
        Objects.equals(this.providedMtime, filesPathBody.providedMtime) &&
        Objects.equals(this.ref, filesPathBody.ref) &&
        Objects.equals(this.restart, filesPathBody.restart) &&
        Objects.equals(this.size, filesPathBody.size) &&
        Objects.equals(this.structure, filesPathBody.structure) &&
        Objects.equals(this.withRename, filesPathBody.withRename);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, etagsEtag, etagsPart, length, mkdirParents, part, parts, providedMtime, ref, restart, size, structure, withRename);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesPathBody {\n");
    
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    etagsEtag: ").append(toIndentedString(etagsEtag)).append("\n");
    sb.append("    etagsPart: ").append(toIndentedString(etagsPart)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    mkdirParents: ").append(toIndentedString(mkdirParents)).append("\n");
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    providedMtime: ").append(toIndentedString(providedMtime)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    restart: ").append(toIndentedString(restart)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
    sb.append("    withRename: ").append(toIndentedString(withRename)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
