/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Create User
 */
@Schema(description = "Create User")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-23T20:47:00.742522+02:00[Europe/Paris]")
public class UserEntity {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("admin_group_ids")
  private List<Integer> adminGroupIds = null;

  @JsonProperty("allowed_ips")
  private String allowedIps = null;

  @JsonProperty("attachments_permission")
  private Boolean attachmentsPermission = null;

  @JsonProperty("api_keys_count")
  private Integer apiKeysCount = null;

  @JsonProperty("authenticate_until")
  private DateTime authenticateUntil = null;

  /**
   * How is this user authenticated?
   */
  public enum AuthenticationMethodEnum {
    PASSWORD("password"),
    UNUSED_FORMER_LDAP("unused_former_ldap"),
    SSO("sso"),
    NONE("none"),
    EMAIL_SIGNUP("email_signup");

    private String value;

    AuthenticationMethodEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static AuthenticationMethodEnum fromValue(String text) {
      for (AuthenticationMethodEnum b : AuthenticationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("authentication_method")
  private AuthenticationMethodEnum authenticationMethod = null;

  @JsonProperty("avatar_url")
  private String avatarUrl = null;

  @JsonProperty("billing_permission")
  private Boolean billingPermission = null;

  @JsonProperty("bypass_site_allowed_ips")
  private Boolean bypassSiteAllowedIps = null;

  @JsonProperty("bypass_inactive_disable")
  private Boolean bypassInactiveDisable = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("dav_permission")
  private Boolean davPermission = null;

  @JsonProperty("disabled")
  private Boolean disabled = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("ftp_permission")
  private Boolean ftpPermission = null;

  @JsonProperty("group_ids")
  private String groupIds = null;

  @JsonProperty("header_text")
  private String headerText = null;

  @JsonProperty("language")
  private String language = null;

  @JsonProperty("last_login_at")
  private DateTime lastLoginAt = null;

  @JsonProperty("last_protocol_cipher")
  private String lastProtocolCipher = null;

  @JsonProperty("lockout_expires")
  private DateTime lockoutExpires = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("company")
  private String company = null;

  @JsonProperty("notes")
  private String notes = null;

  @JsonProperty("notification_daily_send_time")
  private Integer notificationDailySendTime = null;

  @JsonProperty("office_integration_enabled")
  private Boolean officeIntegrationEnabled = null;

  @JsonProperty("password_set_at")
  private DateTime passwordSetAt = null;

  @JsonProperty("password_validity_days")
  private Integer passwordValidityDays = null;

  @JsonProperty("public_keys_count")
  private Integer publicKeysCount = null;

  @JsonProperty("receive_admin_alerts")
  private Boolean receiveAdminAlerts = null;

  /**
   * 2FA required setting
   */
  public enum Require2faEnum {
    USE_SYSTEM_SETTING("use_system_setting"),
    ALWAYS_REQUIRE("always_require"),
    NEVER_REQUIRE("never_require");

    private String value;

    Require2faEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static Require2faEnum fromValue(String text) {
      for (Require2faEnum b : Require2faEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("require_2fa")
  private Require2faEnum require2fa = null;

  @JsonProperty("active_2fa")
  private Boolean active2fa = null;

  @JsonProperty("require_password_change")
  private Boolean requirePasswordChange = null;

  @JsonProperty("restapi_permission")
  private Boolean restapiPermission = null;

  @JsonProperty("self_managed")
  private Boolean selfManaged = null;

  @JsonProperty("sftp_permission")
  private Boolean sftpPermission = null;

  @JsonProperty("site_admin")
  private Boolean siteAdmin = null;

  @JsonProperty("skip_welcome_screen")
  private Boolean skipWelcomeScreen = null;

  /**
   * SSL required setting
   */
  public enum SslRequiredEnum {
    USE_SYSTEM_SETTING("use_system_setting"),
    ALWAYS_REQUIRE("always_require"),
    NEVER_REQUIRE("never_require");

    private String value;

    SslRequiredEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SslRequiredEnum fromValue(String text) {
      for (SslRequiredEnum b : SslRequiredEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("ssl_required")
  private SslRequiredEnum sslRequired = null;

  @JsonProperty("sso_strategy_id")
  private Integer ssoStrategyId = null;

  @JsonProperty("subscribe_to_newsletter")
  private Boolean subscribeToNewsletter = null;

  @JsonProperty("externally_managed")
  private Boolean externallyManaged = null;

  @JsonProperty("time_zone")
  private String timeZone = null;

  @JsonProperty("type_of_2fa")
  private String typeOf2fa = "yubi";

  @JsonProperty("user_root")
  private String userRoot = null;

  public UserEntity id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * User ID
   * @return id
  **/
  @Schema(example = "1", description = "User ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public UserEntity username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User&#x27;s username
   * @return username
  **/
  @Schema(example = "user", description = "User's username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public UserEntity adminGroupIds(List<Integer> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
    return this;
  }

  public UserEntity addAdminGroupIdsItem(Integer adminGroupIdsItem) {
    if (this.adminGroupIds == null) {
      this.adminGroupIds = new ArrayList<>();
    }
    this.adminGroupIds.add(adminGroupIdsItem);
    return this;
  }

   /**
   * List of group IDs of which this user is an administrator
   * @return adminGroupIds
  **/
  @Schema(example = "[1]", description = "List of group IDs of which this user is an administrator")
  public List<Integer> getAdminGroupIds() {
    return adminGroupIds;
  }

  public void setAdminGroupIds(List<Integer> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
  }

  public UserEntity allowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

   /**
   * A list of allowed IPs if applicable.  Newline delimited
   * @return allowedIps
  **/
  @Schema(example = "127.0.0.1", description = "A list of allowed IPs if applicable.  Newline delimited")
  public String getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
  }

  public UserEntity attachmentsPermission(Boolean attachmentsPermission) {
    this.attachmentsPermission = attachmentsPermission;
    return this;
  }

   /**
   * DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.
   * @return attachmentsPermission
  **/
  @Schema(example = "true", description = "DEPRECATED: Can the user create Bundles (aka Share Links)? Use the bundle permission instead.")
  public Boolean isAttachmentsPermission() {
    return attachmentsPermission;
  }

  public void setAttachmentsPermission(Boolean attachmentsPermission) {
    this.attachmentsPermission = attachmentsPermission;
  }

  public UserEntity apiKeysCount(Integer apiKeysCount) {
    this.apiKeysCount = apiKeysCount;
    return this;
  }

   /**
   * Number of api keys associated with this user
   * @return apiKeysCount
  **/
  @Schema(example = "1", description = "Number of api keys associated with this user")
  public Integer getApiKeysCount() {
    return apiKeysCount;
  }

  public void setApiKeysCount(Integer apiKeysCount) {
    this.apiKeysCount = apiKeysCount;
  }

  public UserEntity authenticateUntil(DateTime authenticateUntil) {
    this.authenticateUntil = authenticateUntil;
    return this;
  }

   /**
   * Scheduled Date/Time at which user will be deactivated
   * @return authenticateUntil
  **/
  @Schema(description = "Scheduled Date/Time at which user will be deactivated")
  public DateTime getAuthenticateUntil() {
    return authenticateUntil;
  }

  public void setAuthenticateUntil(DateTime authenticateUntil) {
    this.authenticateUntil = authenticateUntil;
  }

  public UserEntity authenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

   /**
   * How is this user authenticated?
   * @return authenticationMethod
  **/
  @Schema(example = "password", description = "How is this user authenticated?")
  public AuthenticationMethodEnum getAuthenticationMethod() {
    return authenticationMethod;
  }

  public void setAuthenticationMethod(AuthenticationMethodEnum authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }

  public UserEntity avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * URL holding the user&#x27;s avatar
   * @return avatarUrl
  **/
  @Schema(description = "URL holding the user's avatar")
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }

  public UserEntity billingPermission(Boolean billingPermission) {
    this.billingPermission = billingPermission;
    return this;
  }

   /**
   * Allow this user to perform operations on the account, payments, and invoices?
   * @return billingPermission
  **/
  @Schema(description = "Allow this user to perform operations on the account, payments, and invoices?")
  public Boolean isBillingPermission() {
    return billingPermission;
  }

  public void setBillingPermission(Boolean billingPermission) {
    this.billingPermission = billingPermission;
  }

  public UserEntity bypassSiteAllowedIps(Boolean bypassSiteAllowedIps) {
    this.bypassSiteAllowedIps = bypassSiteAllowedIps;
    return this;
  }

   /**
   * Allow this user to skip site-wide IP blacklists?
   * @return bypassSiteAllowedIps
  **/
  @Schema(description = "Allow this user to skip site-wide IP blacklists?")
  public Boolean isBypassSiteAllowedIps() {
    return bypassSiteAllowedIps;
  }

  public void setBypassSiteAllowedIps(Boolean bypassSiteAllowedIps) {
    this.bypassSiteAllowedIps = bypassSiteAllowedIps;
  }

  public UserEntity bypassInactiveDisable(Boolean bypassInactiveDisable) {
    this.bypassInactiveDisable = bypassInactiveDisable;
    return this;
  }

   /**
   * Exempt this user from being disabled based on inactivity?
   * @return bypassInactiveDisable
  **/
  @Schema(description = "Exempt this user from being disabled based on inactivity?")
  public Boolean isBypassInactiveDisable() {
    return bypassInactiveDisable;
  }

  public void setBypassInactiveDisable(Boolean bypassInactiveDisable) {
    this.bypassInactiveDisable = bypassInactiveDisable;
  }

  public UserEntity createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When this user was created
   * @return createdAt
  **/
  @Schema(description = "When this user was created")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public UserEntity davPermission(Boolean davPermission) {
    this.davPermission = davPermission;
    return this;
  }

   /**
   * Can the user connect with WebDAV?
   * @return davPermission
  **/
  @Schema(example = "true", description = "Can the user connect with WebDAV?")
  public Boolean isDavPermission() {
    return davPermission;
  }

  public void setDavPermission(Boolean davPermission) {
    this.davPermission = davPermission;
  }

  public UserEntity disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

   /**
   * Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.
   * @return disabled
  **/
  @Schema(example = "true", description = "Is user disabled? Disabled users cannot log in, and do not count for billing purposes.  Users can be automatically disabled after an inactivity period via a Site setting.")
  public Boolean isDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public UserEntity email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User email address
   * @return email
  **/
  @Schema(example = "john.doe@files.com", description = "User email address")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserEntity ftpPermission(Boolean ftpPermission) {
    this.ftpPermission = ftpPermission;
    return this;
  }

   /**
   * Can the user access with FTP/FTPS?
   * @return ftpPermission
  **/
  @Schema(example = "true", description = "Can the user access with FTP/FTPS?")
  public Boolean isFtpPermission() {
    return ftpPermission;
  }

  public void setFtpPermission(Boolean ftpPermission) {
    this.ftpPermission = ftpPermission;
  }

  public UserEntity groupIds(String groupIds) {
    this.groupIds = groupIds;
    return this;
  }

   /**
   * Comma-separated list of group IDs of which this user is a member
   * @return groupIds
  **/
  @Schema(description = "Comma-separated list of group IDs of which this user is a member")
  public String getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(String groupIds) {
    this.groupIds = groupIds;
  }

  public UserEntity headerText(String headerText) {
    this.headerText = headerText;
    return this;
  }

   /**
   * Text to display to the user in the header of the UI
   * @return headerText
  **/
  @Schema(example = "User-specific message.", description = "Text to display to the user in the header of the UI")
  public String getHeaderText() {
    return headerText;
  }

  public void setHeaderText(String headerText) {
    this.headerText = headerText;
  }

  public UserEntity language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Preferred language
   * @return language
  **/
  @Schema(example = "en", description = "Preferred language")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public UserEntity lastLoginAt(DateTime lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
    return this;
  }

   /**
   * User&#x27;s last login time
   * @return lastLoginAt
  **/
  @Schema(description = "User's last login time")
  public DateTime getLastLoginAt() {
    return lastLoginAt;
  }

  public void setLastLoginAt(DateTime lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
  }

  public UserEntity lastProtocolCipher(String lastProtocolCipher) {
    this.lastProtocolCipher = lastProtocolCipher;
    return this;
  }

   /**
   * The last protocol and cipher used
   * @return lastProtocolCipher
  **/
  @Schema(description = "The last protocol and cipher used")
  public String getLastProtocolCipher() {
    return lastProtocolCipher;
  }

  public void setLastProtocolCipher(String lastProtocolCipher) {
    this.lastProtocolCipher = lastProtocolCipher;
  }

  public UserEntity lockoutExpires(DateTime lockoutExpires) {
    this.lockoutExpires = lockoutExpires;
    return this;
  }

   /**
   * Time in the future that the user will no longer be locked out if applicable
   * @return lockoutExpires
  **/
  @Schema(description = "Time in the future that the user will no longer be locked out if applicable")
  public DateTime getLockoutExpires() {
    return lockoutExpires;
  }

  public void setLockoutExpires(DateTime lockoutExpires) {
    this.lockoutExpires = lockoutExpires;
  }

  public UserEntity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User&#x27;s full name
   * @return name
  **/
  @Schema(example = "John Doe", description = "User's full name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UserEntity company(String company) {
    this.company = company;
    return this;
  }

   /**
   * User&#x27;s company
   * @return company
  **/
  @Schema(example = "ACME Corp.", description = "User's company")
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }

  public UserEntity notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Any internal notes on the user
   * @return notes
  **/
  @Schema(example = "Internal notes on this user.", description = "Any internal notes on the user")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public UserEntity notificationDailySendTime(Integer notificationDailySendTime) {
    this.notificationDailySendTime = notificationDailySendTime;
    return this;
  }

   /**
   * Hour of the day at which daily notifications should be sent. Can be in range 0 to 23
   * @return notificationDailySendTime
  **/
  @Schema(example = "18", description = "Hour of the day at which daily notifications should be sent. Can be in range 0 to 23")
  public Integer getNotificationDailySendTime() {
    return notificationDailySendTime;
  }

  public void setNotificationDailySendTime(Integer notificationDailySendTime) {
    this.notificationDailySendTime = notificationDailySendTime;
  }

  public UserEntity officeIntegrationEnabled(Boolean officeIntegrationEnabled) {
    this.officeIntegrationEnabled = officeIntegrationEnabled;
    return this;
  }

   /**
   * Enable integration with Office for the web?
   * @return officeIntegrationEnabled
  **/
  @Schema(example = "true", description = "Enable integration with Office for the web?")
  public Boolean isOfficeIntegrationEnabled() {
    return officeIntegrationEnabled;
  }

  public void setOfficeIntegrationEnabled(Boolean officeIntegrationEnabled) {
    this.officeIntegrationEnabled = officeIntegrationEnabled;
  }

  public UserEntity passwordSetAt(DateTime passwordSetAt) {
    this.passwordSetAt = passwordSetAt;
    return this;
  }

   /**
   * Last time the user&#x27;s password was set
   * @return passwordSetAt
  **/
  @Schema(description = "Last time the user's password was set")
  public DateTime getPasswordSetAt() {
    return passwordSetAt;
  }

  public void setPasswordSetAt(DateTime passwordSetAt) {
    this.passwordSetAt = passwordSetAt;
  }

  public UserEntity passwordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
    return this;
  }

   /**
   * Number of days to allow user to use the same password
   * @return passwordValidityDays
  **/
  @Schema(example = "1", description = "Number of days to allow user to use the same password")
  public Integer getPasswordValidityDays() {
    return passwordValidityDays;
  }

  public void setPasswordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
  }

  public UserEntity publicKeysCount(Integer publicKeysCount) {
    this.publicKeysCount = publicKeysCount;
    return this;
  }

   /**
   * Number of public keys associated with this user
   * @return publicKeysCount
  **/
  @Schema(example = "1", description = "Number of public keys associated with this user")
  public Integer getPublicKeysCount() {
    return publicKeysCount;
  }

  public void setPublicKeysCount(Integer publicKeysCount) {
    this.publicKeysCount = publicKeysCount;
  }

  public UserEntity receiveAdminAlerts(Boolean receiveAdminAlerts) {
    this.receiveAdminAlerts = receiveAdminAlerts;
    return this;
  }

   /**
   * Should the user receive admin alerts such a certificate expiration notifications and overages?
   * @return receiveAdminAlerts
  **/
  @Schema(example = "true", description = "Should the user receive admin alerts such a certificate expiration notifications and overages?")
  public Boolean isReceiveAdminAlerts() {
    return receiveAdminAlerts;
  }

  public void setReceiveAdminAlerts(Boolean receiveAdminAlerts) {
    this.receiveAdminAlerts = receiveAdminAlerts;
  }

  public UserEntity require2fa(Require2faEnum require2fa) {
    this.require2fa = require2fa;
    return this;
  }

   /**
   * 2FA required setting
   * @return require2fa
  **/
  @Schema(example = "always_require", description = "2FA required setting")
  public Require2faEnum getRequire2fa() {
    return require2fa;
  }

  public void setRequire2fa(Require2faEnum require2fa) {
    this.require2fa = require2fa;
  }

  public UserEntity active2fa(Boolean active2fa) {
    this.active2fa = active2fa;
    return this;
  }

   /**
   * Is 2fa active for the user?
   * @return active2fa
  **/
  @Schema(example = "true", description = "Is 2fa active for the user?")
  public Boolean isActive2fa() {
    return active2fa;
  }

  public void setActive2fa(Boolean active2fa) {
    this.active2fa = active2fa;
  }

  public UserEntity requirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
    return this;
  }

   /**
   * Is a password change required upon next user login?
   * @return requirePasswordChange
  **/
  @Schema(example = "true", description = "Is a password change required upon next user login?")
  public Boolean isRequirePasswordChange() {
    return requirePasswordChange;
  }

  public void setRequirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
  }

  public UserEntity restapiPermission(Boolean restapiPermission) {
    this.restapiPermission = restapiPermission;
    return this;
  }

   /**
   * Can this user access the REST API?
   * @return restapiPermission
  **/
  @Schema(example = "true", description = "Can this user access the REST API?")
  public Boolean isRestapiPermission() {
    return restapiPermission;
  }

  public void setRestapiPermission(Boolean restapiPermission) {
    this.restapiPermission = restapiPermission;
  }

  public UserEntity selfManaged(Boolean selfManaged) {
    this.selfManaged = selfManaged;
    return this;
  }

   /**
   * Does this user manage it&#x27;s own credentials or is it a shared/bot user?
   * @return selfManaged
  **/
  @Schema(example = "true", description = "Does this user manage it's own credentials or is it a shared/bot user?")
  public Boolean isSelfManaged() {
    return selfManaged;
  }

  public void setSelfManaged(Boolean selfManaged) {
    this.selfManaged = selfManaged;
  }

  public UserEntity sftpPermission(Boolean sftpPermission) {
    this.sftpPermission = sftpPermission;
    return this;
  }

   /**
   * Can the user access with SFTP?
   * @return sftpPermission
  **/
  @Schema(example = "true", description = "Can the user access with SFTP?")
  public Boolean isSftpPermission() {
    return sftpPermission;
  }

  public void setSftpPermission(Boolean sftpPermission) {
    this.sftpPermission = sftpPermission;
  }

  public UserEntity siteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
    return this;
  }

   /**
   * Is the user an administrator for this site?
   * @return siteAdmin
  **/
  @Schema(example = "true", description = "Is the user an administrator for this site?")
  public Boolean isSiteAdmin() {
    return siteAdmin;
  }

  public void setSiteAdmin(Boolean siteAdmin) {
    this.siteAdmin = siteAdmin;
  }

  public UserEntity skipWelcomeScreen(Boolean skipWelcomeScreen) {
    this.skipWelcomeScreen = skipWelcomeScreen;
    return this;
  }

   /**
   * Skip Welcome page in the UI?
   * @return skipWelcomeScreen
  **/
  @Schema(example = "true", description = "Skip Welcome page in the UI?")
  public Boolean isSkipWelcomeScreen() {
    return skipWelcomeScreen;
  }

  public void setSkipWelcomeScreen(Boolean skipWelcomeScreen) {
    this.skipWelcomeScreen = skipWelcomeScreen;
  }

  public UserEntity sslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

   /**
   * SSL required setting
   * @return sslRequired
  **/
  @Schema(example = "always_require", description = "SSL required setting")
  public SslRequiredEnum getSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(SslRequiredEnum sslRequired) {
    this.sslRequired = sslRequired;
  }

  public UserEntity ssoStrategyId(Integer ssoStrategyId) {
    this.ssoStrategyId = ssoStrategyId;
    return this;
  }

   /**
   * SSO (Single Sign On) strategy ID for the user, if applicable.
   * @return ssoStrategyId
  **/
  @Schema(example = "1", description = "SSO (Single Sign On) strategy ID for the user, if applicable.")
  public Integer getSsoStrategyId() {
    return ssoStrategyId;
  }

  public void setSsoStrategyId(Integer ssoStrategyId) {
    this.ssoStrategyId = ssoStrategyId;
  }

  public UserEntity subscribeToNewsletter(Boolean subscribeToNewsletter) {
    this.subscribeToNewsletter = subscribeToNewsletter;
    return this;
  }

   /**
   * Is the user subscribed to the newsletter?
   * @return subscribeToNewsletter
  **/
  @Schema(example = "true", description = "Is the user subscribed to the newsletter?")
  public Boolean isSubscribeToNewsletter() {
    return subscribeToNewsletter;
  }

  public void setSubscribeToNewsletter(Boolean subscribeToNewsletter) {
    this.subscribeToNewsletter = subscribeToNewsletter;
  }

  public UserEntity externallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
    return this;
  }

   /**
   * Is this user managed by a SsoStrategy?
   * @return externallyManaged
  **/
  @Schema(example = "true", description = "Is this user managed by a SsoStrategy?")
  public Boolean isExternallyManaged() {
    return externallyManaged;
  }

  public void setExternallyManaged(Boolean externallyManaged) {
    this.externallyManaged = externallyManaged;
  }

  public UserEntity timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * User time zone
   * @return timeZone
  **/
  @Schema(example = "Pacific Time (US & Canada)", description = "User time zone")
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }

  public UserEntity typeOf2fa(String typeOf2fa) {
    this.typeOf2fa = typeOf2fa;
    return this;
  }

   /**
   * Type(s) of 2FA methods in use.  Will be either &#x60;sms&#x60;, &#x60;totp&#x60;, &#x60;u2f&#x60;, &#x60;yubi&#x60;, or multiple values sorted alphabetically and joined by an underscore.
   * @return typeOf2fa
  **/
  @Schema(description = "Type(s) of 2FA methods in use.  Will be either `sms`, `totp`, `u2f`, `yubi`, or multiple values sorted alphabetically and joined by an underscore.")
  public String getTypeOf2fa() {
    return typeOf2fa;
  }

  public void setTypeOf2fa(String typeOf2fa) {
    this.typeOf2fa = typeOf2fa;
  }

  public UserEntity userRoot(String userRoot) {
    this.userRoot = userRoot;
    return this;
  }

   /**
   * Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.
   * @return userRoot
  **/
  @Schema(description = "Root folder for FTP (and optionally SFTP if the appropriate site-wide setting is set.)  Note that this is not used for API, Desktop, or Web interface.")
  public String getUserRoot() {
    return userRoot;
  }

  public void setUserRoot(String userRoot) {
    this.userRoot = userRoot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserEntity userEntity = (UserEntity) o;
    return Objects.equals(this.id, userEntity.id) &&
        Objects.equals(this.username, userEntity.username) &&
        Objects.equals(this.adminGroupIds, userEntity.adminGroupIds) &&
        Objects.equals(this.allowedIps, userEntity.allowedIps) &&
        Objects.equals(this.attachmentsPermission, userEntity.attachmentsPermission) &&
        Objects.equals(this.apiKeysCount, userEntity.apiKeysCount) &&
        Objects.equals(this.authenticateUntil, userEntity.authenticateUntil) &&
        Objects.equals(this.authenticationMethod, userEntity.authenticationMethod) &&
        Objects.equals(this.avatarUrl, userEntity.avatarUrl) &&
        Objects.equals(this.billingPermission, userEntity.billingPermission) &&
        Objects.equals(this.bypassSiteAllowedIps, userEntity.bypassSiteAllowedIps) &&
        Objects.equals(this.bypassInactiveDisable, userEntity.bypassInactiveDisable) &&
        Objects.equals(this.createdAt, userEntity.createdAt) &&
        Objects.equals(this.davPermission, userEntity.davPermission) &&
        Objects.equals(this.disabled, userEntity.disabled) &&
        Objects.equals(this.email, userEntity.email) &&
        Objects.equals(this.ftpPermission, userEntity.ftpPermission) &&
        Objects.equals(this.groupIds, userEntity.groupIds) &&
        Objects.equals(this.headerText, userEntity.headerText) &&
        Objects.equals(this.language, userEntity.language) &&
        Objects.equals(this.lastLoginAt, userEntity.lastLoginAt) &&
        Objects.equals(this.lastProtocolCipher, userEntity.lastProtocolCipher) &&
        Objects.equals(this.lockoutExpires, userEntity.lockoutExpires) &&
        Objects.equals(this.name, userEntity.name) &&
        Objects.equals(this.company, userEntity.company) &&
        Objects.equals(this.notes, userEntity.notes) &&
        Objects.equals(this.notificationDailySendTime, userEntity.notificationDailySendTime) &&
        Objects.equals(this.officeIntegrationEnabled, userEntity.officeIntegrationEnabled) &&
        Objects.equals(this.passwordSetAt, userEntity.passwordSetAt) &&
        Objects.equals(this.passwordValidityDays, userEntity.passwordValidityDays) &&
        Objects.equals(this.publicKeysCount, userEntity.publicKeysCount) &&
        Objects.equals(this.receiveAdminAlerts, userEntity.receiveAdminAlerts) &&
        Objects.equals(this.require2fa, userEntity.require2fa) &&
        Objects.equals(this.active2fa, userEntity.active2fa) &&
        Objects.equals(this.requirePasswordChange, userEntity.requirePasswordChange) &&
        Objects.equals(this.restapiPermission, userEntity.restapiPermission) &&
        Objects.equals(this.selfManaged, userEntity.selfManaged) &&
        Objects.equals(this.sftpPermission, userEntity.sftpPermission) &&
        Objects.equals(this.siteAdmin, userEntity.siteAdmin) &&
        Objects.equals(this.skipWelcomeScreen, userEntity.skipWelcomeScreen) &&
        Objects.equals(this.sslRequired, userEntity.sslRequired) &&
        Objects.equals(this.ssoStrategyId, userEntity.ssoStrategyId) &&
        Objects.equals(this.subscribeToNewsletter, userEntity.subscribeToNewsletter) &&
        Objects.equals(this.externallyManaged, userEntity.externallyManaged) &&
        Objects.equals(this.timeZone, userEntity.timeZone) &&
        Objects.equals(this.typeOf2fa, userEntity.typeOf2fa) &&
        Objects.equals(this.userRoot, userEntity.userRoot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, username, adminGroupIds, allowedIps, attachmentsPermission, apiKeysCount, authenticateUntil, authenticationMethod, avatarUrl, billingPermission, bypassSiteAllowedIps, bypassInactiveDisable, createdAt, davPermission, disabled, email, ftpPermission, groupIds, headerText, language, lastLoginAt, lastProtocolCipher, lockoutExpires, name, company, notes, notificationDailySendTime, officeIntegrationEnabled, passwordSetAt, passwordValidityDays, publicKeysCount, receiveAdminAlerts, require2fa, active2fa, requirePasswordChange, restapiPermission, selfManaged, sftpPermission, siteAdmin, skipWelcomeScreen, sslRequired, ssoStrategyId, subscribeToNewsletter, externallyManaged, timeZone, typeOf2fa, userRoot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    adminGroupIds: ").append(toIndentedString(adminGroupIds)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    attachmentsPermission: ").append(toIndentedString(attachmentsPermission)).append("\n");
    sb.append("    apiKeysCount: ").append(toIndentedString(apiKeysCount)).append("\n");
    sb.append("    authenticateUntil: ").append(toIndentedString(authenticateUntil)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    billingPermission: ").append(toIndentedString(billingPermission)).append("\n");
    sb.append("    bypassSiteAllowedIps: ").append(toIndentedString(bypassSiteAllowedIps)).append("\n");
    sb.append("    bypassInactiveDisable: ").append(toIndentedString(bypassInactiveDisable)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    davPermission: ").append(toIndentedString(davPermission)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    ftpPermission: ").append(toIndentedString(ftpPermission)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    headerText: ").append(toIndentedString(headerText)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastLoginAt: ").append(toIndentedString(lastLoginAt)).append("\n");
    sb.append("    lastProtocolCipher: ").append(toIndentedString(lastProtocolCipher)).append("\n");
    sb.append("    lockoutExpires: ").append(toIndentedString(lockoutExpires)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    notificationDailySendTime: ").append(toIndentedString(notificationDailySendTime)).append("\n");
    sb.append("    officeIntegrationEnabled: ").append(toIndentedString(officeIntegrationEnabled)).append("\n");
    sb.append("    passwordSetAt: ").append(toIndentedString(passwordSetAt)).append("\n");
    sb.append("    passwordValidityDays: ").append(toIndentedString(passwordValidityDays)).append("\n");
    sb.append("    publicKeysCount: ").append(toIndentedString(publicKeysCount)).append("\n");
    sb.append("    receiveAdminAlerts: ").append(toIndentedString(receiveAdminAlerts)).append("\n");
    sb.append("    require2fa: ").append(toIndentedString(require2fa)).append("\n");
    sb.append("    active2fa: ").append(toIndentedString(active2fa)).append("\n");
    sb.append("    requirePasswordChange: ").append(toIndentedString(requirePasswordChange)).append("\n");
    sb.append("    restapiPermission: ").append(toIndentedString(restapiPermission)).append("\n");
    sb.append("    selfManaged: ").append(toIndentedString(selfManaged)).append("\n");
    sb.append("    sftpPermission: ").append(toIndentedString(sftpPermission)).append("\n");
    sb.append("    siteAdmin: ").append(toIndentedString(siteAdmin)).append("\n");
    sb.append("    skipWelcomeScreen: ").append(toIndentedString(skipWelcomeScreen)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    ssoStrategyId: ").append(toIndentedString(ssoStrategyId)).append("\n");
    sb.append("    subscribeToNewsletter: ").append(toIndentedString(subscribeToNewsletter)).append("\n");
    sb.append("    externallyManaged: ").append(toIndentedString(externallyManaged)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    typeOf2fa: ").append(toIndentedString(typeOf2fa)).append("\n");
    sb.append("    userRoot: ").append(toIndentedString(userRoot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
