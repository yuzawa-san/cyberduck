/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * IdShareBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-25T22:25:43.390877+02:00[Europe/Paris]")
public class IdShareBody {
  @JsonProperty("to")
  private List<String> to = null;

  @JsonProperty("note")
  private String note = null;

  @JsonProperty("recipients")
  private List<Object> recipients = null;

  public IdShareBody to(List<String> to) {
    this.to = to;
    return this;
  }

  public IdShareBody addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * A list of email addresses to share this bundle with. Required unless &#x60;recipients&#x60; is used.
   * @return to
  **/
  @Schema(example = "[\"johndoe@gmail.com\"]", description = "A list of email addresses to share this bundle with. Required unless `recipients` is used.")
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }

  public IdShareBody note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Note to include in email.
   * @return note
  **/
  @Schema(example = "Just a note.", description = "Note to include in email.")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public IdShareBody recipients(List<Object> recipients) {
    this.recipients = recipients;
    return this;
  }

  public IdShareBody addRecipientsItem(Object recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * A list of recipients to share this bundle with. Required unless &#x60;to&#x60; is used.
   * @return recipients
  **/
  @Schema(example = "[{\"name\":\"John Doe\",\"company\":\"Acme Ltd\",\"recipient\":\"johndoe@gmail.com\"}]", description = "A list of recipients to share this bundle with. Required unless `to` is used.")
  public List<Object> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Object> recipients) {
    this.recipients = recipients;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdShareBody idShareBody = (IdShareBody) o;
    return Objects.equals(this.to, idShareBody.to) &&
        Objects.equals(this.note, idShareBody.note) &&
        Objects.equals(this.recipients, idShareBody.recipients);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, note, recipients);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdShareBody {\n");
    
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
