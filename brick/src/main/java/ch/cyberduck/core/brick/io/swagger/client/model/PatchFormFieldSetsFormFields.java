/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * PatchFormFieldSetsFormFields
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-25T22:25:43.390877+02:00[Europe/Paris]")
public class PatchFormFieldSetsFormFields {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("label")
  private String label = null;

  @JsonProperty("field_type")
  private String fieldType = null;

  @JsonProperty("help_text")
  private String helpText = null;

  @JsonProperty("required")
  private Boolean required = null;

  @JsonProperty("options_for_select")
  private String optionsForSelect = null;

  @JsonProperty("default_option")
  private String defaultOption = null;

  public PatchFormFieldSetsFormFields id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Id of existing Form Field
   * @return id
  **/
  @Schema(description = "Id of existing Form Field")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PatchFormFieldSetsFormFields label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of Field
   * @return label
  **/
  @Schema(description = "Label of Field")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public PatchFormFieldSetsFormFields fieldType(String fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Type of field: text, text_area, dropdown, or radio
   * @return fieldType
  **/
  @Schema(description = "Type of field: text, text_area, dropdown, or radio")
  public String getFieldType() {
    return fieldType;
  }

  public void setFieldType(String fieldType) {
    this.fieldType = fieldType;
  }

  public PatchFormFieldSetsFormFields helpText(String helpText) {
    this.helpText = helpText;
    return this;
  }

   /**
   * Help text of field
   * @return helpText
  **/
  @Schema(description = "Help text of field")
  public String getHelpText() {
    return helpText;
  }

  public void setHelpText(String helpText) {
    this.helpText = helpText;
  }

  public PatchFormFieldSetsFormFields required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Is this a required field? (default true)
   * @return required
  **/
  @Schema(description = "Is this a required field? (default true)")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public PatchFormFieldSetsFormFields optionsForSelect(String optionsForSelect) {
    this.optionsForSelect = optionsForSelect;
    return this;
  }

   /**
   * List of options for dropdown or radio
   * @return optionsForSelect
  **/
  @Schema(description = "List of options for dropdown or radio")
  public String getOptionsForSelect() {
    return optionsForSelect;
  }

  public void setOptionsForSelect(String optionsForSelect) {
    this.optionsForSelect = optionsForSelect;
  }

  public PatchFormFieldSetsFormFields defaultOption(String defaultOption) {
    this.defaultOption = defaultOption;
    return this;
  }

   /**
   * Default option to be preselected in the dropdown or radio.
   * @return defaultOption
  **/
  @Schema(description = "Default option to be preselected in the dropdown or radio.")
  public String getDefaultOption() {
    return defaultOption;
  }

  public void setDefaultOption(String defaultOption) {
    this.defaultOption = defaultOption;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchFormFieldSetsFormFields patchFormFieldSetsFormFields = (PatchFormFieldSetsFormFields) o;
    return Objects.equals(this.id, patchFormFieldSetsFormFields.id) &&
        Objects.equals(this.label, patchFormFieldSetsFormFields.label) &&
        Objects.equals(this.fieldType, patchFormFieldSetsFormFields.fieldType) &&
        Objects.equals(this.helpText, patchFormFieldSetsFormFields.helpText) &&
        Objects.equals(this.required, patchFormFieldSetsFormFields.required) &&
        Objects.equals(this.optionsForSelect, patchFormFieldSetsFormFields.optionsForSelect) &&
        Objects.equals(this.defaultOption, patchFormFieldSetsFormFields.defaultOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, fieldType, helpText, required, optionsForSelect, defaultOption);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchFormFieldSetsFormFields {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    helpText: ").append(toIndentedString(helpText)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    optionsForSelect: ").append(toIndentedString(optionsForSelect)).append("\n");
    sb.append("    defaultOption: ").append(toIndentedString(defaultOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
