/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * List Notifications
 */
@Schema(description = "List Notifications")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-23T20:47:00.742522+02:00[Europe/Paris]")
public class NotificationEntity {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("group_id")
  private Integer groupId = null;

  @JsonProperty("group_name")
  private String groupName = null;

  @JsonProperty("notify_user_actions")
  private Boolean notifyUserActions = null;

  @JsonProperty("notify_on_copy")
  private Boolean notifyOnCopy = null;

  @JsonProperty("recursive")
  private Boolean recursive = null;

  /**
   * The time interval that notifications are aggregated to
   */
  public enum SendIntervalEnum {
    FIVE_MINUTES("five_minutes"),
    FIFTEEN_MINUTES("fifteen_minutes"),
    HOURLY("hourly"),
    DAILY("daily");

    private String value;

    SendIntervalEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static SendIntervalEnum fromValue(String text) {
      for (SendIntervalEnum b : SendIntervalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("send_interval")
  private SendIntervalEnum sendInterval = null;

  @JsonProperty("unsubscribed")
  private Boolean unsubscribed = null;

  /**
   * The reason that the user unsubscribed
   */
  public enum UnsubscribedReasonEnum {
    NONE("none"),
    UNSUBSCRIBE_LINK_CLICKED("unsubscribe_link_clicked"),
    MAIL_BOUNCED("mail_bounced"),
    MAIL_MARKED_AS_SPAM("mail_marked_as_spam");

    private String value;

    UnsubscribedReasonEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static UnsubscribedReasonEnum fromValue(String text) {
      for (UnsubscribedReasonEnum b : UnsubscribedReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("unsubscribed_reason")
  private UnsubscribedReasonEnum unsubscribedReason = null;

  @JsonProperty("user_id")
  private Integer userId = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("suppressed_email")
  private Boolean suppressedEmail = null;

  public NotificationEntity id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Notification ID
   * @return id
  **/
  @Schema(example = "1", description = "Notification ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public NotificationEntity path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Folder path to notify on
   * @return path
  **/
  @Schema(example = "path", description = "Folder path to notify on")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public NotificationEntity groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Notification group id
   * @return groupId
  **/
  @Schema(example = "0", description = "Notification group id")
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public NotificationEntity groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * Group name if applicable
   * @return groupName
  **/
  @Schema(description = "Group name if applicable")
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }

  public NotificationEntity notifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
    return this;
  }

   /**
   * Trigger notification on notification user actions?
   * @return notifyUserActions
  **/
  @Schema(example = "true", description = "Trigger notification on notification user actions?")
  public Boolean isNotifyUserActions() {
    return notifyUserActions;
  }

  public void setNotifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
  }

  public NotificationEntity notifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
    return this;
  }

   /**
   * Triggers notification when moving or copying files to this path
   * @return notifyOnCopy
  **/
  @Schema(example = "true", description = "Triggers notification when moving or copying files to this path")
  public Boolean isNotifyOnCopy() {
    return notifyOnCopy;
  }

  public void setNotifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
  }

  public NotificationEntity recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

   /**
   * Enable notifications for each subfolder in this path
   * @return recursive
  **/
  @Schema(example = "true", description = "Enable notifications for each subfolder in this path")
  public Boolean isRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }

  public NotificationEntity sendInterval(SendIntervalEnum sendInterval) {
    this.sendInterval = sendInterval;
    return this;
  }

   /**
   * The time interval that notifications are aggregated to
   * @return sendInterval
  **/
  @Schema(example = "fifteen_minutes", description = "The time interval that notifications are aggregated to")
  public SendIntervalEnum getSendInterval() {
    return sendInterval;
  }

  public void setSendInterval(SendIntervalEnum sendInterval) {
    this.sendInterval = sendInterval;
  }

  public NotificationEntity unsubscribed(Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

   /**
   * Is the user unsubscribed from this notification?
   * @return unsubscribed
  **/
  @Schema(example = "true", description = "Is the user unsubscribed from this notification?")
  public Boolean isUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(Boolean unsubscribed) {
    this.unsubscribed = unsubscribed;
  }

  public NotificationEntity unsubscribedReason(UnsubscribedReasonEnum unsubscribedReason) {
    this.unsubscribedReason = unsubscribedReason;
    return this;
  }

   /**
   * The reason that the user unsubscribed
   * @return unsubscribedReason
  **/
  @Schema(description = "The reason that the user unsubscribed")
  public UnsubscribedReasonEnum getUnsubscribedReason() {
    return unsubscribedReason;
  }

  public void setUnsubscribedReason(UnsubscribedReasonEnum unsubscribedReason) {
    this.unsubscribedReason = unsubscribedReason;
  }

  public NotificationEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Notification user ID
   * @return userId
  **/
  @Schema(example = "1", description = "Notification user ID")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public NotificationEntity username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Notification username
   * @return username
  **/
  @Schema(example = "User", description = "Notification username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public NotificationEntity suppressedEmail(Boolean suppressedEmail) {
    this.suppressedEmail = suppressedEmail;
    return this;
  }

   /**
   * If true, it means that the recipient at this user&#x27;s email address has manually unsubscribed from all emails, or had their email \&quot;hard bounce\&quot;, which means that we are unable to send mail to this user&#x27;s current email address. Notifications will resume if the user changes their email address.
   * @return suppressedEmail
  **/
  @Schema(example = "false", description = "If true, it means that the recipient at this user's email address has manually unsubscribed from all emails, or had their email \"hard bounce\", which means that we are unable to send mail to this user's current email address. Notifications will resume if the user changes their email address.")
  public Boolean isSuppressedEmail() {
    return suppressedEmail;
  }

  public void setSuppressedEmail(Boolean suppressedEmail) {
    this.suppressedEmail = suppressedEmail;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationEntity notificationEntity = (NotificationEntity) o;
    return Objects.equals(this.id, notificationEntity.id) &&
        Objects.equals(this.path, notificationEntity.path) &&
        Objects.equals(this.groupId, notificationEntity.groupId) &&
        Objects.equals(this.groupName, notificationEntity.groupName) &&
        Objects.equals(this.notifyUserActions, notificationEntity.notifyUserActions) &&
        Objects.equals(this.notifyOnCopy, notificationEntity.notifyOnCopy) &&
        Objects.equals(this.recursive, notificationEntity.recursive) &&
        Objects.equals(this.sendInterval, notificationEntity.sendInterval) &&
        Objects.equals(this.unsubscribed, notificationEntity.unsubscribed) &&
        Objects.equals(this.unsubscribedReason, notificationEntity.unsubscribedReason) &&
        Objects.equals(this.userId, notificationEntity.userId) &&
        Objects.equals(this.username, notificationEntity.username) &&
        Objects.equals(this.suppressedEmail, notificationEntity.suppressedEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, path, groupId, groupName, notifyUserActions, notifyOnCopy, recursive, sendInterval, unsubscribed, unsubscribedReason, userId, username, suppressedEmail);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    notifyUserActions: ").append(toIndentedString(notifyUserActions)).append("\n");
    sb.append("    notifyOnCopy: ").append(toIndentedString(notifyOnCopy)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    sendInterval: ").append(toIndentedString(sendInterval)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    unsubscribedReason: ").append(toIndentedString(unsubscribedReason)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    suppressedEmail: ").append(toIndentedString(suppressedEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
