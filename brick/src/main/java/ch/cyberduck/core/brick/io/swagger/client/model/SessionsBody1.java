/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SessionsBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-12T10:20:43.848213+02:00[Europe/Paris]")
public class SessionsBody1 {
  @JsonProperty("username")
  private String username = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("otp")
  private String otp = null;

  @JsonProperty("partial_session_id")
  private String partialSessionId = null;

  public SessionsBody1 username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username to sign in as
   * @return username
  **/
  @Schema(example = "username", description = "Username to sign in as")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public SessionsBody1 password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for sign in
   * @return password
  **/
  @Schema(example = "password", description = "Password for sign in")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public SessionsBody1 otp(String otp) {
    this.otp = otp;
    return this;
  }

   /**
   * If this user has a 2FA device, provide its OTP or code here.
   * @return otp
  **/
  @Schema(example = "123456", description = "If this user has a 2FA device, provide its OTP or code here.")
  public String getOtp() {
    return otp;
  }

  public void setOtp(String otp) {
    this.otp = otp;
  }

  public SessionsBody1 partialSessionId(String partialSessionId) {
    this.partialSessionId = partialSessionId;
    return this;
  }

   /**
   * Identifier for a partially-completed login
   * @return partialSessionId
  **/
  @Schema(description = "Identifier for a partially-completed login")
  public String getPartialSessionId() {
    return partialSessionId;
  }

  public void setPartialSessionId(String partialSessionId) {
    this.partialSessionId = partialSessionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SessionsBody1 sessionsBody1 = (SessionsBody1) o;
    return Objects.equals(this.username, sessionsBody1.username) &&
        Objects.equals(this.password, sessionsBody1.password) &&
        Objects.equals(this.otp, sessionsBody1.otp) &&
        Objects.equals(this.partialSessionId, sessionsBody1.partialSessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(username, password, otp, partialSessionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SessionsBody1 {\n");
    
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    otp: ").append(toIndentedString(otp)).append("\n");
    sb.append("    partialSessionId: ").append(toIndentedString(partialSessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
