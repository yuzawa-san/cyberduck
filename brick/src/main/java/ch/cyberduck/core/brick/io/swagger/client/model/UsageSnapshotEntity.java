/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * List Usage Snapshots
 */
@Schema(description = "List Usage Snapshots")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-23T20:47:00.742522+02:00[Europe/Paris]")
public class UsageSnapshotEntity {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("start_at")
  private DateTime startAt = null;

  @JsonProperty("end_at")
  private DateTime endAt = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("high_water_user_count")
  private Double highWaterUserCount = null;

  @JsonProperty("current_storage")
  private Double currentStorage = null;

  @JsonProperty("high_water_storage")
  private Double highWaterStorage = null;

  @JsonProperty("total_downloads")
  private Integer totalDownloads = null;

  @JsonProperty("total_uploads")
  private Integer totalUploads = null;

  @JsonProperty("updated_at")
  private DateTime updatedAt = null;

  @JsonProperty("usage_by_top_level_dir")
  private Object usageByTopLevelDir = null;

  @JsonProperty("root_storage")
  private Double rootStorage = null;

  @JsonProperty("deleted_files_counted_in_minimum")
  private Double deletedFilesCountedInMinimum = null;

  @JsonProperty("deleted_files_storage")
  private Double deletedFilesStorage = null;

  public UsageSnapshotEntity id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Site usage ID
   * @return id
  **/
  @Schema(example = "1", description = "Site usage ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public UsageSnapshotEntity startAt(DateTime startAt) {
    this.startAt = startAt;
    return this;
  }

   /**
   * Site usage report start date/time
   * @return startAt
  **/
  @Schema(description = "Site usage report start date/time")
  public DateTime getStartAt() {
    return startAt;
  }

  public void setStartAt(DateTime startAt) {
    this.startAt = startAt;
  }

  public UsageSnapshotEntity endAt(DateTime endAt) {
    this.endAt = endAt;
    return this;
  }

   /**
   * Site usage report end date/time
   * @return endAt
  **/
  @Schema(description = "Site usage report end date/time")
  public DateTime getEndAt() {
    return endAt;
  }

  public void setEndAt(DateTime endAt) {
    this.endAt = endAt;
  }

  public UsageSnapshotEntity createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Site usage report created at date/time
   * @return createdAt
  **/
  @Schema(description = "Site usage report created at date/time")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public UsageSnapshotEntity highWaterUserCount(Double highWaterUserCount) {
    this.highWaterUserCount = highWaterUserCount;
    return this;
  }

   /**
   * Site usage report highest usage in time period
   * @return highWaterUserCount
  **/
  @Schema(example = "1", description = "Site usage report highest usage in time period")
  public Double getHighWaterUserCount() {
    return highWaterUserCount;
  }

  public void setHighWaterUserCount(Double highWaterUserCount) {
    this.highWaterUserCount = highWaterUserCount;
  }

  public UsageSnapshotEntity currentStorage(Double currentStorage) {
    this.currentStorage = currentStorage;
    return this;
  }

   /**
   * Current site usage as of report
   * @return currentStorage
  **/
  @Schema(example = "1", description = "Current site usage as of report")
  public Double getCurrentStorage() {
    return currentStorage;
  }

  public void setCurrentStorage(Double currentStorage) {
    this.currentStorage = currentStorage;
  }

  public UsageSnapshotEntity highWaterStorage(Double highWaterStorage) {
    this.highWaterStorage = highWaterStorage;
    return this;
  }

   /**
   * Site usage report highest usage in time period
   * @return highWaterStorage
  **/
  @Schema(example = "1", description = "Site usage report highest usage in time period")
  public Double getHighWaterStorage() {
    return highWaterStorage;
  }

  public void setHighWaterStorage(Double highWaterStorage) {
    this.highWaterStorage = highWaterStorage;
  }

  public UsageSnapshotEntity totalDownloads(Integer totalDownloads) {
    this.totalDownloads = totalDownloads;
    return this;
  }

   /**
   * Number of downloads in report time period
   * @return totalDownloads
  **/
  @Schema(example = "1", description = "Number of downloads in report time period")
  public Integer getTotalDownloads() {
    return totalDownloads;
  }

  public void setTotalDownloads(Integer totalDownloads) {
    this.totalDownloads = totalDownloads;
  }

  public UsageSnapshotEntity totalUploads(Integer totalUploads) {
    this.totalUploads = totalUploads;
    return this;
  }

   /**
   * Number of uploads in time period
   * @return totalUploads
  **/
  @Schema(example = "1", description = "Number of uploads in time period")
  public Integer getTotalUploads() {
    return totalUploads;
  }

  public void setTotalUploads(Integer totalUploads) {
    this.totalUploads = totalUploads;
  }

  public UsageSnapshotEntity updatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The last time this site usage report was updated
   * @return updatedAt
  **/
  @Schema(description = "The last time this site usage report was updated")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public UsageSnapshotEntity usageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
    return this;
  }

   /**
   * A map of root folders to their total usage
   * @return usageByTopLevelDir
  **/
  @Schema(example = "{}", description = "A map of root folders to their total usage")
  public Object getUsageByTopLevelDir() {
    return usageByTopLevelDir;
  }

  public void setUsageByTopLevelDir(Object usageByTopLevelDir) {
    this.usageByTopLevelDir = usageByTopLevelDir;
  }

  public UsageSnapshotEntity rootStorage(Double rootStorage) {
    this.rootStorage = rootStorage;
    return this;
  }

   /**
   * Usage for root folder
   * @return rootStorage
  **/
  @Schema(example = "1", description = "Usage for root folder")
  public Double getRootStorage() {
    return rootStorage;
  }

  public void setRootStorage(Double rootStorage) {
    this.rootStorage = rootStorage;
  }

  public UsageSnapshotEntity deletedFilesCountedInMinimum(Double deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
    return this;
  }

   /**
   * Usage for files that are deleted but uploaded within last 30 days
   * @return deletedFilesCountedInMinimum
  **/
  @Schema(example = "1", description = "Usage for files that are deleted but uploaded within last 30 days")
  public Double getDeletedFilesCountedInMinimum() {
    return deletedFilesCountedInMinimum;
  }

  public void setDeletedFilesCountedInMinimum(Double deletedFilesCountedInMinimum) {
    this.deletedFilesCountedInMinimum = deletedFilesCountedInMinimum;
  }

  public UsageSnapshotEntity deletedFilesStorage(Double deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
    return this;
  }

   /**
   * Usage for files that are deleted but retained as backups
   * @return deletedFilesStorage
  **/
  @Schema(example = "1", description = "Usage for files that are deleted but retained as backups")
  public Double getDeletedFilesStorage() {
    return deletedFilesStorage;
  }

  public void setDeletedFilesStorage(Double deletedFilesStorage) {
    this.deletedFilesStorage = deletedFilesStorage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageSnapshotEntity usageSnapshotEntity = (UsageSnapshotEntity) o;
    return Objects.equals(this.id, usageSnapshotEntity.id) &&
        Objects.equals(this.startAt, usageSnapshotEntity.startAt) &&
        Objects.equals(this.endAt, usageSnapshotEntity.endAt) &&
        Objects.equals(this.createdAt, usageSnapshotEntity.createdAt) &&
        Objects.equals(this.highWaterUserCount, usageSnapshotEntity.highWaterUserCount) &&
        Objects.equals(this.currentStorage, usageSnapshotEntity.currentStorage) &&
        Objects.equals(this.highWaterStorage, usageSnapshotEntity.highWaterStorage) &&
        Objects.equals(this.totalDownloads, usageSnapshotEntity.totalDownloads) &&
        Objects.equals(this.totalUploads, usageSnapshotEntity.totalUploads) &&
        Objects.equals(this.updatedAt, usageSnapshotEntity.updatedAt) &&
        Objects.equals(this.usageByTopLevelDir, usageSnapshotEntity.usageByTopLevelDir) &&
        Objects.equals(this.rootStorage, usageSnapshotEntity.rootStorage) &&
        Objects.equals(this.deletedFilesCountedInMinimum, usageSnapshotEntity.deletedFilesCountedInMinimum) &&
        Objects.equals(this.deletedFilesStorage, usageSnapshotEntity.deletedFilesStorage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, startAt, endAt, createdAt, highWaterUserCount, currentStorage, highWaterStorage, totalDownloads, totalUploads, updatedAt, usageByTopLevelDir, rootStorage, deletedFilesCountedInMinimum, deletedFilesStorage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageSnapshotEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    highWaterUserCount: ").append(toIndentedString(highWaterUserCount)).append("\n");
    sb.append("    currentStorage: ").append(toIndentedString(currentStorage)).append("\n");
    sb.append("    highWaterStorage: ").append(toIndentedString(highWaterStorage)).append("\n");
    sb.append("    totalDownloads: ").append(toIndentedString(totalDownloads)).append("\n");
    sb.append("    totalUploads: ").append(toIndentedString(totalUploads)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    usageByTopLevelDir: ").append(toIndentedString(usageByTopLevelDir)).append("\n");
    sb.append("    rootStorage: ").append(toIndentedString(rootStorage)).append("\n");
    sb.append("    deletedFilesCountedInMinimum: ").append(toIndentedString(deletedFilesCountedInMinimum)).append("\n");
    sb.append("    deletedFilesStorage: ").append(toIndentedString(deletedFilesStorage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
