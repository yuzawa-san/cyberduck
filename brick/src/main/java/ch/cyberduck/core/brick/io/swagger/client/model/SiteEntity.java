/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.brick.io.swagger.client.model.ImageEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.SessionEntity;
import ch.cyberduck.core.brick.io.swagger.client.model.UserEntity;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

/**
 * Show site settings
 */
@ApiModel(description = "Show site settings")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-06-30T21:29:25.490+02:00")
public class SiteEntity {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("allowed_2fa_method_sms")
  private Boolean allowed2faMethodSms = null;

  @JsonProperty("allowed_2fa_method_totp")
  private Boolean allowed2faMethodTotp = null;

  @JsonProperty("allowed_2fa_method_u2f")
  private Boolean allowed2faMethodU2f = null;

  @JsonProperty("allowed_2fa_method_yubi")
  private Boolean allowed2faMethodYubi = null;

  @JsonProperty("admin_user_id")
  private Integer adminUserId = null;

  @JsonProperty("allow_bundle_names")
  private Boolean allowBundleNames = null;

  @JsonProperty("allowed_countries")
  private String allowedCountries = null;

  @JsonProperty("allowed_ips")
  private String allowedIps = null;

  @JsonProperty("ask_about_overwrites")
  private Boolean askAboutOverwrites = null;

  @JsonProperty("bundle_expiration")
  private Integer bundleExpiration = null;

  @JsonProperty("bundle_password_required")
  private Boolean bundlePasswordRequired = null;

  @JsonProperty("bundle_require_share_recipient")
  private Boolean bundleRequireShareRecipient = null;

  @JsonProperty("color2_left")
  private String color2Left = null;

  @JsonProperty("color2_link")
  private String color2Link = null;

  @JsonProperty("color2_text")
  private String color2Text = null;

  @JsonProperty("color2_top")
  private String color2Top = null;

  @JsonProperty("color2_top_text")
  private String color2TopText = null;

  @JsonProperty("contact_name")
  private String contactName = null;

  @JsonProperty("created_at")
  private DateTime createdAt = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("custom_namespace")
  private Boolean customNamespace = null;

  @JsonProperty("days_to_retain_backups")
  private Integer daysToRetainBackups = null;

  @JsonProperty("default_time_zone")
  private String defaultTimeZone = null;

  @JsonProperty("desktop_app")
  private Boolean desktopApp = null;

  @JsonProperty("desktop_app_session_ip_pinning")
  private Boolean desktopAppSessionIpPinning = null;

  @JsonProperty("desktop_app_session_lifetime")
  private Integer desktopAppSessionLifetime = null;

  @JsonProperty("disallowed_countries")
  private String disallowedCountries = null;

  @JsonProperty("disable_notifications")
  private Boolean disableNotifications = null;

  @JsonProperty("disable_password_reset")
  private Boolean disablePasswordReset = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("reply_to_email")
  private String replyToEmail = null;

  @JsonProperty("non_sso_groups_allowed")
  private Boolean nonSsoGroupsAllowed = null;

  @JsonProperty("non_sso_users_allowed")
  private Boolean nonSsoUsersAllowed = null;

  @JsonProperty("folder_permissions_groups_only")
  private Boolean folderPermissionsGroupsOnly = null;

  @JsonProperty("hipaa")
  private Boolean hipaa = null;

  @JsonProperty("icon128")
  private ImageEntity icon128 = null;

  @JsonProperty("icon16")
  private ImageEntity icon16 = null;

  @JsonProperty("icon32")
  private ImageEntity icon32 = null;

  @JsonProperty("icon48")
  private ImageEntity icon48 = null;

  @JsonProperty("immutable_files_set_at")
  private DateTime immutableFilesSetAt = null;

  @JsonProperty("include_password_in_welcome_email")
  private Boolean includePasswordInWelcomeEmail = null;

  @JsonProperty("language")
  private String language = null;

  @JsonProperty("ldap_base_dn")
  private String ldapBaseDn = null;

  @JsonProperty("ldap_domain")
  private String ldapDomain = null;

  @JsonProperty("ldap_enabled")
  private Boolean ldapEnabled = null;

  @JsonProperty("ldap_group_action")
  private String ldapGroupAction = null;

  @JsonProperty("ldap_group_exclusion")
  private String ldapGroupExclusion = null;

  @JsonProperty("ldap_group_inclusion")
  private String ldapGroupInclusion = null;

  @JsonProperty("ldap_host")
  private String ldapHost = null;

  @JsonProperty("ldap_host_2")
  private String ldapHost2 = null;

  @JsonProperty("ldap_host_3")
  private String ldapHost3 = null;

  @JsonProperty("ldap_port")
  private Integer ldapPort = null;

  @JsonProperty("ldap_secure")
  private Boolean ldapSecure = null;

  @JsonProperty("ldap_type")
  private String ldapType = null;

  @JsonProperty("ldap_user_action")
  private String ldapUserAction = null;

  @JsonProperty("ldap_user_include_groups")
  private String ldapUserIncludeGroups = null;

  @JsonProperty("ldap_username")
  private String ldapUsername = null;

  @JsonProperty("ldap_username_field")
  private String ldapUsernameField = null;

  @JsonProperty("login_help_text")
  private String loginHelpText = null;

  @JsonProperty("logo")
  private ImageEntity logo = null;

  @JsonProperty("max_prior_passwords")
  private Integer maxPriorPasswords = null;

  @JsonProperty("next_billing_amount")
  private Double nextBillingAmount = null;

  @JsonProperty("next_billing_date")
  private String nextBillingDate = null;

  @JsonProperty("office_integration_available")
  private Boolean officeIntegrationAvailable = null;

  @JsonProperty("oncehub_link")
  private String oncehubLink = null;

  @JsonProperty("opt_out_global")
  private Boolean optOutGlobal = null;

  @JsonProperty("overage_notified_at")
  private DateTime overageNotifiedAt = null;

  @JsonProperty("overage_notify")
  private Boolean overageNotify = null;

  @JsonProperty("overdue")
  private Boolean overdue = null;

  @JsonProperty("password_min_length")
  private Integer passwordMinLength = null;

  @JsonProperty("password_require_letter")
  private Boolean passwordRequireLetter = null;

  @JsonProperty("password_require_mixed")
  private Boolean passwordRequireMixed = null;

  @JsonProperty("password_require_number")
  private Boolean passwordRequireNumber = null;

  @JsonProperty("password_require_special")
  private Boolean passwordRequireSpecial = null;

  @JsonProperty("password_require_unbreached")
  private Boolean passwordRequireUnbreached = null;

  @JsonProperty("password_requirements_apply_to_bundles")
  private Boolean passwordRequirementsApplyToBundles = null;

  @JsonProperty("password_validity_days")
  private Integer passwordValidityDays = null;

  @JsonProperty("phone")
  private String phone = null;

  @JsonProperty("require_2fa")
  private Boolean require2fa = null;

  @JsonProperty("require_2fa_stop_time")
  private DateTime require2faStopTime = null;

  /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to &#x60;true&#x60; for this site)?
   */
  public enum Require2faUserTypeEnum {
    ALL("all"),
    
    FOLDER_AND_SITE_ADMINS("folder_and_site_admins"),
    
    SITE_ADMINS("site_admins");

    private String value;

    Require2faUserTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static Require2faUserTypeEnum fromValue(String value) {
      for (Require2faUserTypeEnum b : Require2faUserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("require_2fa_user_type")
  private Require2faUserTypeEnum require2faUserType = null;

  @JsonProperty("session")
  private SessionEntity session = null;

  @JsonProperty("session_pinned_by_ip")
  private Boolean sessionPinnedByIp = null;

  @JsonProperty("sftp_user_root_enabled")
  private Boolean sftpUserRootEnabled = null;

  @JsonProperty("sharing_enabled")
  private Boolean sharingEnabled = null;

  @JsonProperty("show_request_access_link")
  private Boolean showRequestAccessLink = null;

  @JsonProperty("site_footer")
  private String siteFooter = null;

  @JsonProperty("site_header")
  private String siteHeader = null;

  @JsonProperty("smtp_address")
  private String smtpAddress = null;

  @JsonProperty("smtp_authentication")
  private String smtpAuthentication = null;

  @JsonProperty("smtp_from")
  private String smtpFrom = null;

  @JsonProperty("smtp_port")
  private Integer smtpPort = null;

  @JsonProperty("smtp_username")
  private String smtpUsername = null;

  @JsonProperty("session_expiry")
  private Double sessionExpiry = null;

  @JsonProperty("ssl_required")
  private Boolean sslRequired = null;

  @JsonProperty("subdomain")
  private String subdomain = null;

  @JsonProperty("switch_to_plan_date")
  private DateTime switchToPlanDate = null;

  @JsonProperty("tls_disabled")
  private Boolean tlsDisabled = null;

  @JsonProperty("trial_days_left")
  private Integer trialDaysLeft = null;

  @JsonProperty("trial_until")
  private DateTime trialUntil = null;

  @JsonProperty("updated_at")
  private DateTime updatedAt = null;

  @JsonProperty("use_provided_modified_at")
  private Boolean useProvidedModifiedAt = null;

  @JsonProperty("user")
  private UserEntity user = null;

  @JsonProperty("user_lockout")
  private Boolean userLockout = null;

  @JsonProperty("user_lockout_lock_period")
  private Integer userLockoutLockPeriod = null;

  @JsonProperty("user_lockout_tries")
  private Integer userLockoutTries = null;

  @JsonProperty("user_lockout_within")
  private Integer userLockoutWithin = null;

  @JsonProperty("user_requests_enabled")
  private Boolean userRequestsEnabled = null;

  @JsonProperty("welcome_custom_text")
  private String welcomeCustomText = null;

  @JsonProperty("welcome_email_cc")
  private String welcomeEmailCc = null;

  @JsonProperty("welcome_email_enabled")
  private Boolean welcomeEmailEnabled = null;

  /**
   * Does the welcome screen appear?
   */
  public enum WelcomeScreenEnum {
    ENABLED("enabled"),
    
    HIDDEN("hidden"),
    
    DISABLED("disabled");

    private String value;

    WelcomeScreenEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static WelcomeScreenEnum fromValue(String value) {
      for (WelcomeScreenEnum b : WelcomeScreenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("welcome_screen")
  private WelcomeScreenEnum welcomeScreen = null;

  @JsonProperty("windows_mode_ftp")
  private Boolean windowsModeFtp = null;

  @JsonProperty("disable_users_from_inactivity_period_days")
  private Integer disableUsersFromInactivityPeriodDays = null;

  public SiteEntity name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Site name
   * @return name
  **/
  @ApiModelProperty(example = "My Site", value = "Site name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SiteEntity allowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
    return this;
  }

   /**
   * Is SMS two factor authentication allowed?
   * @return allowed2faMethodSms
  **/
  @ApiModelProperty(example = "true", value = "Is SMS two factor authentication allowed?")
  public Boolean isAllowed2faMethodSms() {
    return allowed2faMethodSms;
  }

  public void setAllowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
  }

  public SiteEntity allowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
    return this;
  }

   /**
   * Is TOTP two factor authentication allowed?
   * @return allowed2faMethodTotp
  **/
  @ApiModelProperty(example = "true", value = "Is TOTP two factor authentication allowed?")
  public Boolean isAllowed2faMethodTotp() {
    return allowed2faMethodTotp;
  }

  public void setAllowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
  }

  public SiteEntity allowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
    return this;
  }

   /**
   * Is U2F two factor authentication allowed?
   * @return allowed2faMethodU2f
  **/
  @ApiModelProperty(example = "true", value = "Is U2F two factor authentication allowed?")
  public Boolean isAllowed2faMethodU2f() {
    return allowed2faMethodU2f;
  }

  public void setAllowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
  }

  public SiteEntity allowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
    return this;
  }

   /**
   * Is yubikey two factor authentication allowed?
   * @return allowed2faMethodYubi
  **/
  @ApiModelProperty(example = "true", value = "Is yubikey two factor authentication allowed?")
  public Boolean isAllowed2faMethodYubi() {
    return allowed2faMethodYubi;
  }

  public void setAllowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
  }

  public SiteEntity adminUserId(Integer adminUserId) {
    this.adminUserId = adminUserId;
    return this;
  }

   /**
   * User ID for the main site administrator
   * @return adminUserId
  **/
  @ApiModelProperty(example = "1", value = "User ID for the main site administrator")
  public Integer getAdminUserId() {
    return adminUserId;
  }

  public void setAdminUserId(Integer adminUserId) {
    this.adminUserId = adminUserId;
  }

  public SiteEntity allowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
    return this;
  }

   /**
   * Are manual Bundle names allowed?
   * @return allowBundleNames
  **/
  @ApiModelProperty(example = "true", value = "Are manual Bundle names allowed?")
  public Boolean isAllowBundleNames() {
    return allowBundleNames;
  }

  public void setAllowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
  }

  public SiteEntity allowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
    return this;
  }

   /**
   * Comma seperated list of allowed Country codes
   * @return allowedCountries
  **/
  @ApiModelProperty(example = "US,DE", value = "Comma seperated list of allowed Country codes")
  public String getAllowedCountries() {
    return allowedCountries;
  }

  public void setAllowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
  }

  public SiteEntity allowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

   /**
   * List of allowed IP addresses
   * @return allowedIps
  **/
  @ApiModelProperty(example = "", value = "List of allowed IP addresses")
  public String getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
  }

  public SiteEntity askAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
    return this;
  }

   /**
   * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
   * @return askAboutOverwrites
  **/
  @ApiModelProperty(example = "true", value = "If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.")
  public Boolean isAskAboutOverwrites() {
    return askAboutOverwrites;
  }

  public void setAskAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
  }

  public SiteEntity bundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
    return this;
  }

   /**
   * Site-wide Bundle expiration in days
   * @return bundleExpiration
  **/
  @ApiModelProperty(example = "1", value = "Site-wide Bundle expiration in days")
  public Integer getBundleExpiration() {
    return bundleExpiration;
  }

  public void setBundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
  }

  public SiteEntity bundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
    return this;
  }

   /**
   * Do Bundles require password protection?
   * @return bundlePasswordRequired
  **/
  @ApiModelProperty(example = "true", value = "Do Bundles require password protection?")
  public Boolean isBundlePasswordRequired() {
    return bundlePasswordRequired;
  }

  public void setBundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
  }

  public SiteEntity bundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
    return this;
  }

   /**
   * Do Bundles require recipients for sharing?
   * @return bundleRequireShareRecipient
  **/
  @ApiModelProperty(example = "true", value = "Do Bundles require recipients for sharing?")
  public Boolean isBundleRequireShareRecipient() {
    return bundleRequireShareRecipient;
  }

  public void setBundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
  }

  public SiteEntity color2Left(String color2Left) {
    this.color2Left = color2Left;
    return this;
  }

   /**
   * Page link and button color
   * @return color2Left
  **/
  @ApiModelProperty(example = "#0066a7", value = "Page link and button color")
  public String getColor2Left() {
    return color2Left;
  }

  public void setColor2Left(String color2Left) {
    this.color2Left = color2Left;
  }

  public SiteEntity color2Link(String color2Link) {
    this.color2Link = color2Link;
    return this;
  }

   /**
   * Top bar link color
   * @return color2Link
  **/
  @ApiModelProperty(example = "#d34f5d", value = "Top bar link color")
  public String getColor2Link() {
    return color2Link;
  }

  public void setColor2Link(String color2Link) {
    this.color2Link = color2Link;
  }

  public SiteEntity color2Text(String color2Text) {
    this.color2Text = color2Text;
    return this;
  }

   /**
   * Page link and button color
   * @return color2Text
  **/
  @ApiModelProperty(example = "#0066a7", value = "Page link and button color")
  public String getColor2Text() {
    return color2Text;
  }

  public void setColor2Text(String color2Text) {
    this.color2Text = color2Text;
  }

  public SiteEntity color2Top(String color2Top) {
    this.color2Top = color2Top;
    return this;
  }

   /**
   * Top bar background color
   * @return color2Top
  **/
  @ApiModelProperty(example = "#000000", value = "Top bar background color")
  public String getColor2Top() {
    return color2Top;
  }

  public void setColor2Top(String color2Top) {
    this.color2Top = color2Top;
  }

  public SiteEntity color2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
    return this;
  }

   /**
   * Top bar text color
   * @return color2TopText
  **/
  @ApiModelProperty(example = "#ffffff", value = "Top bar text color")
  public String getColor2TopText() {
    return color2TopText;
  }

  public void setColor2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
  }

  public SiteEntity contactName(String contactName) {
    this.contactName = contactName;
    return this;
  }

   /**
   * Site main contact name
   * @return contactName
  **/
  @ApiModelProperty(example = "John Doe", value = "Site main contact name")
  public String getContactName() {
    return contactName;
  }

  public void setContactName(String contactName) {
    this.contactName = contactName;
  }

  public SiteEntity createdAt(DateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Time this site was created
   * @return createdAt
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "Time this site was created")
  public DateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(DateTime createdAt) {
    this.createdAt = createdAt;
  }

  public SiteEntity currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Preferred currency
   * @return currency
  **/
  @ApiModelProperty(example = "USD", value = "Preferred currency")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public SiteEntity customNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
    return this;
  }

   /**
   * Is this site using a custom namespace for users?
   * @return customNamespace
  **/
  @ApiModelProperty(example = "true", value = "Is this site using a custom namespace for users?")
  public Boolean isCustomNamespace() {
    return customNamespace;
  }

  public void setCustomNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
  }

  public SiteEntity daysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
    return this;
  }

   /**
   * Number of days to keep deleted files
   * @return daysToRetainBackups
  **/
  @ApiModelProperty(example = "30", value = "Number of days to keep deleted files")
  public Integer getDaysToRetainBackups() {
    return daysToRetainBackups;
  }

  public void setDaysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
  }

  public SiteEntity defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

   /**
   * Site default time zone
   * @return defaultTimeZone
  **/
  @ApiModelProperty(example = "Pacific Time (US & Canada)", value = "Site default time zone")
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }

  public SiteEntity desktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
    return this;
  }

   /**
   * Is the desktop app enabled?
   * @return desktopApp
  **/
  @ApiModelProperty(example = "true", value = "Is the desktop app enabled?")
  public Boolean isDesktopApp() {
    return desktopApp;
  }

  public void setDesktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
  }

  public SiteEntity desktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
    return this;
  }

   /**
   * Is desktop app session IP pinning enabled?
   * @return desktopAppSessionIpPinning
  **/
  @ApiModelProperty(example = "true", value = "Is desktop app session IP pinning enabled?")
  public Boolean isDesktopAppSessionIpPinning() {
    return desktopAppSessionIpPinning;
  }

  public void setDesktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
  }

  public SiteEntity desktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
    return this;
  }

   /**
   * Desktop app session lifetime (in hours)
   * @return desktopAppSessionLifetime
  **/
  @ApiModelProperty(example = "1", value = "Desktop app session lifetime (in hours)")
  public Integer getDesktopAppSessionLifetime() {
    return desktopAppSessionLifetime;
  }

  public void setDesktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
  }

  public SiteEntity disallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
    return this;
  }

   /**
   * Comma seperated list of disallowed Country codes
   * @return disallowedCountries
  **/
  @ApiModelProperty(example = "US,DE", value = "Comma seperated list of disallowed Country codes")
  public String getDisallowedCountries() {
    return disallowedCountries;
  }

  public void setDisallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
  }

  public SiteEntity disableNotifications(Boolean disableNotifications) {
    this.disableNotifications = disableNotifications;
    return this;
  }

   /**
   * Are notifications disabled?
   * @return disableNotifications
  **/
  @ApiModelProperty(example = "true", value = "Are notifications disabled?")
  public Boolean isDisableNotifications() {
    return disableNotifications;
  }

  public void setDisableNotifications(Boolean disableNotifications) {
    this.disableNotifications = disableNotifications;
  }

  public SiteEntity disablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
    return this;
  }

   /**
   * Is password reset disabled?
   * @return disablePasswordReset
  **/
  @ApiModelProperty(example = "true", value = "Is password reset disabled?")
  public Boolean isDisablePasswordReset() {
    return disablePasswordReset;
  }

  public void setDisablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
  }

  public SiteEntity domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Custom domain
   * @return domain
  **/
  @ApiModelProperty(example = "my-custom-domain.com", value = "Custom domain")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public SiteEntity email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Main email for this site
   * @return email
  **/
  @ApiModelProperty(example = "john.doe@files.com", value = "Main email for this site")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public SiteEntity replyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
    return this;
  }

   /**
   * Reply-to email for this site
   * @return replyToEmail
  **/
  @ApiModelProperty(example = "jane.doe@files.com", value = "Reply-to email for this site")
  public String getReplyToEmail() {
    return replyToEmail;
  }

  public void setReplyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
  }

  public SiteEntity nonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
    return this;
  }

   /**
   * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
   * @return nonSsoGroupsAllowed
  **/
  @ApiModelProperty(example = "true", value = "If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.")
  public Boolean isNonSsoGroupsAllowed() {
    return nonSsoGroupsAllowed;
  }

  public void setNonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
  }

  public SiteEntity nonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
    return this;
  }

   /**
   * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
   * @return nonSsoUsersAllowed
  **/
  @ApiModelProperty(example = "true", value = "If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.")
  public Boolean isNonSsoUsersAllowed() {
    return nonSsoUsersAllowed;
  }

  public void setNonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
  }

  public SiteEntity folderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
    return this;
  }

   /**
   * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
   * @return folderPermissionsGroupsOnly
  **/
  @ApiModelProperty(example = "true", value = "If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.")
  public Boolean isFolderPermissionsGroupsOnly() {
    return folderPermissionsGroupsOnly;
  }

  public void setFolderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
  }

  public SiteEntity hipaa(Boolean hipaa) {
    this.hipaa = hipaa;
    return this;
  }

   /**
   * Is there a signed HIPAA BAA between Files.com and this site?
   * @return hipaa
  **/
  @ApiModelProperty(example = "true", value = "Is there a signed HIPAA BAA between Files.com and this site?")
  public Boolean isHipaa() {
    return hipaa;
  }

  public void setHipaa(Boolean hipaa) {
    this.hipaa = hipaa;
  }

  public SiteEntity icon128(ImageEntity icon128) {
    this.icon128 = icon128;
    return this;
  }

   /**
   * Branded icon 128x128
   * @return icon128
  **/
  @ApiModelProperty(value = "Branded icon 128x128")
  public ImageEntity getIcon128() {
    return icon128;
  }

  public void setIcon128(ImageEntity icon128) {
    this.icon128 = icon128;
  }

  public SiteEntity icon16(ImageEntity icon16) {
    this.icon16 = icon16;
    return this;
  }

   /**
   * Branded icon 16x16
   * @return icon16
  **/
  @ApiModelProperty(value = "Branded icon 16x16")
  public ImageEntity getIcon16() {
    return icon16;
  }

  public void setIcon16(ImageEntity icon16) {
    this.icon16 = icon16;
  }

  public SiteEntity icon32(ImageEntity icon32) {
    this.icon32 = icon32;
    return this;
  }

   /**
   * Branded icon 32x32
   * @return icon32
  **/
  @ApiModelProperty(value = "Branded icon 32x32")
  public ImageEntity getIcon32() {
    return icon32;
  }

  public void setIcon32(ImageEntity icon32) {
    this.icon32 = icon32;
  }

  public SiteEntity icon48(ImageEntity icon48) {
    this.icon48 = icon48;
    return this;
  }

   /**
   * Branded icon 48x48
   * @return icon48
  **/
  @ApiModelProperty(value = "Branded icon 48x48")
  public ImageEntity getIcon48() {
    return icon48;
  }

  public void setIcon48(ImageEntity icon48) {
    this.icon48 = icon48;
  }

  public SiteEntity immutableFilesSetAt(DateTime immutableFilesSetAt) {
    this.immutableFilesSetAt = immutableFilesSetAt;
    return this;
  }

   /**
   * Can files be modified?
   * @return immutableFilesSetAt
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "Can files be modified?")
  public DateTime getImmutableFilesSetAt() {
    return immutableFilesSetAt;
  }

  public void setImmutableFilesSetAt(DateTime immutableFilesSetAt) {
    this.immutableFilesSetAt = immutableFilesSetAt;
  }

  public SiteEntity includePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
    return this;
  }

   /**
   * Include password in emails to new users?
   * @return includePasswordInWelcomeEmail
  **/
  @ApiModelProperty(example = "true", value = "Include password in emails to new users?")
  public Boolean isIncludePasswordInWelcomeEmail() {
    return includePasswordInWelcomeEmail;
  }

  public void setIncludePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
  }

  public SiteEntity language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Site default language
   * @return language
  **/
  @ApiModelProperty(example = "en", value = "Site default language")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public SiteEntity ldapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
    return this;
  }

   /**
   * Base DN for looking up users in LDAP server
   * @return ldapBaseDn
  **/
  @ApiModelProperty(example = "", value = "Base DN for looking up users in LDAP server")
  public String getLdapBaseDn() {
    return ldapBaseDn;
  }

  public void setLdapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
  }

  public SiteEntity ldapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
    return this;
  }

   /**
   * Domain name that will be appended to usernames
   * @return ldapDomain
  **/
  @ApiModelProperty(example = "mysite.com", value = "Domain name that will be appended to usernames")
  public String getLdapDomain() {
    return ldapDomain;
  }

  public void setLdapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
  }

  public SiteEntity ldapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
    return this;
  }

   /**
   * Main LDAP setting: is LDAP enabled?
   * @return ldapEnabled
  **/
  @ApiModelProperty(example = "true", value = "Main LDAP setting: is LDAP enabled?")
  public Boolean isLdapEnabled() {
    return ldapEnabled;
  }

  public void setLdapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
  }

  public SiteEntity ldapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
    return this;
  }

   /**
   * Should we sync groups from LDAP server?
   * @return ldapGroupAction
  **/
  @ApiModelProperty(example = "disabled", value = "Should we sync groups from LDAP server?")
  public String getLdapGroupAction() {
    return ldapGroupAction;
  }

  public void setLdapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
  }

  public SiteEntity ldapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
   * @return ldapGroupExclusion
  **/
  @ApiModelProperty(example = "", value = "Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.")
  public String getLdapGroupExclusion() {
    return ldapGroupExclusion;
  }

  public void setLdapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
  }

  public SiteEntity ldapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
   * @return ldapGroupInclusion
  **/
  @ApiModelProperty(example = "", value = "Comma or newline separated list of group names (with optional wildcards) to include when syncing.")
  public String getLdapGroupInclusion() {
    return ldapGroupInclusion;
  }

  public void setLdapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
  }

  public SiteEntity ldapHost(String ldapHost) {
    this.ldapHost = ldapHost;
    return this;
  }

   /**
   * LDAP host
   * @return ldapHost
  **/
  @ApiModelProperty(example = "ldap.site.com", value = "LDAP host")
  public String getLdapHost() {
    return ldapHost;
  }

  public void setLdapHost(String ldapHost) {
    this.ldapHost = ldapHost;
  }

  public SiteEntity ldapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
    return this;
  }

   /**
   * LDAP backup host
   * @return ldapHost2
  **/
  @ApiModelProperty(example = "ldap2.site.com", value = "LDAP backup host")
  public String getLdapHost2() {
    return ldapHost2;
  }

  public void setLdapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
  }

  public SiteEntity ldapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
    return this;
  }

   /**
   * LDAP backup host
   * @return ldapHost3
  **/
  @ApiModelProperty(example = "ldap3.site.com", value = "LDAP backup host")
  public String getLdapHost3() {
    return ldapHost3;
  }

  public void setLdapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
  }

  public SiteEntity ldapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
    return this;
  }

   /**
   * LDAP port
   * @return ldapPort
  **/
  @ApiModelProperty(example = "1", value = "LDAP port")
  public Integer getLdapPort() {
    return ldapPort;
  }

  public void setLdapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
  }

  public SiteEntity ldapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
    return this;
  }

   /**
   * Use secure LDAP?
   * @return ldapSecure
  **/
  @ApiModelProperty(example = "true", value = "Use secure LDAP?")
  public Boolean isLdapSecure() {
    return ldapSecure;
  }

  public void setLdapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
  }

  public SiteEntity ldapType(String ldapType) {
    this.ldapType = ldapType;
    return this;
  }

   /**
   * LDAP type
   * @return ldapType
  **/
  @ApiModelProperty(example = "open_ldap", value = "LDAP type")
  public String getLdapType() {
    return ldapType;
  }

  public void setLdapType(String ldapType) {
    this.ldapType = ldapType;
  }

  public SiteEntity ldapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
    return this;
  }

   /**
   * Should we sync users from LDAP server?
   * @return ldapUserAction
  **/
  @ApiModelProperty(example = "disabled", value = "Should we sync users from LDAP server?")
  public String getLdapUserAction() {
    return ldapUserAction;
  }

  public void setLdapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
  }

  public SiteEntity ldapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
   * @return ldapUserIncludeGroups
  **/
  @ApiModelProperty(example = "", value = "Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.")
  public String getLdapUserIncludeGroups() {
    return ldapUserIncludeGroups;
  }

  public void setLdapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
  }

  public SiteEntity ldapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
    return this;
  }

   /**
   * Username for signing in to LDAP server.
   * @return ldapUsername
  **/
  @ApiModelProperty(example = "[ldap username]", value = "Username for signing in to LDAP server.")
  public String getLdapUsername() {
    return ldapUsername;
  }

  public void setLdapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
  }

  public SiteEntity ldapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
    return this;
  }

   /**
   * LDAP username field
   * @return ldapUsernameField
  **/
  @ApiModelProperty(example = "sAMAccountName", value = "LDAP username field")
  public String getLdapUsernameField() {
    return ldapUsernameField;
  }

  public void setLdapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
  }

  public SiteEntity loginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
    return this;
  }

   /**
   * Login help text
   * @return loginHelpText
  **/
  @ApiModelProperty(example = "Login page help text.", value = "Login help text")
  public String getLoginHelpText() {
    return loginHelpText;
  }

  public void setLoginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
  }

  public SiteEntity logo(ImageEntity logo) {
    this.logo = logo;
    return this;
  }

   /**
   * Branded logo
   * @return logo
  **/
  @ApiModelProperty(value = "Branded logo")
  public ImageEntity getLogo() {
    return logo;
  }

  public void setLogo(ImageEntity logo) {
    this.logo = logo;
  }

  public SiteEntity maxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
    return this;
  }

   /**
   * Number of prior passwords to disallow
   * @return maxPriorPasswords
  **/
  @ApiModelProperty(example = "1", value = "Number of prior passwords to disallow")
  public Integer getMaxPriorPasswords() {
    return maxPriorPasswords;
  }

  public void setMaxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
  }

  public SiteEntity nextBillingAmount(Double nextBillingAmount) {
    this.nextBillingAmount = nextBillingAmount;
    return this;
  }

   /**
   * Next billing amount
   * @return nextBillingAmount
  **/
  @ApiModelProperty(example = "1.0", value = "Next billing amount")
  public Double getNextBillingAmount() {
    return nextBillingAmount;
  }

  public void setNextBillingAmount(Double nextBillingAmount) {
    this.nextBillingAmount = nextBillingAmount;
  }

  public SiteEntity nextBillingDate(String nextBillingDate) {
    this.nextBillingDate = nextBillingDate;
    return this;
  }

   /**
   * Next billing date
   * @return nextBillingDate
  **/
  @ApiModelProperty(example = "Apr 20", value = "Next billing date")
  public String getNextBillingDate() {
    return nextBillingDate;
  }

  public void setNextBillingDate(String nextBillingDate) {
    this.nextBillingDate = nextBillingDate;
  }

  public SiteEntity officeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
    return this;
  }

   /**
   * Allow users to use Office for the web?
   * @return officeIntegrationAvailable
  **/
  @ApiModelProperty(example = "true", value = "Allow users to use Office for the web?")
  public Boolean isOfficeIntegrationAvailable() {
    return officeIntegrationAvailable;
  }

  public void setOfficeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
  }

  public SiteEntity oncehubLink(String oncehubLink) {
    this.oncehubLink = oncehubLink;
    return this;
  }

   /**
   * Link to scheduling a meeting with our Sales team
   * @return oncehubLink
  **/
  @ApiModelProperty(example = "https://go.oncehub.com/files", value = "Link to scheduling a meeting with our Sales team")
  public String getOncehubLink() {
    return oncehubLink;
  }

  public void setOncehubLink(String oncehubLink) {
    this.oncehubLink = oncehubLink;
  }

  public SiteEntity optOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
    return this;
  }

   /**
   * Use servers in the USA only?
   * @return optOutGlobal
  **/
  @ApiModelProperty(example = "true", value = "Use servers in the USA only?")
  public Boolean isOptOutGlobal() {
    return optOutGlobal;
  }

  public void setOptOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
  }

  public SiteEntity overageNotifiedAt(DateTime overageNotifiedAt) {
    this.overageNotifiedAt = overageNotifiedAt;
    return this;
  }

   /**
   * Last time the site was notified about an overage
   * @return overageNotifiedAt
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "Last time the site was notified about an overage")
  public DateTime getOverageNotifiedAt() {
    return overageNotifiedAt;
  }

  public void setOverageNotifiedAt(DateTime overageNotifiedAt) {
    this.overageNotifiedAt = overageNotifiedAt;
  }

  public SiteEntity overageNotify(Boolean overageNotify) {
    this.overageNotify = overageNotify;
    return this;
  }

   /**
   * Notify site email of overages?
   * @return overageNotify
  **/
  @ApiModelProperty(example = "true", value = "Notify site email of overages?")
  public Boolean isOverageNotify() {
    return overageNotify;
  }

  public void setOverageNotify(Boolean overageNotify) {
    this.overageNotify = overageNotify;
  }

  public SiteEntity overdue(Boolean overdue) {
    this.overdue = overdue;
    return this;
  }

   /**
   * Is this site&#39;s billing overdue?
   * @return overdue
  **/
  @ApiModelProperty(example = "true", value = "Is this site's billing overdue?")
  public Boolean isOverdue() {
    return overdue;
  }

  public void setOverdue(Boolean overdue) {
    this.overdue = overdue;
  }

  public SiteEntity passwordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
    return this;
  }

   /**
   * Shortest password length for users
   * @return passwordMinLength
  **/
  @ApiModelProperty(example = "1", value = "Shortest password length for users")
  public Integer getPasswordMinLength() {
    return passwordMinLength;
  }

  public void setPasswordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
  }

  public SiteEntity passwordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
    return this;
  }

   /**
   * Require a letter in passwords?
   * @return passwordRequireLetter
  **/
  @ApiModelProperty(example = "true", value = "Require a letter in passwords?")
  public Boolean isPasswordRequireLetter() {
    return passwordRequireLetter;
  }

  public void setPasswordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
  }

  public SiteEntity passwordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
    return this;
  }

   /**
   * Require lower and upper case letters in passwords?
   * @return passwordRequireMixed
  **/
  @ApiModelProperty(example = "true", value = "Require lower and upper case letters in passwords?")
  public Boolean isPasswordRequireMixed() {
    return passwordRequireMixed;
  }

  public void setPasswordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
  }

  public SiteEntity passwordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
    return this;
  }

   /**
   * Require a number in passwords?
   * @return passwordRequireNumber
  **/
  @ApiModelProperty(example = "true", value = "Require a number in passwords?")
  public Boolean isPasswordRequireNumber() {
    return passwordRequireNumber;
  }

  public void setPasswordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
  }

  public SiteEntity passwordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
    return this;
  }

   /**
   * Require special characters in password?
   * @return passwordRequireSpecial
  **/
  @ApiModelProperty(example = "true", value = "Require special characters in password?")
  public Boolean isPasswordRequireSpecial() {
    return passwordRequireSpecial;
  }

  public void setPasswordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
  }

  public SiteEntity passwordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
    return this;
  }

   /**
   * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
   * @return passwordRequireUnbreached
  **/
  @ApiModelProperty(example = "true", value = "Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)")
  public Boolean isPasswordRequireUnbreached() {
    return passwordRequireUnbreached;
  }

  public void setPasswordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
  }

  public SiteEntity passwordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
    return this;
  }

   /**
   * Require bundles&#39; passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users&#39; passwords?
   * @return passwordRequirementsApplyToBundles
  **/
  @ApiModelProperty(example = "true", value = "Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?")
  public Boolean isPasswordRequirementsApplyToBundles() {
    return passwordRequirementsApplyToBundles;
  }

  public void setPasswordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
  }

  public SiteEntity passwordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
    return this;
  }

   /**
   * Number of days password is valid
   * @return passwordValidityDays
  **/
  @ApiModelProperty(example = "1", value = "Number of days password is valid")
  public Integer getPasswordValidityDays() {
    return passwordValidityDays;
  }

  public void setPasswordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
  }

  public SiteEntity phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * Site phone number
   * @return phone
  **/
  @ApiModelProperty(example = "555-555-5555", value = "Site phone number")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public SiteEntity require2fa(Boolean require2fa) {
    this.require2fa = require2fa;
    return this;
  }

   /**
   * Require two-factor authentication for all users?
   * @return require2fa
  **/
  @ApiModelProperty(example = "true", value = "Require two-factor authentication for all users?")
  public Boolean isRequire2fa() {
    return require2fa;
  }

  public void setRequire2fa(Boolean require2fa) {
    this.require2fa = require2fa;
  }

  public SiteEntity require2faStopTime(DateTime require2faStopTime) {
    this.require2faStopTime = require2faStopTime;
    return this;
  }

   /**
   * If set, requirement for two-factor authentication has been scheduled to end on this date-time.
   * @return require2faStopTime
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "If set, requirement for two-factor authentication has been scheduled to end on this date-time.")
  public DateTime getRequire2faStopTime() {
    return require2faStopTime;
  }

  public void setRequire2faStopTime(DateTime require2faStopTime) {
    this.require2faStopTime = require2faStopTime;
  }

  public SiteEntity require2faUserType(Require2faUserTypeEnum require2faUserType) {
    this.require2faUserType = require2faUserType;
    return this;
  }

   /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to &#x60;true&#x60; for this site)?
   * @return require2faUserType
  **/
  @ApiModelProperty(example = "`site_admins`", value = "What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?")
  public Require2faUserTypeEnum getRequire2faUserType() {
    return require2faUserType;
  }

  public void setRequire2faUserType(Require2faUserTypeEnum require2faUserType) {
    this.require2faUserType = require2faUserType;
  }

  public SiteEntity session(SessionEntity session) {
    this.session = session;
    return this;
  }

   /**
   * Current session
   * @return session
  **/
  @ApiModelProperty(value = "Current session")
  public SessionEntity getSession() {
    return session;
  }

  public void setSession(SessionEntity session) {
    this.session = session;
  }

  public SiteEntity sessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
    return this;
  }

   /**
   * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
   * @return sessionPinnedByIp
  **/
  @ApiModelProperty(example = "true", value = "Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)")
  public Boolean isSessionPinnedByIp() {
    return sessionPinnedByIp;
  }

  public void setSessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
  }

  public SiteEntity sftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
    return this;
  }

   /**
   * Use user FTP roots also for SFTP?
   * @return sftpUserRootEnabled
  **/
  @ApiModelProperty(value = "Use user FTP roots also for SFTP?")
  public Boolean isSftpUserRootEnabled() {
    return sftpUserRootEnabled;
  }

  public void setSftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
  }

  public SiteEntity sharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
    return this;
  }

   /**
   * Allow bundle creation
   * @return sharingEnabled
  **/
  @ApiModelProperty(example = "true", value = "Allow bundle creation")
  public Boolean isSharingEnabled() {
    return sharingEnabled;
  }

  public void setSharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
  }

  public SiteEntity showRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
    return this;
  }

   /**
   * Show request access link for users without access?  Currently unused.
   * @return showRequestAccessLink
  **/
  @ApiModelProperty(example = "true", value = "Show request access link for users without access?  Currently unused.")
  public Boolean isShowRequestAccessLink() {
    return showRequestAccessLink;
  }

  public void setShowRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
  }

  public SiteEntity siteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
    return this;
  }

   /**
   * Custom site footer text
   * @return siteFooter
  **/
  @ApiModelProperty(example = "", value = "Custom site footer text")
  public String getSiteFooter() {
    return siteFooter;
  }

  public void setSiteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
  }

  public SiteEntity siteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
    return this;
  }

   /**
   * Custom site header text
   * @return siteHeader
  **/
  @ApiModelProperty(example = "", value = "Custom site header text")
  public String getSiteHeader() {
    return siteHeader;
  }

  public void setSiteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
  }

  public SiteEntity smtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
    return this;
  }

   /**
   * SMTP server hostname or IP
   * @return smtpAddress
  **/
  @ApiModelProperty(example = "smtp.my-mail-server.com", value = "SMTP server hostname or IP")
  public String getSmtpAddress() {
    return smtpAddress;
  }

  public void setSmtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
  }

  public SiteEntity smtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
    return this;
  }

   /**
   * SMTP server authentication type
   * @return smtpAuthentication
  **/
  @ApiModelProperty(example = "plain", value = "SMTP server authentication type")
  public String getSmtpAuthentication() {
    return smtpAuthentication;
  }

  public void setSmtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
  }

  public SiteEntity smtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
    return this;
  }

   /**
   * From address to use when mailing through custom SMTP
   * @return smtpFrom
  **/
  @ApiModelProperty(example = "me@my-mail-server.com", value = "From address to use when mailing through custom SMTP")
  public String getSmtpFrom() {
    return smtpFrom;
  }

  public void setSmtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
  }

  public SiteEntity smtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * SMTP server port
   * @return smtpPort
  **/
  @ApiModelProperty(example = "25", value = "SMTP server port")
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
  }

  public SiteEntity smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * SMTP server username
   * @return smtpUsername
  **/
  @ApiModelProperty(example = "mail", value = "SMTP server username")
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }

  public SiteEntity sessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
    return this;
  }

   /**
   * Session expiry in hours
   * @return sessionExpiry
  **/
  @ApiModelProperty(example = "6.0", value = "Session expiry in hours")
  public Double getSessionExpiry() {
    return sessionExpiry;
  }

  public void setSessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
  }

  public SiteEntity sslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

   /**
   * Is SSL required?  Disabling this is insecure.
   * @return sslRequired
  **/
  @ApiModelProperty(example = "true", value = "Is SSL required?  Disabling this is insecure.")
  public Boolean isSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
  }

  public SiteEntity subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

   /**
   * Site subdomain
   * @return subdomain
  **/
  @ApiModelProperty(example = "mysite", value = "Site subdomain")
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }

  public SiteEntity switchToPlanDate(DateTime switchToPlanDate) {
    this.switchToPlanDate = switchToPlanDate;
    return this;
  }

   /**
   * If switching plans, when does the new plan take effect?
   * @return switchToPlanDate
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "If switching plans, when does the new plan take effect?")
  public DateTime getSwitchToPlanDate() {
    return switchToPlanDate;
  }

  public void setSwitchToPlanDate(DateTime switchToPlanDate) {
    this.switchToPlanDate = switchToPlanDate;
  }

  public SiteEntity tlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
    return this;
  }

   /**
   * Is TLS disabled(site setting)?
   * @return tlsDisabled
  **/
  @ApiModelProperty(value = "Is TLS disabled(site setting)?")
  public Boolean isTlsDisabled() {
    return tlsDisabled;
  }

  public void setTlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
  }

  public SiteEntity trialDaysLeft(Integer trialDaysLeft) {
    this.trialDaysLeft = trialDaysLeft;
    return this;
  }

   /**
   * Number of days left in trial
   * @return trialDaysLeft
  **/
  @ApiModelProperty(example = "1", value = "Number of days left in trial")
  public Integer getTrialDaysLeft() {
    return trialDaysLeft;
  }

  public void setTrialDaysLeft(Integer trialDaysLeft) {
    this.trialDaysLeft = trialDaysLeft;
  }

  public SiteEntity trialUntil(DateTime trialUntil) {
    this.trialUntil = trialUntil;
    return this;
  }

   /**
   * When does this Site trial expire?
   * @return trialUntil
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "When does this Site trial expire?")
  public DateTime getTrialUntil() {
    return trialUntil;
  }

  public void setTrialUntil(DateTime trialUntil) {
    this.trialUntil = trialUntil;
  }

  public SiteEntity updatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Last time this Site was updated
   * @return updatedAt
  **/
  @ApiModelProperty(example = "2000-01-01T01:00:00Z", value = "Last time this Site was updated")
  public DateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(DateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public SiteEntity useProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
    return this;
  }

   /**
   * Allow uploaders to set &#x60;provided_modified_at&#x60; for uploaded files?
   * @return useProvidedModifiedAt
  **/
  @ApiModelProperty(example = "true", value = "Allow uploaders to set `provided_modified_at` for uploaded files?")
  public Boolean isUseProvidedModifiedAt() {
    return useProvidedModifiedAt;
  }

  public void setUseProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
  }

  public SiteEntity user(UserEntity user) {
    this.user = user;
    return this;
  }

   /**
   * User of current session
   * @return user
  **/
  @ApiModelProperty(value = "User of current session")
  public UserEntity getUser() {
    return user;
  }

  public void setUser(UserEntity user) {
    this.user = user;
  }

  public SiteEntity userLockout(Boolean userLockout) {
    this.userLockout = userLockout;
    return this;
  }

   /**
   * Will users be locked out after incorrect login attempts?
   * @return userLockout
  **/
  @ApiModelProperty(example = "true", value = "Will users be locked out after incorrect login attempts?")
  public Boolean isUserLockout() {
    return userLockout;
  }

  public void setUserLockout(Boolean userLockout) {
    this.userLockout = userLockout;
  }

  public SiteEntity userLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
    return this;
  }

   /**
   * How many hours to lock user out for failed password?
   * @return userLockoutLockPeriod
  **/
  @ApiModelProperty(example = "1", value = "How many hours to lock user out for failed password?")
  public Integer getUserLockoutLockPeriod() {
    return userLockoutLockPeriod;
  }

  public void setUserLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
  }

  public SiteEntity userLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
    return this;
  }

   /**
   * Number of login tries within &#x60;user_lockout_within&#x60; hours before users are locked out
   * @return userLockoutTries
  **/
  @ApiModelProperty(example = "1", value = "Number of login tries within `user_lockout_within` hours before users are locked out")
  public Integer getUserLockoutTries() {
    return userLockoutTries;
  }

  public void setUserLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
  }

  public SiteEntity userLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
    return this;
  }

   /**
   * Number of hours for user lockout window
   * @return userLockoutWithin
  **/
  @ApiModelProperty(example = "6", value = "Number of hours for user lockout window")
  public Integer getUserLockoutWithin() {
    return userLockoutWithin;
  }

  public void setUserLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
  }

  public SiteEntity userRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
    return this;
  }

   /**
   * Enable User Requests feature
   * @return userRequestsEnabled
  **/
  @ApiModelProperty(example = "true", value = "Enable User Requests feature")
  public Boolean isUserRequestsEnabled() {
    return userRequestsEnabled;
  }

  public void setUserRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
  }

  public SiteEntity welcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
    return this;
  }

   /**
   * Custom text send in user welcome email
   * @return welcomeCustomText
  **/
  @ApiModelProperty(example = "Welcome to my site!", value = "Custom text send in user welcome email")
  public String getWelcomeCustomText() {
    return welcomeCustomText;
  }

  public void setWelcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
  }

  public SiteEntity welcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
    return this;
  }

   /**
   * Include this email in welcome emails if enabled
   * @return welcomeEmailCc
  **/
  @ApiModelProperty(example = "", value = "Include this email in welcome emails if enabled")
  public String getWelcomeEmailCc() {
    return welcomeEmailCc;
  }

  public void setWelcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
  }

  public SiteEntity welcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
    return this;
  }

   /**
   * Will the welcome email be sent to new users?
   * @return welcomeEmailEnabled
  **/
  @ApiModelProperty(example = "true", value = "Will the welcome email be sent to new users?")
  public Boolean isWelcomeEmailEnabled() {
    return welcomeEmailEnabled;
  }

  public void setWelcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
  }

  public SiteEntity welcomeScreen(WelcomeScreenEnum welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
    return this;
  }

   /**
   * Does the welcome screen appear?
   * @return welcomeScreen
  **/
  @ApiModelProperty(example = "user_controlled", value = "Does the welcome screen appear?")
  public WelcomeScreenEnum getWelcomeScreen() {
    return welcomeScreen;
  }

  public void setWelcomeScreen(WelcomeScreenEnum welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
  }

  public SiteEntity windowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
    return this;
  }

   /**
   * Does FTP user Windows emulation mode?
   * @return windowsModeFtp
  **/
  @ApiModelProperty(example = "true", value = "Does FTP user Windows emulation mode?")
  public Boolean isWindowsModeFtp() {
    return windowsModeFtp;
  }

  public void setWindowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
  }

  public SiteEntity disableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
    return this;
  }

   /**
   * If greater than zero, users will unable to login if they do not show activity within this number of days.
   * @return disableUsersFromInactivityPeriodDays
  **/
  @ApiModelProperty(example = "1", value = "If greater than zero, users will unable to login if they do not show activity within this number of days.")
  public Integer getDisableUsersFromInactivityPeriodDays() {
    return disableUsersFromInactivityPeriodDays;
  }

  public void setDisableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteEntity siteEntity = (SiteEntity) o;
    return Objects.equals(this.name, siteEntity.name) &&
        Objects.equals(this.allowed2faMethodSms, siteEntity.allowed2faMethodSms) &&
        Objects.equals(this.allowed2faMethodTotp, siteEntity.allowed2faMethodTotp) &&
        Objects.equals(this.allowed2faMethodU2f, siteEntity.allowed2faMethodU2f) &&
        Objects.equals(this.allowed2faMethodYubi, siteEntity.allowed2faMethodYubi) &&
        Objects.equals(this.adminUserId, siteEntity.adminUserId) &&
        Objects.equals(this.allowBundleNames, siteEntity.allowBundleNames) &&
        Objects.equals(this.allowedCountries, siteEntity.allowedCountries) &&
        Objects.equals(this.allowedIps, siteEntity.allowedIps) &&
        Objects.equals(this.askAboutOverwrites, siteEntity.askAboutOverwrites) &&
        Objects.equals(this.bundleExpiration, siteEntity.bundleExpiration) &&
        Objects.equals(this.bundlePasswordRequired, siteEntity.bundlePasswordRequired) &&
        Objects.equals(this.bundleRequireShareRecipient, siteEntity.bundleRequireShareRecipient) &&
        Objects.equals(this.color2Left, siteEntity.color2Left) &&
        Objects.equals(this.color2Link, siteEntity.color2Link) &&
        Objects.equals(this.color2Text, siteEntity.color2Text) &&
        Objects.equals(this.color2Top, siteEntity.color2Top) &&
        Objects.equals(this.color2TopText, siteEntity.color2TopText) &&
        Objects.equals(this.contactName, siteEntity.contactName) &&
        Objects.equals(this.createdAt, siteEntity.createdAt) &&
        Objects.equals(this.currency, siteEntity.currency) &&
        Objects.equals(this.customNamespace, siteEntity.customNamespace) &&
        Objects.equals(this.daysToRetainBackups, siteEntity.daysToRetainBackups) &&
        Objects.equals(this.defaultTimeZone, siteEntity.defaultTimeZone) &&
        Objects.equals(this.desktopApp, siteEntity.desktopApp) &&
        Objects.equals(this.desktopAppSessionIpPinning, siteEntity.desktopAppSessionIpPinning) &&
        Objects.equals(this.desktopAppSessionLifetime, siteEntity.desktopAppSessionLifetime) &&
        Objects.equals(this.disallowedCountries, siteEntity.disallowedCountries) &&
        Objects.equals(this.disableNotifications, siteEntity.disableNotifications) &&
        Objects.equals(this.disablePasswordReset, siteEntity.disablePasswordReset) &&
        Objects.equals(this.domain, siteEntity.domain) &&
        Objects.equals(this.email, siteEntity.email) &&
        Objects.equals(this.replyToEmail, siteEntity.replyToEmail) &&
        Objects.equals(this.nonSsoGroupsAllowed, siteEntity.nonSsoGroupsAllowed) &&
        Objects.equals(this.nonSsoUsersAllowed, siteEntity.nonSsoUsersAllowed) &&
        Objects.equals(this.folderPermissionsGroupsOnly, siteEntity.folderPermissionsGroupsOnly) &&
        Objects.equals(this.hipaa, siteEntity.hipaa) &&
        Objects.equals(this.icon128, siteEntity.icon128) &&
        Objects.equals(this.icon16, siteEntity.icon16) &&
        Objects.equals(this.icon32, siteEntity.icon32) &&
        Objects.equals(this.icon48, siteEntity.icon48) &&
        Objects.equals(this.immutableFilesSetAt, siteEntity.immutableFilesSetAt) &&
        Objects.equals(this.includePasswordInWelcomeEmail, siteEntity.includePasswordInWelcomeEmail) &&
        Objects.equals(this.language, siteEntity.language) &&
        Objects.equals(this.ldapBaseDn, siteEntity.ldapBaseDn) &&
        Objects.equals(this.ldapDomain, siteEntity.ldapDomain) &&
        Objects.equals(this.ldapEnabled, siteEntity.ldapEnabled) &&
        Objects.equals(this.ldapGroupAction, siteEntity.ldapGroupAction) &&
        Objects.equals(this.ldapGroupExclusion, siteEntity.ldapGroupExclusion) &&
        Objects.equals(this.ldapGroupInclusion, siteEntity.ldapGroupInclusion) &&
        Objects.equals(this.ldapHost, siteEntity.ldapHost) &&
        Objects.equals(this.ldapHost2, siteEntity.ldapHost2) &&
        Objects.equals(this.ldapHost3, siteEntity.ldapHost3) &&
        Objects.equals(this.ldapPort, siteEntity.ldapPort) &&
        Objects.equals(this.ldapSecure, siteEntity.ldapSecure) &&
        Objects.equals(this.ldapType, siteEntity.ldapType) &&
        Objects.equals(this.ldapUserAction, siteEntity.ldapUserAction) &&
        Objects.equals(this.ldapUserIncludeGroups, siteEntity.ldapUserIncludeGroups) &&
        Objects.equals(this.ldapUsername, siteEntity.ldapUsername) &&
        Objects.equals(this.ldapUsernameField, siteEntity.ldapUsernameField) &&
        Objects.equals(this.loginHelpText, siteEntity.loginHelpText) &&
        Objects.equals(this.logo, siteEntity.logo) &&
        Objects.equals(this.maxPriorPasswords, siteEntity.maxPriorPasswords) &&
        Objects.equals(this.nextBillingAmount, siteEntity.nextBillingAmount) &&
        Objects.equals(this.nextBillingDate, siteEntity.nextBillingDate) &&
        Objects.equals(this.officeIntegrationAvailable, siteEntity.officeIntegrationAvailable) &&
        Objects.equals(this.oncehubLink, siteEntity.oncehubLink) &&
        Objects.equals(this.optOutGlobal, siteEntity.optOutGlobal) &&
        Objects.equals(this.overageNotifiedAt, siteEntity.overageNotifiedAt) &&
        Objects.equals(this.overageNotify, siteEntity.overageNotify) &&
        Objects.equals(this.overdue, siteEntity.overdue) &&
        Objects.equals(this.passwordMinLength, siteEntity.passwordMinLength) &&
        Objects.equals(this.passwordRequireLetter, siteEntity.passwordRequireLetter) &&
        Objects.equals(this.passwordRequireMixed, siteEntity.passwordRequireMixed) &&
        Objects.equals(this.passwordRequireNumber, siteEntity.passwordRequireNumber) &&
        Objects.equals(this.passwordRequireSpecial, siteEntity.passwordRequireSpecial) &&
        Objects.equals(this.passwordRequireUnbreached, siteEntity.passwordRequireUnbreached) &&
        Objects.equals(this.passwordRequirementsApplyToBundles, siteEntity.passwordRequirementsApplyToBundles) &&
        Objects.equals(this.passwordValidityDays, siteEntity.passwordValidityDays) &&
        Objects.equals(this.phone, siteEntity.phone) &&
        Objects.equals(this.require2fa, siteEntity.require2fa) &&
        Objects.equals(this.require2faStopTime, siteEntity.require2faStopTime) &&
        Objects.equals(this.require2faUserType, siteEntity.require2faUserType) &&
        Objects.equals(this.session, siteEntity.session) &&
        Objects.equals(this.sessionPinnedByIp, siteEntity.sessionPinnedByIp) &&
        Objects.equals(this.sftpUserRootEnabled, siteEntity.sftpUserRootEnabled) &&
        Objects.equals(this.sharingEnabled, siteEntity.sharingEnabled) &&
        Objects.equals(this.showRequestAccessLink, siteEntity.showRequestAccessLink) &&
        Objects.equals(this.siteFooter, siteEntity.siteFooter) &&
        Objects.equals(this.siteHeader, siteEntity.siteHeader) &&
        Objects.equals(this.smtpAddress, siteEntity.smtpAddress) &&
        Objects.equals(this.smtpAuthentication, siteEntity.smtpAuthentication) &&
        Objects.equals(this.smtpFrom, siteEntity.smtpFrom) &&
        Objects.equals(this.smtpPort, siteEntity.smtpPort) &&
        Objects.equals(this.smtpUsername, siteEntity.smtpUsername) &&
        Objects.equals(this.sessionExpiry, siteEntity.sessionExpiry) &&
        Objects.equals(this.sslRequired, siteEntity.sslRequired) &&
        Objects.equals(this.subdomain, siteEntity.subdomain) &&
        Objects.equals(this.switchToPlanDate, siteEntity.switchToPlanDate) &&
        Objects.equals(this.tlsDisabled, siteEntity.tlsDisabled) &&
        Objects.equals(this.trialDaysLeft, siteEntity.trialDaysLeft) &&
        Objects.equals(this.trialUntil, siteEntity.trialUntil) &&
        Objects.equals(this.updatedAt, siteEntity.updatedAt) &&
        Objects.equals(this.useProvidedModifiedAt, siteEntity.useProvidedModifiedAt) &&
        Objects.equals(this.user, siteEntity.user) &&
        Objects.equals(this.userLockout, siteEntity.userLockout) &&
        Objects.equals(this.userLockoutLockPeriod, siteEntity.userLockoutLockPeriod) &&
        Objects.equals(this.userLockoutTries, siteEntity.userLockoutTries) &&
        Objects.equals(this.userLockoutWithin, siteEntity.userLockoutWithin) &&
        Objects.equals(this.userRequestsEnabled, siteEntity.userRequestsEnabled) &&
        Objects.equals(this.welcomeCustomText, siteEntity.welcomeCustomText) &&
        Objects.equals(this.welcomeEmailCc, siteEntity.welcomeEmailCc) &&
        Objects.equals(this.welcomeEmailEnabled, siteEntity.welcomeEmailEnabled) &&
        Objects.equals(this.welcomeScreen, siteEntity.welcomeScreen) &&
        Objects.equals(this.windowsModeFtp, siteEntity.windowsModeFtp) &&
        Objects.equals(this.disableUsersFromInactivityPeriodDays, siteEntity.disableUsersFromInactivityPeriodDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, allowed2faMethodSms, allowed2faMethodTotp, allowed2faMethodU2f, allowed2faMethodYubi, adminUserId, allowBundleNames, allowedCountries, allowedIps, askAboutOverwrites, bundleExpiration, bundlePasswordRequired, bundleRequireShareRecipient, color2Left, color2Link, color2Text, color2Top, color2TopText, contactName, createdAt, currency, customNamespace, daysToRetainBackups, defaultTimeZone, desktopApp, desktopAppSessionIpPinning, desktopAppSessionLifetime, disallowedCountries, disableNotifications, disablePasswordReset, domain, email, replyToEmail, nonSsoGroupsAllowed, nonSsoUsersAllowed, folderPermissionsGroupsOnly, hipaa, icon128, icon16, icon32, icon48, immutableFilesSetAt, includePasswordInWelcomeEmail, language, ldapBaseDn, ldapDomain, ldapEnabled, ldapGroupAction, ldapGroupExclusion, ldapGroupInclusion, ldapHost, ldapHost2, ldapHost3, ldapPort, ldapSecure, ldapType, ldapUserAction, ldapUserIncludeGroups, ldapUsername, ldapUsernameField, loginHelpText, logo, maxPriorPasswords, nextBillingAmount, nextBillingDate, officeIntegrationAvailable, oncehubLink, optOutGlobal, overageNotifiedAt, overageNotify, overdue, passwordMinLength, passwordRequireLetter, passwordRequireMixed, passwordRequireNumber, passwordRequireSpecial, passwordRequireUnbreached, passwordRequirementsApplyToBundles, passwordValidityDays, phone, require2fa, require2faStopTime, require2faUserType, session, sessionPinnedByIp, sftpUserRootEnabled, sharingEnabled, showRequestAccessLink, siteFooter, siteHeader, smtpAddress, smtpAuthentication, smtpFrom, smtpPort, smtpUsername, sessionExpiry, sslRequired, subdomain, switchToPlanDate, tlsDisabled, trialDaysLeft, trialUntil, updatedAt, useProvidedModifiedAt, user, userLockout, userLockoutLockPeriod, userLockoutTries, userLockoutWithin, userRequestsEnabled, welcomeCustomText, welcomeEmailCc, welcomeEmailEnabled, welcomeScreen, windowsModeFtp, disableUsersFromInactivityPeriodDays);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteEntity {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allowed2faMethodSms: ").append(toIndentedString(allowed2faMethodSms)).append("\n");
    sb.append("    allowed2faMethodTotp: ").append(toIndentedString(allowed2faMethodTotp)).append("\n");
    sb.append("    allowed2faMethodU2f: ").append(toIndentedString(allowed2faMethodU2f)).append("\n");
    sb.append("    allowed2faMethodYubi: ").append(toIndentedString(allowed2faMethodYubi)).append("\n");
    sb.append("    adminUserId: ").append(toIndentedString(adminUserId)).append("\n");
    sb.append("    allowBundleNames: ").append(toIndentedString(allowBundleNames)).append("\n");
    sb.append("    allowedCountries: ").append(toIndentedString(allowedCountries)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    askAboutOverwrites: ").append(toIndentedString(askAboutOverwrites)).append("\n");
    sb.append("    bundleExpiration: ").append(toIndentedString(bundleExpiration)).append("\n");
    sb.append("    bundlePasswordRequired: ").append(toIndentedString(bundlePasswordRequired)).append("\n");
    sb.append("    bundleRequireShareRecipient: ").append(toIndentedString(bundleRequireShareRecipient)).append("\n");
    sb.append("    color2Left: ").append(toIndentedString(color2Left)).append("\n");
    sb.append("    color2Link: ").append(toIndentedString(color2Link)).append("\n");
    sb.append("    color2Text: ").append(toIndentedString(color2Text)).append("\n");
    sb.append("    color2Top: ").append(toIndentedString(color2Top)).append("\n");
    sb.append("    color2TopText: ").append(toIndentedString(color2TopText)).append("\n");
    sb.append("    contactName: ").append(toIndentedString(contactName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    customNamespace: ").append(toIndentedString(customNamespace)).append("\n");
    sb.append("    daysToRetainBackups: ").append(toIndentedString(daysToRetainBackups)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    desktopApp: ").append(toIndentedString(desktopApp)).append("\n");
    sb.append("    desktopAppSessionIpPinning: ").append(toIndentedString(desktopAppSessionIpPinning)).append("\n");
    sb.append("    desktopAppSessionLifetime: ").append(toIndentedString(desktopAppSessionLifetime)).append("\n");
    sb.append("    disallowedCountries: ").append(toIndentedString(disallowedCountries)).append("\n");
    sb.append("    disableNotifications: ").append(toIndentedString(disableNotifications)).append("\n");
    sb.append("    disablePasswordReset: ").append(toIndentedString(disablePasswordReset)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    replyToEmail: ").append(toIndentedString(replyToEmail)).append("\n");
    sb.append("    nonSsoGroupsAllowed: ").append(toIndentedString(nonSsoGroupsAllowed)).append("\n");
    sb.append("    nonSsoUsersAllowed: ").append(toIndentedString(nonSsoUsersAllowed)).append("\n");
    sb.append("    folderPermissionsGroupsOnly: ").append(toIndentedString(folderPermissionsGroupsOnly)).append("\n");
    sb.append("    hipaa: ").append(toIndentedString(hipaa)).append("\n");
    sb.append("    icon128: ").append(toIndentedString(icon128)).append("\n");
    sb.append("    icon16: ").append(toIndentedString(icon16)).append("\n");
    sb.append("    icon32: ").append(toIndentedString(icon32)).append("\n");
    sb.append("    icon48: ").append(toIndentedString(icon48)).append("\n");
    sb.append("    immutableFilesSetAt: ").append(toIndentedString(immutableFilesSetAt)).append("\n");
    sb.append("    includePasswordInWelcomeEmail: ").append(toIndentedString(includePasswordInWelcomeEmail)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    ldapBaseDn: ").append(toIndentedString(ldapBaseDn)).append("\n");
    sb.append("    ldapDomain: ").append(toIndentedString(ldapDomain)).append("\n");
    sb.append("    ldapEnabled: ").append(toIndentedString(ldapEnabled)).append("\n");
    sb.append("    ldapGroupAction: ").append(toIndentedString(ldapGroupAction)).append("\n");
    sb.append("    ldapGroupExclusion: ").append(toIndentedString(ldapGroupExclusion)).append("\n");
    sb.append("    ldapGroupInclusion: ").append(toIndentedString(ldapGroupInclusion)).append("\n");
    sb.append("    ldapHost: ").append(toIndentedString(ldapHost)).append("\n");
    sb.append("    ldapHost2: ").append(toIndentedString(ldapHost2)).append("\n");
    sb.append("    ldapHost3: ").append(toIndentedString(ldapHost3)).append("\n");
    sb.append("    ldapPort: ").append(toIndentedString(ldapPort)).append("\n");
    sb.append("    ldapSecure: ").append(toIndentedString(ldapSecure)).append("\n");
    sb.append("    ldapType: ").append(toIndentedString(ldapType)).append("\n");
    sb.append("    ldapUserAction: ").append(toIndentedString(ldapUserAction)).append("\n");
    sb.append("    ldapUserIncludeGroups: ").append(toIndentedString(ldapUserIncludeGroups)).append("\n");
    sb.append("    ldapUsername: ").append(toIndentedString(ldapUsername)).append("\n");
    sb.append("    ldapUsernameField: ").append(toIndentedString(ldapUsernameField)).append("\n");
    sb.append("    loginHelpText: ").append(toIndentedString(loginHelpText)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    maxPriorPasswords: ").append(toIndentedString(maxPriorPasswords)).append("\n");
    sb.append("    nextBillingAmount: ").append(toIndentedString(nextBillingAmount)).append("\n");
    sb.append("    nextBillingDate: ").append(toIndentedString(nextBillingDate)).append("\n");
    sb.append("    officeIntegrationAvailable: ").append(toIndentedString(officeIntegrationAvailable)).append("\n");
    sb.append("    oncehubLink: ").append(toIndentedString(oncehubLink)).append("\n");
    sb.append("    optOutGlobal: ").append(toIndentedString(optOutGlobal)).append("\n");
    sb.append("    overageNotifiedAt: ").append(toIndentedString(overageNotifiedAt)).append("\n");
    sb.append("    overageNotify: ").append(toIndentedString(overageNotify)).append("\n");
    sb.append("    overdue: ").append(toIndentedString(overdue)).append("\n");
    sb.append("    passwordMinLength: ").append(toIndentedString(passwordMinLength)).append("\n");
    sb.append("    passwordRequireLetter: ").append(toIndentedString(passwordRequireLetter)).append("\n");
    sb.append("    passwordRequireMixed: ").append(toIndentedString(passwordRequireMixed)).append("\n");
    sb.append("    passwordRequireNumber: ").append(toIndentedString(passwordRequireNumber)).append("\n");
    sb.append("    passwordRequireSpecial: ").append(toIndentedString(passwordRequireSpecial)).append("\n");
    sb.append("    passwordRequireUnbreached: ").append(toIndentedString(passwordRequireUnbreached)).append("\n");
    sb.append("    passwordRequirementsApplyToBundles: ").append(toIndentedString(passwordRequirementsApplyToBundles)).append("\n");
    sb.append("    passwordValidityDays: ").append(toIndentedString(passwordValidityDays)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    require2fa: ").append(toIndentedString(require2fa)).append("\n");
    sb.append("    require2faStopTime: ").append(toIndentedString(require2faStopTime)).append("\n");
    sb.append("    require2faUserType: ").append(toIndentedString(require2faUserType)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    sessionPinnedByIp: ").append(toIndentedString(sessionPinnedByIp)).append("\n");
    sb.append("    sftpUserRootEnabled: ").append(toIndentedString(sftpUserRootEnabled)).append("\n");
    sb.append("    sharingEnabled: ").append(toIndentedString(sharingEnabled)).append("\n");
    sb.append("    showRequestAccessLink: ").append(toIndentedString(showRequestAccessLink)).append("\n");
    sb.append("    siteFooter: ").append(toIndentedString(siteFooter)).append("\n");
    sb.append("    siteHeader: ").append(toIndentedString(siteHeader)).append("\n");
    sb.append("    smtpAddress: ").append(toIndentedString(smtpAddress)).append("\n");
    sb.append("    smtpAuthentication: ").append(toIndentedString(smtpAuthentication)).append("\n");
    sb.append("    smtpFrom: ").append(toIndentedString(smtpFrom)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    sessionExpiry: ").append(toIndentedString(sessionExpiry)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    switchToPlanDate: ").append(toIndentedString(switchToPlanDate)).append("\n");
    sb.append("    tlsDisabled: ").append(toIndentedString(tlsDisabled)).append("\n");
    sb.append("    trialDaysLeft: ").append(toIndentedString(trialDaysLeft)).append("\n");
    sb.append("    trialUntil: ").append(toIndentedString(trialUntil)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    useProvidedModifiedAt: ").append(toIndentedString(useProvidedModifiedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userLockout: ").append(toIndentedString(userLockout)).append("\n");
    sb.append("    userLockoutLockPeriod: ").append(toIndentedString(userLockoutLockPeriod)).append("\n");
    sb.append("    userLockoutTries: ").append(toIndentedString(userLockoutTries)).append("\n");
    sb.append("    userLockoutWithin: ").append(toIndentedString(userLockoutWithin)).append("\n");
    sb.append("    userRequestsEnabled: ").append(toIndentedString(userRequestsEnabled)).append("\n");
    sb.append("    welcomeCustomText: ").append(toIndentedString(welcomeCustomText)).append("\n");
    sb.append("    welcomeEmailCc: ").append(toIndentedString(welcomeEmailCc)).append("\n");
    sb.append("    welcomeEmailEnabled: ").append(toIndentedString(welcomeEmailEnabled)).append("\n");
    sb.append("    welcomeScreen: ").append(toIndentedString(welcomeScreen)).append("\n");
    sb.append("    windowsModeFtp: ").append(toIndentedString(windowsModeFtp)).append("\n");
    sb.append("    disableUsersFromInactivityPeriodDays: ").append(toIndentedString(disableUsersFromInactivityPeriodDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

