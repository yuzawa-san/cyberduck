/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.brick.io.swagger.client.model.PreviewEntity;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import org.joda.time.DateTime;
/**
 * List Folders by path
 */
@Schema(description = "List Folders by path")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-23T20:47:00.742522+02:00[Europe/Paris]")
public class FileEntity {
  @JsonProperty("path")
  private String path = null;

  @JsonProperty("display_name")
  private String displayName = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("size")
  private Integer size = null;

  @JsonProperty("mtime")
  private DateTime mtime = null;

  @JsonProperty("provided_mtime")
  private DateTime providedMtime = null;

  @JsonProperty("crc32")
  private String crc32 = null;

  @JsonProperty("md5")
  private String md5 = null;

  @JsonProperty("mime_type")
  private String mimeType = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("permissions")
  private String permissions = null;

  @JsonProperty("subfolders_locked?")
  private Boolean subfoldersLocked = null;

  @JsonProperty("download_uri")
  private String downloadUri = null;

  @JsonProperty("priority_color")
  private String priorityColor = null;

  @JsonProperty("preview_id")
  private Integer previewId = null;

  @JsonProperty("preview")
  private PreviewEntity preview = null;

  public FileEntity path(String path) {
    this.path = path;
    return this;
  }

   /**
   * File/Folder path
   * @return path
  **/
  @Schema(example = "path/file.txt", description = "File/Folder path")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public FileEntity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * File/Folder display name
   * @return displayName
  **/
  @Schema(example = "file.txt", description = "File/Folder display name")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public FileEntity type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type: &#x60;directory&#x60; or &#x60;file&#x60;.
   * @return type
  **/
  @Schema(example = "file", description = "Type: `directory` or `file`.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public FileEntity size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * File/Folder size
   * @return size
  **/
  @Schema(example = "1024", description = "File/Folder size")
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }

  public FileEntity mtime(DateTime mtime) {
    this.mtime = mtime;
    return this;
  }

   /**
   * File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.
   * @return mtime
  **/
  @Schema(description = "File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.")
  public DateTime getMtime() {
    return mtime;
  }

  public void setMtime(DateTime mtime) {
    this.mtime = mtime;
  }

  public FileEntity providedMtime(DateTime providedMtime) {
    this.providedMtime = providedMtime;
    return this;
  }

   /**
   * File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop&lt;-&gt;Cloud syncing to preserve modified at times.
   * @return providedMtime
  **/
  @Schema(description = "File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop<->Cloud syncing to preserve modified at times.")
  public DateTime getProvidedMtime() {
    return providedMtime;
  }

  public void setProvidedMtime(DateTime providedMtime) {
    this.providedMtime = providedMtime;
  }

  public FileEntity crc32(String crc32) {
    this.crc32 = crc32;
    return this;
  }

   /**
   * File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
   * @return crc32
  **/
  @Schema(example = "70976923", description = "File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.")
  public String getCrc32() {
    return crc32;
  }

  public void setCrc32(String crc32) {
    this.crc32 = crc32;
  }

  public FileEntity md5(String md5) {
    this.md5 = md5;
    return this;
  }

   /**
   * File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
   * @return md5
  **/
  @Schema(example = "17c54824e9931a4688ca032d03f6663c", description = "File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.")
  public String getMd5() {
    return md5;
  }

  public void setMd5(String md5) {
    this.md5 = md5;
  }

  public FileEntity mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * MIME Type.  This is determined by the filename extension and is not stored separately internally.
   * @return mimeType
  **/
  @Schema(example = "application/octet-stream", description = "MIME Type.  This is determined by the filename extension and is not stored separately internally.")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public FileEntity region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Region location
   * @return region
  **/
  @Schema(example = "us-east-1", description = "Region location")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public FileEntity permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

   /**
   * A short string representing the current user&#x27;s permissions.  Can be &#x60;r&#x60;,&#x60;w&#x60;,&#x60;p&#x60;, or any combination
   * @return permissions
  **/
  @Schema(example = "rpw", description = "A short string representing the current user's permissions.  Can be `r`,`w`,`p`, or any combination")
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }

  public FileEntity subfoldersLocked(Boolean subfoldersLocked) {
    this.subfoldersLocked = subfoldersLocked;
    return this;
  }

   /**
   * Are subfolders locked and unable to be modified?
   * @return subfoldersLocked
  **/
  @Schema(example = "true", description = "Are subfolders locked and unable to be modified?")
  public Boolean isSubfoldersLocked() {
    return subfoldersLocked;
  }

  public void setSubfoldersLocked(Boolean subfoldersLocked) {
    this.subfoldersLocked = subfoldersLocked;
  }

  public FileEntity downloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
    return this;
  }

   /**
   * Link to download file. Provided only in response to a download request.
   * @return downloadUri
  **/
  @Schema(example = "https://mysite.files.com/...", description = "Link to download file. Provided only in response to a download request.")
  public String getDownloadUri() {
    return downloadUri;
  }

  public void setDownloadUri(String downloadUri) {
    this.downloadUri = downloadUri;
  }

  public FileEntity priorityColor(String priorityColor) {
    this.priorityColor = priorityColor;
    return this;
  }

   /**
   * Bookmark/priority color of file/folder
   * @return priorityColor
  **/
  @Schema(example = "red", description = "Bookmark/priority color of file/folder")
  public String getPriorityColor() {
    return priorityColor;
  }

  public void setPriorityColor(String priorityColor) {
    this.priorityColor = priorityColor;
  }

  public FileEntity previewId(Integer previewId) {
    this.previewId = previewId;
    return this;
  }

   /**
   * File preview ID
   * @return previewId
  **/
  @Schema(example = "1", description = "File preview ID")
  public Integer getPreviewId() {
    return previewId;
  }

  public void setPreviewId(Integer previewId) {
    this.previewId = previewId;
  }

  public FileEntity preview(PreviewEntity preview) {
    this.preview = preview;
    return this;
  }

   /**
   * Get preview
   * @return preview
  **/
  @Schema(description = "")
  public PreviewEntity getPreview() {
    return preview;
  }

  public void setPreview(PreviewEntity preview) {
    this.preview = preview;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileEntity fileEntity = (FileEntity) o;
    return Objects.equals(this.path, fileEntity.path) &&
        Objects.equals(this.displayName, fileEntity.displayName) &&
        Objects.equals(this.type, fileEntity.type) &&
        Objects.equals(this.size, fileEntity.size) &&
        Objects.equals(this.mtime, fileEntity.mtime) &&
        Objects.equals(this.providedMtime, fileEntity.providedMtime) &&
        Objects.equals(this.crc32, fileEntity.crc32) &&
        Objects.equals(this.md5, fileEntity.md5) &&
        Objects.equals(this.mimeType, fileEntity.mimeType) &&
        Objects.equals(this.region, fileEntity.region) &&
        Objects.equals(this.permissions, fileEntity.permissions) &&
        Objects.equals(this.subfoldersLocked, fileEntity.subfoldersLocked) &&
        Objects.equals(this.downloadUri, fileEntity.downloadUri) &&
        Objects.equals(this.priorityColor, fileEntity.priorityColor) &&
        Objects.equals(this.previewId, fileEntity.previewId) &&
        Objects.equals(this.preview, fileEntity.preview);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, displayName, type, size, mtime, providedMtime, crc32, md5, mimeType, region, permissions, subfoldersLocked, downloadUri, priorityColor, previewId, preview);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileEntity {\n");
    
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    mtime: ").append(toIndentedString(mtime)).append("\n");
    sb.append("    providedMtime: ").append(toIndentedString(providedMtime)).append("\n");
    sb.append("    crc32: ").append(toIndentedString(crc32)).append("\n");
    sb.append("    md5: ").append(toIndentedString(md5)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    subfoldersLocked: ").append(toIndentedString(subfoldersLocked)).append("\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("    priorityColor: ").append(toIndentedString(priorityColor)).append("\n");
    sb.append("    previewId: ").append(toIndentedString(previewId)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
