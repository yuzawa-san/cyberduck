/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * List Permissions
 */
@Schema(description = "List Permissions")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-23T20:47:00.742522+02:00[Europe/Paris]")
public class PermissionEntity {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("user_id")
  private Integer userId = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("group_id")
  private Integer groupId = null;

  @JsonProperty("group_name")
  private String groupName = null;

  /**
   * Permission type
   */
  public enum PermissionEnum {
    FULL("full"),
    READONLY("readonly"),
    WRITEONLY("writeonly"),
    LIST("list"),
    HISTORY("history"),
    ADMIN("admin"),
    BUNDLE("bundle");

    private String value;

    PermissionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static PermissionEnum fromValue(String text) {
      for (PermissionEnum b : PermissionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("permission")
  private PermissionEnum permission = null;

  @JsonProperty("recursive")
  private Boolean recursive = null;

  public PermissionEntity id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Permission ID
   * @return id
  **/
  @Schema(example = "1", description = "Permission ID")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public PermissionEntity path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Folder path
   * @return path
  **/
  @Schema(description = "Folder path")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public PermissionEntity userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * User ID
   * @return userId
  **/
  @Schema(example = "1", description = "User ID")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public PermissionEntity username(String username) {
    this.username = username;
    return this;
  }

   /**
   * User&#x27;s username
   * @return username
  **/
  @Schema(example = "Sser", description = "User's username")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public PermissionEntity groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Group ID
   * @return groupId
  **/
  @Schema(example = "0", description = "Group ID")
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public PermissionEntity groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

   /**
   * Group name if applicable
   * @return groupName
  **/
  @Schema(description = "Group name if applicable")
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }

  public PermissionEntity permission(PermissionEnum permission) {
    this.permission = permission;
    return this;
  }

   /**
   * Permission type
   * @return permission
  **/
  @Schema(example = "full", description = "Permission type")
  public PermissionEnum getPermission() {
    return permission;
  }

  public void setPermission(PermissionEnum permission) {
    this.permission = permission;
  }

  public PermissionEntity recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

   /**
   * Does this permission apply to subfolders?
   * @return recursive
  **/
  @Schema(example = "true", description = "Does this permission apply to subfolders?")
  public Boolean isRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PermissionEntity permissionEntity = (PermissionEntity) o;
    return Objects.equals(this.id, permissionEntity.id) &&
        Objects.equals(this.path, permissionEntity.path) &&
        Objects.equals(this.userId, permissionEntity.userId) &&
        Objects.equals(this.username, permissionEntity.username) &&
        Objects.equals(this.groupId, permissionEntity.groupId) &&
        Objects.equals(this.groupName, permissionEntity.groupName) &&
        Objects.equals(this.permission, permissionEntity.permission) &&
        Objects.equals(this.recursive, permissionEntity.recursive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, path, userId, username, groupId, groupName, permission, recursive);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PermissionEntity {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
