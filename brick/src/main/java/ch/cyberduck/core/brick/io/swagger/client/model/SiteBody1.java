/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
/**
 * SiteBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-12T10:20:43.848213+02:00[Europe/Paris]")
public class SiteBody1 {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("subdomain")
  private String subdomain = null;

  @JsonProperty("domain")
  private String domain = null;

  @JsonProperty("email")
  private String email = null;

  @JsonProperty("reply_to_email")
  private String replyToEmail = null;

  @JsonProperty("allow_bundle_names")
  private Boolean allowBundleNames = null;

  @JsonProperty("bundle_expiration")
  private Integer bundleExpiration = null;

  @JsonProperty("overage_notify")
  private Boolean overageNotify = null;

  @JsonProperty("welcome_email_enabled")
  private Boolean welcomeEmailEnabled = null;

  @JsonProperty("ask_about_overwrites")
  private Boolean askAboutOverwrites = null;

  @JsonProperty("show_request_access_link")
  private Boolean showRequestAccessLink = null;

  @JsonProperty("welcome_email_cc")
  private String welcomeEmailCc = null;

  @JsonProperty("welcome_custom_text")
  private String welcomeCustomText = null;

  @JsonProperty("language")
  private String language = null;

  @JsonProperty("windows_mode_ftp")
  private Boolean windowsModeFtp = null;

  @JsonProperty("default_time_zone")
  private String defaultTimeZone = null;

  @JsonProperty("desktop_app")
  private Boolean desktopApp = null;

  @JsonProperty("desktop_app_session_ip_pinning")
  private Boolean desktopAppSessionIpPinning = null;

  @JsonProperty("desktop_app_session_lifetime")
  private Integer desktopAppSessionLifetime = null;

  @JsonProperty("folder_permissions_groups_only")
  private Boolean folderPermissionsGroupsOnly = null;

  @JsonProperty("welcome_screen")
  private String welcomeScreen = null;

  @JsonProperty("office_integration_available")
  private Boolean officeIntegrationAvailable = null;

  @JsonProperty("session_expiry")
  private Double sessionExpiry = null;

  @JsonProperty("ssl_required")
  private Boolean sslRequired = null;

  @JsonProperty("tls_disabled")
  private Boolean tlsDisabled = null;

  @JsonProperty("user_lockout")
  private Boolean userLockout = null;

  @JsonProperty("user_lockout_tries")
  private Integer userLockoutTries = null;

  @JsonProperty("user_lockout_within")
  private Integer userLockoutWithin = null;

  @JsonProperty("user_lockout_lock_period")
  private Integer userLockoutLockPeriod = null;

  @JsonProperty("include_password_in_welcome_email")
  private Boolean includePasswordInWelcomeEmail = null;

  @JsonProperty("allowed_countries")
  private String allowedCountries = null;

  @JsonProperty("allowed_ips")
  private String allowedIps = null;

  @JsonProperty("disallowed_countries")
  private String disallowedCountries = null;

  @JsonProperty("days_to_retain_backups")
  private Integer daysToRetainBackups = null;

  @JsonProperty("max_prior_passwords")
  private Integer maxPriorPasswords = null;

  @JsonProperty("password_validity_days")
  private Integer passwordValidityDays = null;

  @JsonProperty("password_min_length")
  private Integer passwordMinLength = null;

  @JsonProperty("password_require_letter")
  private Boolean passwordRequireLetter = null;

  @JsonProperty("password_require_mixed")
  private Boolean passwordRequireMixed = null;

  @JsonProperty("password_require_special")
  private Boolean passwordRequireSpecial = null;

  @JsonProperty("password_require_number")
  private Boolean passwordRequireNumber = null;

  @JsonProperty("password_require_unbreached")
  private Boolean passwordRequireUnbreached = null;

  @JsonProperty("sftp_user_root_enabled")
  private Boolean sftpUserRootEnabled = null;

  @JsonProperty("disable_password_reset")
  private Boolean disablePasswordReset = null;

  @JsonProperty("immutable_files")
  private Boolean immutableFiles = null;

  @JsonProperty("session_pinned_by_ip")
  private Boolean sessionPinnedByIp = null;

  @JsonProperty("bundle_password_required")
  private Boolean bundlePasswordRequired = null;

  @JsonProperty("bundle_require_share_recipient")
  private Boolean bundleRequireShareRecipient = null;

  @JsonProperty("password_requirements_apply_to_bundles")
  private Boolean passwordRequirementsApplyToBundles = null;

  @JsonProperty("opt_out_global")
  private Boolean optOutGlobal = null;

  @JsonProperty("use_provided_modified_at")
  private Boolean useProvidedModifiedAt = null;

  @JsonProperty("custom_namespace")
  private Boolean customNamespace = null;

  @JsonProperty("disable_users_from_inactivity_period_days")
  private Integer disableUsersFromInactivityPeriodDays = null;

  @JsonProperty("non_sso_groups_allowed")
  private Boolean nonSsoGroupsAllowed = null;

  @JsonProperty("non_sso_users_allowed")
  private Boolean nonSsoUsersAllowed = null;

  @JsonProperty("sharing_enabled")
  private Boolean sharingEnabled = null;

  @JsonProperty("user_requests_enabled")
  private Boolean userRequestsEnabled = null;

  @JsonProperty("allowed_2fa_method_sms")
  private Boolean allowed2faMethodSms = null;

  @JsonProperty("allowed_2fa_method_u2f")
  private Boolean allowed2faMethodU2f = null;

  @JsonProperty("allowed_2fa_method_totp")
  private Boolean allowed2faMethodTotp = null;

  @JsonProperty("allowed_2fa_method_yubi")
  private Boolean allowed2faMethodYubi = null;

  @JsonProperty("require_2fa")
  private Boolean require2fa = null;

  @JsonProperty("require_2fa_user_type")
  private String require2faUserType = null;

  @JsonProperty("color2_top")
  private String color2Top = null;

  @JsonProperty("color2_left")
  private String color2Left = null;

  @JsonProperty("color2_link")
  private String color2Link = null;

  @JsonProperty("color2_text")
  private String color2Text = null;

  @JsonProperty("color2_top_text")
  private String color2TopText = null;

  @JsonProperty("site_header")
  private String siteHeader = null;

  @JsonProperty("site_footer")
  private String siteFooter = null;

  @JsonProperty("login_help_text")
  private String loginHelpText = null;

  @JsonProperty("smtp_address")
  private String smtpAddress = null;

  @JsonProperty("smtp_authentication")
  private String smtpAuthentication = null;

  @JsonProperty("smtp_from")
  private String smtpFrom = null;

  @JsonProperty("smtp_username")
  private String smtpUsername = null;

  @JsonProperty("smtp_port")
  private Integer smtpPort = null;

  @JsonProperty("ldap_enabled")
  private Boolean ldapEnabled = null;

  @JsonProperty("ldap_type")
  private String ldapType = null;

  @JsonProperty("ldap_host")
  private String ldapHost = null;

  @JsonProperty("ldap_host_2")
  private String ldapHost2 = null;

  @JsonProperty("ldap_host_3")
  private String ldapHost3 = null;

  @JsonProperty("ldap_port")
  private Integer ldapPort = null;

  @JsonProperty("ldap_secure")
  private Boolean ldapSecure = null;

  @JsonProperty("ldap_username")
  private String ldapUsername = null;

  @JsonProperty("ldap_username_field")
  private String ldapUsernameField = null;

  @JsonProperty("ldap_domain")
  private String ldapDomain = null;

  @JsonProperty("ldap_user_action")
  private String ldapUserAction = null;

  @JsonProperty("ldap_group_action")
  private String ldapGroupAction = null;

  @JsonProperty("ldap_user_include_groups")
  private String ldapUserIncludeGroups = null;

  @JsonProperty("ldap_group_exclusion")
  private String ldapGroupExclusion = null;

  @JsonProperty("ldap_group_inclusion")
  private String ldapGroupInclusion = null;

  @JsonProperty("ldap_base_dn")
  private String ldapBaseDn = null;

  @JsonProperty("icon16_file")
  private File icon16File = null;

  @JsonProperty("icon16_delete")
  private Boolean icon16Delete = null;

  @JsonProperty("icon32_file")
  private File icon32File = null;

  @JsonProperty("icon32_delete")
  private Boolean icon32Delete = null;

  @JsonProperty("icon48_file")
  private File icon48File = null;

  @JsonProperty("icon48_delete")
  private Boolean icon48Delete = null;

  @JsonProperty("icon128_file")
  private File icon128File = null;

  @JsonProperty("icon128_delete")
  private Boolean icon128Delete = null;

  @JsonProperty("logo_file")
  private File logoFile = null;

  @JsonProperty("logo_delete")
  private Boolean logoDelete = null;

  @JsonProperty("disable_2fa_with_delay")
  private Boolean disable2faWithDelay = null;

  @JsonProperty("ldap_password_change")
  private String ldapPasswordChange = null;

  @JsonProperty("ldap_password_change_confirmation")
  private String ldapPasswordChangeConfirmation = null;

  @JsonProperty("smtp_password")
  private String smtpPassword = null;

  public SiteBody1 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Site name
   * @return name
  **/
  @Schema(description = "Site name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SiteBody1 subdomain(String subdomain) {
    this.subdomain = subdomain;
    return this;
  }

   /**
   * Site subdomain
   * @return subdomain
  **/
  @Schema(description = "Site subdomain")
  public String getSubdomain() {
    return subdomain;
  }

  public void setSubdomain(String subdomain) {
    this.subdomain = subdomain;
  }

  public SiteBody1 domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Custom domain
   * @return domain
  **/
  @Schema(description = "Custom domain")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public SiteBody1 email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Main email for this site
   * @return email
  **/
  @Schema(description = "Main email for this site")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public SiteBody1 replyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
    return this;
  }

   /**
   * Reply-to email for this site
   * @return replyToEmail
  **/
  @Schema(description = "Reply-to email for this site")
  public String getReplyToEmail() {
    return replyToEmail;
  }

  public void setReplyToEmail(String replyToEmail) {
    this.replyToEmail = replyToEmail;
  }

  public SiteBody1 allowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
    return this;
  }

   /**
   * Are manual Bundle names allowed?
   * @return allowBundleNames
  **/
  @Schema(description = "Are manual Bundle names allowed?")
  public Boolean isAllowBundleNames() {
    return allowBundleNames;
  }

  public void setAllowBundleNames(Boolean allowBundleNames) {
    this.allowBundleNames = allowBundleNames;
  }

  public SiteBody1 bundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
    return this;
  }

   /**
   * Site-wide Bundle expiration in days
   * @return bundleExpiration
  **/
  @Schema(description = "Site-wide Bundle expiration in days")
  public Integer getBundleExpiration() {
    return bundleExpiration;
  }

  public void setBundleExpiration(Integer bundleExpiration) {
    this.bundleExpiration = bundleExpiration;
  }

  public SiteBody1 overageNotify(Boolean overageNotify) {
    this.overageNotify = overageNotify;
    return this;
  }

   /**
   * Notify site email of overages?
   * @return overageNotify
  **/
  @Schema(description = "Notify site email of overages?")
  public Boolean isOverageNotify() {
    return overageNotify;
  }

  public void setOverageNotify(Boolean overageNotify) {
    this.overageNotify = overageNotify;
  }

  public SiteBody1 welcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
    return this;
  }

   /**
   * Will the welcome email be sent to new users?
   * @return welcomeEmailEnabled
  **/
  @Schema(description = "Will the welcome email be sent to new users?")
  public Boolean isWelcomeEmailEnabled() {
    return welcomeEmailEnabled;
  }

  public void setWelcomeEmailEnabled(Boolean welcomeEmailEnabled) {
    this.welcomeEmailEnabled = welcomeEmailEnabled;
  }

  public SiteBody1 askAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
    return this;
  }

   /**
   * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
   * @return askAboutOverwrites
  **/
  @Schema(description = "If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.")
  public Boolean isAskAboutOverwrites() {
    return askAboutOverwrites;
  }

  public void setAskAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
  }

  public SiteBody1 showRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
    return this;
  }

   /**
   * Show request access link for users without access?  Currently unused.
   * @return showRequestAccessLink
  **/
  @Schema(description = "Show request access link for users without access?  Currently unused.")
  public Boolean isShowRequestAccessLink() {
    return showRequestAccessLink;
  }

  public void setShowRequestAccessLink(Boolean showRequestAccessLink) {
    this.showRequestAccessLink = showRequestAccessLink;
  }

  public SiteBody1 welcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
    return this;
  }

   /**
   * Include this email in welcome emails if enabled
   * @return welcomeEmailCc
  **/
  @Schema(description = "Include this email in welcome emails if enabled")
  public String getWelcomeEmailCc() {
    return welcomeEmailCc;
  }

  public void setWelcomeEmailCc(String welcomeEmailCc) {
    this.welcomeEmailCc = welcomeEmailCc;
  }

  public SiteBody1 welcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
    return this;
  }

   /**
   * Custom text send in user welcome email
   * @return welcomeCustomText
  **/
  @Schema(description = "Custom text send in user welcome email")
  public String getWelcomeCustomText() {
    return welcomeCustomText;
  }

  public void setWelcomeCustomText(String welcomeCustomText) {
    this.welcomeCustomText = welcomeCustomText;
  }

  public SiteBody1 language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Site default language
   * @return language
  **/
  @Schema(description = "Site default language")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public SiteBody1 windowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
    return this;
  }

   /**
   * Does FTP user Windows emulation mode?
   * @return windowsModeFtp
  **/
  @Schema(description = "Does FTP user Windows emulation mode?")
  public Boolean isWindowsModeFtp() {
    return windowsModeFtp;
  }

  public void setWindowsModeFtp(Boolean windowsModeFtp) {
    this.windowsModeFtp = windowsModeFtp;
  }

  public SiteBody1 defaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
    return this;
  }

   /**
   * Site default time zone
   * @return defaultTimeZone
  **/
  @Schema(description = "Site default time zone")
  public String getDefaultTimeZone() {
    return defaultTimeZone;
  }

  public void setDefaultTimeZone(String defaultTimeZone) {
    this.defaultTimeZone = defaultTimeZone;
  }

  public SiteBody1 desktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
    return this;
  }

   /**
   * Is the desktop app enabled?
   * @return desktopApp
  **/
  @Schema(description = "Is the desktop app enabled?")
  public Boolean isDesktopApp() {
    return desktopApp;
  }

  public void setDesktopApp(Boolean desktopApp) {
    this.desktopApp = desktopApp;
  }

  public SiteBody1 desktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
    return this;
  }

   /**
   * Is desktop app session IP pinning enabled?
   * @return desktopAppSessionIpPinning
  **/
  @Schema(description = "Is desktop app session IP pinning enabled?")
  public Boolean isDesktopAppSessionIpPinning() {
    return desktopAppSessionIpPinning;
  }

  public void setDesktopAppSessionIpPinning(Boolean desktopAppSessionIpPinning) {
    this.desktopAppSessionIpPinning = desktopAppSessionIpPinning;
  }

  public SiteBody1 desktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
    return this;
  }

   /**
   * Desktop app session lifetime (in hours)
   * @return desktopAppSessionLifetime
  **/
  @Schema(description = "Desktop app session lifetime (in hours)")
  public Integer getDesktopAppSessionLifetime() {
    return desktopAppSessionLifetime;
  }

  public void setDesktopAppSessionLifetime(Integer desktopAppSessionLifetime) {
    this.desktopAppSessionLifetime = desktopAppSessionLifetime;
  }

  public SiteBody1 folderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
    return this;
  }

   /**
   * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
   * @return folderPermissionsGroupsOnly
  **/
  @Schema(description = "If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.")
  public Boolean isFolderPermissionsGroupsOnly() {
    return folderPermissionsGroupsOnly;
  }

  public void setFolderPermissionsGroupsOnly(Boolean folderPermissionsGroupsOnly) {
    this.folderPermissionsGroupsOnly = folderPermissionsGroupsOnly;
  }

  public SiteBody1 welcomeScreen(String welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
    return this;
  }

   /**
   * Does the welcome screen appear?
   * @return welcomeScreen
  **/
  @Schema(description = "Does the welcome screen appear?")
  public String getWelcomeScreen() {
    return welcomeScreen;
  }

  public void setWelcomeScreen(String welcomeScreen) {
    this.welcomeScreen = welcomeScreen;
  }

  public SiteBody1 officeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
    return this;
  }

   /**
   * Allow users to use Office for the web?
   * @return officeIntegrationAvailable
  **/
  @Schema(description = "Allow users to use Office for the web?")
  public Boolean isOfficeIntegrationAvailable() {
    return officeIntegrationAvailable;
  }

  public void setOfficeIntegrationAvailable(Boolean officeIntegrationAvailable) {
    this.officeIntegrationAvailable = officeIntegrationAvailable;
  }

  public SiteBody1 sessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
    return this;
  }

   /**
   * Session expiry in hours
   * @return sessionExpiry
  **/
  @Schema(description = "Session expiry in hours")
  public Double getSessionExpiry() {
    return sessionExpiry;
  }

  public void setSessionExpiry(Double sessionExpiry) {
    this.sessionExpiry = sessionExpiry;
  }

  public SiteBody1 sslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
    return this;
  }

   /**
   * Is SSL required?  Disabling this is insecure.
   * @return sslRequired
  **/
  @Schema(description = "Is SSL required?  Disabling this is insecure.")
  public Boolean isSslRequired() {
    return sslRequired;
  }

  public void setSslRequired(Boolean sslRequired) {
    this.sslRequired = sslRequired;
  }

  public SiteBody1 tlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
    return this;
  }

   /**
   * Is TLS disabled(site setting)?
   * @return tlsDisabled
  **/
  @Schema(description = "Is TLS disabled(site setting)?")
  public Boolean isTlsDisabled() {
    return tlsDisabled;
  }

  public void setTlsDisabled(Boolean tlsDisabled) {
    this.tlsDisabled = tlsDisabled;
  }

  public SiteBody1 userLockout(Boolean userLockout) {
    this.userLockout = userLockout;
    return this;
  }

   /**
   * Will users be locked out after incorrect login attempts?
   * @return userLockout
  **/
  @Schema(description = "Will users be locked out after incorrect login attempts?")
  public Boolean isUserLockout() {
    return userLockout;
  }

  public void setUserLockout(Boolean userLockout) {
    this.userLockout = userLockout;
  }

  public SiteBody1 userLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
    return this;
  }

   /**
   * Number of login tries within &#x60;user_lockout_within&#x60; hours before users are locked out
   * @return userLockoutTries
  **/
  @Schema(description = "Number of login tries within `user_lockout_within` hours before users are locked out")
  public Integer getUserLockoutTries() {
    return userLockoutTries;
  }

  public void setUserLockoutTries(Integer userLockoutTries) {
    this.userLockoutTries = userLockoutTries;
  }

  public SiteBody1 userLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
    return this;
  }

   /**
   * Number of hours for user lockout window
   * @return userLockoutWithin
  **/
  @Schema(description = "Number of hours for user lockout window")
  public Integer getUserLockoutWithin() {
    return userLockoutWithin;
  }

  public void setUserLockoutWithin(Integer userLockoutWithin) {
    this.userLockoutWithin = userLockoutWithin;
  }

  public SiteBody1 userLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
    return this;
  }

   /**
   * How many hours to lock user out for failed password?
   * @return userLockoutLockPeriod
  **/
  @Schema(description = "How many hours to lock user out for failed password?")
  public Integer getUserLockoutLockPeriod() {
    return userLockoutLockPeriod;
  }

  public void setUserLockoutLockPeriod(Integer userLockoutLockPeriod) {
    this.userLockoutLockPeriod = userLockoutLockPeriod;
  }

  public SiteBody1 includePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
    return this;
  }

   /**
   * Include password in emails to new users?
   * @return includePasswordInWelcomeEmail
  **/
  @Schema(description = "Include password in emails to new users?")
  public Boolean isIncludePasswordInWelcomeEmail() {
    return includePasswordInWelcomeEmail;
  }

  public void setIncludePasswordInWelcomeEmail(Boolean includePasswordInWelcomeEmail) {
    this.includePasswordInWelcomeEmail = includePasswordInWelcomeEmail;
  }

  public SiteBody1 allowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
    return this;
  }

   /**
   * Comma seperated list of allowed Country codes
   * @return allowedCountries
  **/
  @Schema(description = "Comma seperated list of allowed Country codes")
  public String getAllowedCountries() {
    return allowedCountries;
  }

  public void setAllowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
  }

  public SiteBody1 allowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
    return this;
  }

   /**
   * List of allowed IP addresses
   * @return allowedIps
  **/
  @Schema(description = "List of allowed IP addresses")
  public String getAllowedIps() {
    return allowedIps;
  }

  public void setAllowedIps(String allowedIps) {
    this.allowedIps = allowedIps;
  }

  public SiteBody1 disallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
    return this;
  }

   /**
   * Comma seperated list of disallowed Country codes
   * @return disallowedCountries
  **/
  @Schema(description = "Comma seperated list of disallowed Country codes")
  public String getDisallowedCountries() {
    return disallowedCountries;
  }

  public void setDisallowedCountries(String disallowedCountries) {
    this.disallowedCountries = disallowedCountries;
  }

  public SiteBody1 daysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
    return this;
  }

   /**
   * Number of days to keep deleted files
   * @return daysToRetainBackups
  **/
  @Schema(description = "Number of days to keep deleted files")
  public Integer getDaysToRetainBackups() {
    return daysToRetainBackups;
  }

  public void setDaysToRetainBackups(Integer daysToRetainBackups) {
    this.daysToRetainBackups = daysToRetainBackups;
  }

  public SiteBody1 maxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
    return this;
  }

   /**
   * Number of prior passwords to disallow
   * @return maxPriorPasswords
  **/
  @Schema(description = "Number of prior passwords to disallow")
  public Integer getMaxPriorPasswords() {
    return maxPriorPasswords;
  }

  public void setMaxPriorPasswords(Integer maxPriorPasswords) {
    this.maxPriorPasswords = maxPriorPasswords;
  }

  public SiteBody1 passwordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
    return this;
  }

   /**
   * Number of days password is valid
   * @return passwordValidityDays
  **/
  @Schema(description = "Number of days password is valid")
  public Integer getPasswordValidityDays() {
    return passwordValidityDays;
  }

  public void setPasswordValidityDays(Integer passwordValidityDays) {
    this.passwordValidityDays = passwordValidityDays;
  }

  public SiteBody1 passwordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
    return this;
  }

   /**
   * Shortest password length for users
   * @return passwordMinLength
  **/
  @Schema(description = "Shortest password length for users")
  public Integer getPasswordMinLength() {
    return passwordMinLength;
  }

  public void setPasswordMinLength(Integer passwordMinLength) {
    this.passwordMinLength = passwordMinLength;
  }

  public SiteBody1 passwordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
    return this;
  }

   /**
   * Require a letter in passwords?
   * @return passwordRequireLetter
  **/
  @Schema(description = "Require a letter in passwords?")
  public Boolean isPasswordRequireLetter() {
    return passwordRequireLetter;
  }

  public void setPasswordRequireLetter(Boolean passwordRequireLetter) {
    this.passwordRequireLetter = passwordRequireLetter;
  }

  public SiteBody1 passwordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
    return this;
  }

   /**
   * Require lower and upper case letters in passwords?
   * @return passwordRequireMixed
  **/
  @Schema(description = "Require lower and upper case letters in passwords?")
  public Boolean isPasswordRequireMixed() {
    return passwordRequireMixed;
  }

  public void setPasswordRequireMixed(Boolean passwordRequireMixed) {
    this.passwordRequireMixed = passwordRequireMixed;
  }

  public SiteBody1 passwordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
    return this;
  }

   /**
   * Require special characters in password?
   * @return passwordRequireSpecial
  **/
  @Schema(description = "Require special characters in password?")
  public Boolean isPasswordRequireSpecial() {
    return passwordRequireSpecial;
  }

  public void setPasswordRequireSpecial(Boolean passwordRequireSpecial) {
    this.passwordRequireSpecial = passwordRequireSpecial;
  }

  public SiteBody1 passwordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
    return this;
  }

   /**
   * Require a number in passwords?
   * @return passwordRequireNumber
  **/
  @Schema(description = "Require a number in passwords?")
  public Boolean isPasswordRequireNumber() {
    return passwordRequireNumber;
  }

  public void setPasswordRequireNumber(Boolean passwordRequireNumber) {
    this.passwordRequireNumber = passwordRequireNumber;
  }

  public SiteBody1 passwordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
    return this;
  }

   /**
   * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
   * @return passwordRequireUnbreached
  **/
  @Schema(description = "Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)")
  public Boolean isPasswordRequireUnbreached() {
    return passwordRequireUnbreached;
  }

  public void setPasswordRequireUnbreached(Boolean passwordRequireUnbreached) {
    this.passwordRequireUnbreached = passwordRequireUnbreached;
  }

  public SiteBody1 sftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
    return this;
  }

   /**
   * Use user FTP roots also for SFTP?
   * @return sftpUserRootEnabled
  **/
  @Schema(description = "Use user FTP roots also for SFTP?")
  public Boolean isSftpUserRootEnabled() {
    return sftpUserRootEnabled;
  }

  public void setSftpUserRootEnabled(Boolean sftpUserRootEnabled) {
    this.sftpUserRootEnabled = sftpUserRootEnabled;
  }

  public SiteBody1 disablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
    return this;
  }

   /**
   * Is password reset disabled?
   * @return disablePasswordReset
  **/
  @Schema(description = "Is password reset disabled?")
  public Boolean isDisablePasswordReset() {
    return disablePasswordReset;
  }

  public void setDisablePasswordReset(Boolean disablePasswordReset) {
    this.disablePasswordReset = disablePasswordReset;
  }

  public SiteBody1 immutableFiles(Boolean immutableFiles) {
    this.immutableFiles = immutableFiles;
    return this;
  }

   /**
   * Are files protected from modification?
   * @return immutableFiles
  **/
  @Schema(description = "Are files protected from modification?")
  public Boolean isImmutableFiles() {
    return immutableFiles;
  }

  public void setImmutableFiles(Boolean immutableFiles) {
    this.immutableFiles = immutableFiles;
  }

  public SiteBody1 sessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
    return this;
  }

   /**
   * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
   * @return sessionPinnedByIp
  **/
  @Schema(description = "Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)")
  public Boolean isSessionPinnedByIp() {
    return sessionPinnedByIp;
  }

  public void setSessionPinnedByIp(Boolean sessionPinnedByIp) {
    this.sessionPinnedByIp = sessionPinnedByIp;
  }

  public SiteBody1 bundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
    return this;
  }

   /**
   * Do Bundles require password protection?
   * @return bundlePasswordRequired
  **/
  @Schema(description = "Do Bundles require password protection?")
  public Boolean isBundlePasswordRequired() {
    return bundlePasswordRequired;
  }

  public void setBundlePasswordRequired(Boolean bundlePasswordRequired) {
    this.bundlePasswordRequired = bundlePasswordRequired;
  }

  public SiteBody1 bundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
    return this;
  }

   /**
   * Do Bundles require recipients for sharing?
   * @return bundleRequireShareRecipient
  **/
  @Schema(description = "Do Bundles require recipients for sharing?")
  public Boolean isBundleRequireShareRecipient() {
    return bundleRequireShareRecipient;
  }

  public void setBundleRequireShareRecipient(Boolean bundleRequireShareRecipient) {
    this.bundleRequireShareRecipient = bundleRequireShareRecipient;
  }

  public SiteBody1 passwordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
    return this;
  }

   /**
   * Require bundles&#x27; passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users&#x27; passwords?
   * @return passwordRequirementsApplyToBundles
  **/
  @Schema(description = "Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?")
  public Boolean isPasswordRequirementsApplyToBundles() {
    return passwordRequirementsApplyToBundles;
  }

  public void setPasswordRequirementsApplyToBundles(Boolean passwordRequirementsApplyToBundles) {
    this.passwordRequirementsApplyToBundles = passwordRequirementsApplyToBundles;
  }

  public SiteBody1 optOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
    return this;
  }

   /**
   * Use servers in the USA only?
   * @return optOutGlobal
  **/
  @Schema(description = "Use servers in the USA only?")
  public Boolean isOptOutGlobal() {
    return optOutGlobal;
  }

  public void setOptOutGlobal(Boolean optOutGlobal) {
    this.optOutGlobal = optOutGlobal;
  }

  public SiteBody1 useProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
    return this;
  }

   /**
   * Allow uploaders to set &#x60;provided_modified_at&#x60; for uploaded files?
   * @return useProvidedModifiedAt
  **/
  @Schema(description = "Allow uploaders to set `provided_modified_at` for uploaded files?")
  public Boolean isUseProvidedModifiedAt() {
    return useProvidedModifiedAt;
  }

  public void setUseProvidedModifiedAt(Boolean useProvidedModifiedAt) {
    this.useProvidedModifiedAt = useProvidedModifiedAt;
  }

  public SiteBody1 customNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
    return this;
  }

   /**
   * Is this site using a custom namespace for users?
   * @return customNamespace
  **/
  @Schema(description = "Is this site using a custom namespace for users?")
  public Boolean isCustomNamespace() {
    return customNamespace;
  }

  public void setCustomNamespace(Boolean customNamespace) {
    this.customNamespace = customNamespace;
  }

  public SiteBody1 disableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
    return this;
  }

   /**
   * If greater than zero, users will unable to login if they do not show activity within this number of days.
   * @return disableUsersFromInactivityPeriodDays
  **/
  @Schema(description = "If greater than zero, users will unable to login if they do not show activity within this number of days.")
  public Integer getDisableUsersFromInactivityPeriodDays() {
    return disableUsersFromInactivityPeriodDays;
  }

  public void setDisableUsersFromInactivityPeriodDays(Integer disableUsersFromInactivityPeriodDays) {
    this.disableUsersFromInactivityPeriodDays = disableUsersFromInactivityPeriodDays;
  }

  public SiteBody1 nonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
    return this;
  }

   /**
   * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
   * @return nonSsoGroupsAllowed
  **/
  @Schema(description = "If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.")
  public Boolean isNonSsoGroupsAllowed() {
    return nonSsoGroupsAllowed;
  }

  public void setNonSsoGroupsAllowed(Boolean nonSsoGroupsAllowed) {
    this.nonSsoGroupsAllowed = nonSsoGroupsAllowed;
  }

  public SiteBody1 nonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
    return this;
  }

   /**
   * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
   * @return nonSsoUsersAllowed
  **/
  @Schema(description = "If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.")
  public Boolean isNonSsoUsersAllowed() {
    return nonSsoUsersAllowed;
  }

  public void setNonSsoUsersAllowed(Boolean nonSsoUsersAllowed) {
    this.nonSsoUsersAllowed = nonSsoUsersAllowed;
  }

  public SiteBody1 sharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
    return this;
  }

   /**
   * Allow bundle creation
   * @return sharingEnabled
  **/
  @Schema(description = "Allow bundle creation")
  public Boolean isSharingEnabled() {
    return sharingEnabled;
  }

  public void setSharingEnabled(Boolean sharingEnabled) {
    this.sharingEnabled = sharingEnabled;
  }

  public SiteBody1 userRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
    return this;
  }

   /**
   * Enable User Requests feature
   * @return userRequestsEnabled
  **/
  @Schema(description = "Enable User Requests feature")
  public Boolean isUserRequestsEnabled() {
    return userRequestsEnabled;
  }

  public void setUserRequestsEnabled(Boolean userRequestsEnabled) {
    this.userRequestsEnabled = userRequestsEnabled;
  }

  public SiteBody1 allowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
    return this;
  }

   /**
   * Is SMS two factor authentication allowed?
   * @return allowed2faMethodSms
  **/
  @Schema(description = "Is SMS two factor authentication allowed?")
  public Boolean isAllowed2faMethodSms() {
    return allowed2faMethodSms;
  }

  public void setAllowed2faMethodSms(Boolean allowed2faMethodSms) {
    this.allowed2faMethodSms = allowed2faMethodSms;
  }

  public SiteBody1 allowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
    return this;
  }

   /**
   * Is U2F two factor authentication allowed?
   * @return allowed2faMethodU2f
  **/
  @Schema(description = "Is U2F two factor authentication allowed?")
  public Boolean isAllowed2faMethodU2f() {
    return allowed2faMethodU2f;
  }

  public void setAllowed2faMethodU2f(Boolean allowed2faMethodU2f) {
    this.allowed2faMethodU2f = allowed2faMethodU2f;
  }

  public SiteBody1 allowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
    return this;
  }

   /**
   * Is TOTP two factor authentication allowed?
   * @return allowed2faMethodTotp
  **/
  @Schema(description = "Is TOTP two factor authentication allowed?")
  public Boolean isAllowed2faMethodTotp() {
    return allowed2faMethodTotp;
  }

  public void setAllowed2faMethodTotp(Boolean allowed2faMethodTotp) {
    this.allowed2faMethodTotp = allowed2faMethodTotp;
  }

  public SiteBody1 allowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
    return this;
  }

   /**
   * Is yubikey two factor authentication allowed?
   * @return allowed2faMethodYubi
  **/
  @Schema(description = "Is yubikey two factor authentication allowed?")
  public Boolean isAllowed2faMethodYubi() {
    return allowed2faMethodYubi;
  }

  public void setAllowed2faMethodYubi(Boolean allowed2faMethodYubi) {
    this.allowed2faMethodYubi = allowed2faMethodYubi;
  }

  public SiteBody1 require2fa(Boolean require2fa) {
    this.require2fa = require2fa;
    return this;
  }

   /**
   * Require two-factor authentication for all users?
   * @return require2fa
  **/
  @Schema(description = "Require two-factor authentication for all users?")
  public Boolean isRequire2fa() {
    return require2fa;
  }

  public void setRequire2fa(Boolean require2fa) {
    this.require2fa = require2fa;
  }

  public SiteBody1 require2faUserType(String require2faUserType) {
    this.require2faUserType = require2faUserType;
    return this;
  }

   /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to &#x60;true&#x60; for this site)?
   * @return require2faUserType
  **/
  @Schema(description = "What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?")
  public String getRequire2faUserType() {
    return require2faUserType;
  }

  public void setRequire2faUserType(String require2faUserType) {
    this.require2faUserType = require2faUserType;
  }

  public SiteBody1 color2Top(String color2Top) {
    this.color2Top = color2Top;
    return this;
  }

   /**
   * Top bar background color
   * @return color2Top
  **/
  @Schema(description = "Top bar background color")
  public String getColor2Top() {
    return color2Top;
  }

  public void setColor2Top(String color2Top) {
    this.color2Top = color2Top;
  }

  public SiteBody1 color2Left(String color2Left) {
    this.color2Left = color2Left;
    return this;
  }

   /**
   * Page link and button color
   * @return color2Left
  **/
  @Schema(description = "Page link and button color")
  public String getColor2Left() {
    return color2Left;
  }

  public void setColor2Left(String color2Left) {
    this.color2Left = color2Left;
  }

  public SiteBody1 color2Link(String color2Link) {
    this.color2Link = color2Link;
    return this;
  }

   /**
   * Top bar link color
   * @return color2Link
  **/
  @Schema(description = "Top bar link color")
  public String getColor2Link() {
    return color2Link;
  }

  public void setColor2Link(String color2Link) {
    this.color2Link = color2Link;
  }

  public SiteBody1 color2Text(String color2Text) {
    this.color2Text = color2Text;
    return this;
  }

   /**
   * Page link and button color
   * @return color2Text
  **/
  @Schema(description = "Page link and button color")
  public String getColor2Text() {
    return color2Text;
  }

  public void setColor2Text(String color2Text) {
    this.color2Text = color2Text;
  }

  public SiteBody1 color2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
    return this;
  }

   /**
   * Top bar text color
   * @return color2TopText
  **/
  @Schema(description = "Top bar text color")
  public String getColor2TopText() {
    return color2TopText;
  }

  public void setColor2TopText(String color2TopText) {
    this.color2TopText = color2TopText;
  }

  public SiteBody1 siteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
    return this;
  }

   /**
   * Custom site header text
   * @return siteHeader
  **/
  @Schema(description = "Custom site header text")
  public String getSiteHeader() {
    return siteHeader;
  }

  public void setSiteHeader(String siteHeader) {
    this.siteHeader = siteHeader;
  }

  public SiteBody1 siteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
    return this;
  }

   /**
   * Custom site footer text
   * @return siteFooter
  **/
  @Schema(description = "Custom site footer text")
  public String getSiteFooter() {
    return siteFooter;
  }

  public void setSiteFooter(String siteFooter) {
    this.siteFooter = siteFooter;
  }

  public SiteBody1 loginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
    return this;
  }

   /**
   * Login help text
   * @return loginHelpText
  **/
  @Schema(description = "Login help text")
  public String getLoginHelpText() {
    return loginHelpText;
  }

  public void setLoginHelpText(String loginHelpText) {
    this.loginHelpText = loginHelpText;
  }

  public SiteBody1 smtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
    return this;
  }

   /**
   * SMTP server hostname or IP
   * @return smtpAddress
  **/
  @Schema(description = "SMTP server hostname or IP")
  public String getSmtpAddress() {
    return smtpAddress;
  }

  public void setSmtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
  }

  public SiteBody1 smtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
    return this;
  }

   /**
   * SMTP server authentication type
   * @return smtpAuthentication
  **/
  @Schema(description = "SMTP server authentication type")
  public String getSmtpAuthentication() {
    return smtpAuthentication;
  }

  public void setSmtpAuthentication(String smtpAuthentication) {
    this.smtpAuthentication = smtpAuthentication;
  }

  public SiteBody1 smtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
    return this;
  }

   /**
   * From address to use when mailing through custom SMTP
   * @return smtpFrom
  **/
  @Schema(description = "From address to use when mailing through custom SMTP")
  public String getSmtpFrom() {
    return smtpFrom;
  }

  public void setSmtpFrom(String smtpFrom) {
    this.smtpFrom = smtpFrom;
  }

  public SiteBody1 smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * SMTP server username
   * @return smtpUsername
  **/
  @Schema(description = "SMTP server username")
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }

  public SiteBody1 smtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * SMTP server port
   * @return smtpPort
  **/
  @Schema(description = "SMTP server port")
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
  }

  public SiteBody1 ldapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
    return this;
  }

   /**
   * Main LDAP setting: is LDAP enabled?
   * @return ldapEnabled
  **/
  @Schema(description = "Main LDAP setting: is LDAP enabled?")
  public Boolean isLdapEnabled() {
    return ldapEnabled;
  }

  public void setLdapEnabled(Boolean ldapEnabled) {
    this.ldapEnabled = ldapEnabled;
  }

  public SiteBody1 ldapType(String ldapType) {
    this.ldapType = ldapType;
    return this;
  }

   /**
   * LDAP type
   * @return ldapType
  **/
  @Schema(description = "LDAP type")
  public String getLdapType() {
    return ldapType;
  }

  public void setLdapType(String ldapType) {
    this.ldapType = ldapType;
  }

  public SiteBody1 ldapHost(String ldapHost) {
    this.ldapHost = ldapHost;
    return this;
  }

   /**
   * LDAP host
   * @return ldapHost
  **/
  @Schema(description = "LDAP host")
  public String getLdapHost() {
    return ldapHost;
  }

  public void setLdapHost(String ldapHost) {
    this.ldapHost = ldapHost;
  }

  public SiteBody1 ldapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
    return this;
  }

   /**
   * LDAP backup host
   * @return ldapHost2
  **/
  @Schema(description = "LDAP backup host")
  public String getLdapHost2() {
    return ldapHost2;
  }

  public void setLdapHost2(String ldapHost2) {
    this.ldapHost2 = ldapHost2;
  }

  public SiteBody1 ldapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
    return this;
  }

   /**
   * LDAP backup host
   * @return ldapHost3
  **/
  @Schema(description = "LDAP backup host")
  public String getLdapHost3() {
    return ldapHost3;
  }

  public void setLdapHost3(String ldapHost3) {
    this.ldapHost3 = ldapHost3;
  }

  public SiteBody1 ldapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
    return this;
  }

   /**
   * LDAP port
   * @return ldapPort
  **/
  @Schema(description = "LDAP port")
  public Integer getLdapPort() {
    return ldapPort;
  }

  public void setLdapPort(Integer ldapPort) {
    this.ldapPort = ldapPort;
  }

  public SiteBody1 ldapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
    return this;
  }

   /**
   * Use secure LDAP?
   * @return ldapSecure
  **/
  @Schema(description = "Use secure LDAP?")
  public Boolean isLdapSecure() {
    return ldapSecure;
  }

  public void setLdapSecure(Boolean ldapSecure) {
    this.ldapSecure = ldapSecure;
  }

  public SiteBody1 ldapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
    return this;
  }

   /**
   * Username for signing in to LDAP server.
   * @return ldapUsername
  **/
  @Schema(description = "Username for signing in to LDAP server.")
  public String getLdapUsername() {
    return ldapUsername;
  }

  public void setLdapUsername(String ldapUsername) {
    this.ldapUsername = ldapUsername;
  }

  public SiteBody1 ldapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
    return this;
  }

   /**
   * LDAP username field
   * @return ldapUsernameField
  **/
  @Schema(description = "LDAP username field")
  public String getLdapUsernameField() {
    return ldapUsernameField;
  }

  public void setLdapUsernameField(String ldapUsernameField) {
    this.ldapUsernameField = ldapUsernameField;
  }

  public SiteBody1 ldapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
    return this;
  }

   /**
   * Domain name that will be appended to usernames
   * @return ldapDomain
  **/
  @Schema(description = "Domain name that will be appended to usernames")
  public String getLdapDomain() {
    return ldapDomain;
  }

  public void setLdapDomain(String ldapDomain) {
    this.ldapDomain = ldapDomain;
  }

  public SiteBody1 ldapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
    return this;
  }

   /**
   * Should we sync users from LDAP server?
   * @return ldapUserAction
  **/
  @Schema(description = "Should we sync users from LDAP server?")
  public String getLdapUserAction() {
    return ldapUserAction;
  }

  public void setLdapUserAction(String ldapUserAction) {
    this.ldapUserAction = ldapUserAction;
  }

  public SiteBody1 ldapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
    return this;
  }

   /**
   * Should we sync groups from LDAP server?
   * @return ldapGroupAction
  **/
  @Schema(description = "Should we sync groups from LDAP server?")
  public String getLdapGroupAction() {
    return ldapGroupAction;
  }

  public void setLdapGroupAction(String ldapGroupAction) {
    this.ldapGroupAction = ldapGroupAction;
  }

  public SiteBody1 ldapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
   * @return ldapUserIncludeGroups
  **/
  @Schema(description = "Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.")
  public String getLdapUserIncludeGroups() {
    return ldapUserIncludeGroups;
  }

  public void setLdapUserIncludeGroups(String ldapUserIncludeGroups) {
    this.ldapUserIncludeGroups = ldapUserIncludeGroups;
  }

  public SiteBody1 ldapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
   * @return ldapGroupExclusion
  **/
  @Schema(description = "Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.")
  public String getLdapGroupExclusion() {
    return ldapGroupExclusion;
  }

  public void setLdapGroupExclusion(String ldapGroupExclusion) {
    this.ldapGroupExclusion = ldapGroupExclusion;
  }

  public SiteBody1 ldapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
    return this;
  }

   /**
   * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
   * @return ldapGroupInclusion
  **/
  @Schema(description = "Comma or newline separated list of group names (with optional wildcards) to include when syncing.")
  public String getLdapGroupInclusion() {
    return ldapGroupInclusion;
  }

  public void setLdapGroupInclusion(String ldapGroupInclusion) {
    this.ldapGroupInclusion = ldapGroupInclusion;
  }

  public SiteBody1 ldapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
    return this;
  }

   /**
   * Base DN for looking up users in LDAP server
   * @return ldapBaseDn
  **/
  @Schema(description = "Base DN for looking up users in LDAP server")
  public String getLdapBaseDn() {
    return ldapBaseDn;
  }

  public void setLdapBaseDn(String ldapBaseDn) {
    this.ldapBaseDn = ldapBaseDn;
  }

  public SiteBody1 icon16File(File icon16File) {
    this.icon16File = icon16File;
    return this;
  }

   /**
   * Get icon16File
   * @return icon16File
  **/
  @Schema(description = "")
  public File getIcon16File() {
    return icon16File;
  }

  public void setIcon16File(File icon16File) {
    this.icon16File = icon16File;
  }

  public SiteBody1 icon16Delete(Boolean icon16Delete) {
    this.icon16Delete = icon16Delete;
    return this;
  }

   /**
   * If true, will delete the file stored in icon16
   * @return icon16Delete
  **/
  @Schema(description = "If true, will delete the file stored in icon16")
  public Boolean isIcon16Delete() {
    return icon16Delete;
  }

  public void setIcon16Delete(Boolean icon16Delete) {
    this.icon16Delete = icon16Delete;
  }

  public SiteBody1 icon32File(File icon32File) {
    this.icon32File = icon32File;
    return this;
  }

   /**
   * Get icon32File
   * @return icon32File
  **/
  @Schema(description = "")
  public File getIcon32File() {
    return icon32File;
  }

  public void setIcon32File(File icon32File) {
    this.icon32File = icon32File;
  }

  public SiteBody1 icon32Delete(Boolean icon32Delete) {
    this.icon32Delete = icon32Delete;
    return this;
  }

   /**
   * If true, will delete the file stored in icon32
   * @return icon32Delete
  **/
  @Schema(description = "If true, will delete the file stored in icon32")
  public Boolean isIcon32Delete() {
    return icon32Delete;
  }

  public void setIcon32Delete(Boolean icon32Delete) {
    this.icon32Delete = icon32Delete;
  }

  public SiteBody1 icon48File(File icon48File) {
    this.icon48File = icon48File;
    return this;
  }

   /**
   * Get icon48File
   * @return icon48File
  **/
  @Schema(description = "")
  public File getIcon48File() {
    return icon48File;
  }

  public void setIcon48File(File icon48File) {
    this.icon48File = icon48File;
  }

  public SiteBody1 icon48Delete(Boolean icon48Delete) {
    this.icon48Delete = icon48Delete;
    return this;
  }

   /**
   * If true, will delete the file stored in icon48
   * @return icon48Delete
  **/
  @Schema(description = "If true, will delete the file stored in icon48")
  public Boolean isIcon48Delete() {
    return icon48Delete;
  }

  public void setIcon48Delete(Boolean icon48Delete) {
    this.icon48Delete = icon48Delete;
  }

  public SiteBody1 icon128File(File icon128File) {
    this.icon128File = icon128File;
    return this;
  }

   /**
   * Get icon128File
   * @return icon128File
  **/
  @Schema(description = "")
  public File getIcon128File() {
    return icon128File;
  }

  public void setIcon128File(File icon128File) {
    this.icon128File = icon128File;
  }

  public SiteBody1 icon128Delete(Boolean icon128Delete) {
    this.icon128Delete = icon128Delete;
    return this;
  }

   /**
   * If true, will delete the file stored in icon128
   * @return icon128Delete
  **/
  @Schema(description = "If true, will delete the file stored in icon128")
  public Boolean isIcon128Delete() {
    return icon128Delete;
  }

  public void setIcon128Delete(Boolean icon128Delete) {
    this.icon128Delete = icon128Delete;
  }

  public SiteBody1 logoFile(File logoFile) {
    this.logoFile = logoFile;
    return this;
  }

   /**
   * Get logoFile
   * @return logoFile
  **/
  @Schema(description = "")
  public File getLogoFile() {
    return logoFile;
  }

  public void setLogoFile(File logoFile) {
    this.logoFile = logoFile;
  }

  public SiteBody1 logoDelete(Boolean logoDelete) {
    this.logoDelete = logoDelete;
    return this;
  }

   /**
   * If true, will delete the file stored in logo
   * @return logoDelete
  **/
  @Schema(description = "If true, will delete the file stored in logo")
  public Boolean isLogoDelete() {
    return logoDelete;
  }

  public void setLogoDelete(Boolean logoDelete) {
    this.logoDelete = logoDelete;
  }

  public SiteBody1 disable2faWithDelay(Boolean disable2faWithDelay) {
    this.disable2faWithDelay = disable2faWithDelay;
    return this;
  }

   /**
   * If set to true, we will begin the process of disabling 2FA on this site.
   * @return disable2faWithDelay
  **/
  @Schema(description = "If set to true, we will begin the process of disabling 2FA on this site.")
  public Boolean isDisable2faWithDelay() {
    return disable2faWithDelay;
  }

  public void setDisable2faWithDelay(Boolean disable2faWithDelay) {
    this.disable2faWithDelay = disable2faWithDelay;
  }

  public SiteBody1 ldapPasswordChange(String ldapPasswordChange) {
    this.ldapPasswordChange = ldapPasswordChange;
    return this;
  }

   /**
   * New LDAP password.
   * @return ldapPasswordChange
  **/
  @Schema(description = "New LDAP password.")
  public String getLdapPasswordChange() {
    return ldapPasswordChange;
  }

  public void setLdapPasswordChange(String ldapPasswordChange) {
    this.ldapPasswordChange = ldapPasswordChange;
  }

  public SiteBody1 ldapPasswordChangeConfirmation(String ldapPasswordChangeConfirmation) {
    this.ldapPasswordChangeConfirmation = ldapPasswordChangeConfirmation;
    return this;
  }

   /**
   * Confirm new LDAP password.
   * @return ldapPasswordChangeConfirmation
  **/
  @Schema(description = "Confirm new LDAP password.")
  public String getLdapPasswordChangeConfirmation() {
    return ldapPasswordChangeConfirmation;
  }

  public void setLdapPasswordChangeConfirmation(String ldapPasswordChangeConfirmation) {
    this.ldapPasswordChangeConfirmation = ldapPasswordChangeConfirmation;
  }

  public SiteBody1 smtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Password for SMTP server.
   * @return smtpPassword
  **/
  @Schema(description = "Password for SMTP server.")
  public String getSmtpPassword() {
    return smtpPassword;
  }

  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteBody1 siteBody1 = (SiteBody1) o;
    return Objects.equals(this.name, siteBody1.name) &&
        Objects.equals(this.subdomain, siteBody1.subdomain) &&
        Objects.equals(this.domain, siteBody1.domain) &&
        Objects.equals(this.email, siteBody1.email) &&
        Objects.equals(this.replyToEmail, siteBody1.replyToEmail) &&
        Objects.equals(this.allowBundleNames, siteBody1.allowBundleNames) &&
        Objects.equals(this.bundleExpiration, siteBody1.bundleExpiration) &&
        Objects.equals(this.overageNotify, siteBody1.overageNotify) &&
        Objects.equals(this.welcomeEmailEnabled, siteBody1.welcomeEmailEnabled) &&
        Objects.equals(this.askAboutOverwrites, siteBody1.askAboutOverwrites) &&
        Objects.equals(this.showRequestAccessLink, siteBody1.showRequestAccessLink) &&
        Objects.equals(this.welcomeEmailCc, siteBody1.welcomeEmailCc) &&
        Objects.equals(this.welcomeCustomText, siteBody1.welcomeCustomText) &&
        Objects.equals(this.language, siteBody1.language) &&
        Objects.equals(this.windowsModeFtp, siteBody1.windowsModeFtp) &&
        Objects.equals(this.defaultTimeZone, siteBody1.defaultTimeZone) &&
        Objects.equals(this.desktopApp, siteBody1.desktopApp) &&
        Objects.equals(this.desktopAppSessionIpPinning, siteBody1.desktopAppSessionIpPinning) &&
        Objects.equals(this.desktopAppSessionLifetime, siteBody1.desktopAppSessionLifetime) &&
        Objects.equals(this.folderPermissionsGroupsOnly, siteBody1.folderPermissionsGroupsOnly) &&
        Objects.equals(this.welcomeScreen, siteBody1.welcomeScreen) &&
        Objects.equals(this.officeIntegrationAvailable, siteBody1.officeIntegrationAvailable) &&
        Objects.equals(this.sessionExpiry, siteBody1.sessionExpiry) &&
        Objects.equals(this.sslRequired, siteBody1.sslRequired) &&
        Objects.equals(this.tlsDisabled, siteBody1.tlsDisabled) &&
        Objects.equals(this.userLockout, siteBody1.userLockout) &&
        Objects.equals(this.userLockoutTries, siteBody1.userLockoutTries) &&
        Objects.equals(this.userLockoutWithin, siteBody1.userLockoutWithin) &&
        Objects.equals(this.userLockoutLockPeriod, siteBody1.userLockoutLockPeriod) &&
        Objects.equals(this.includePasswordInWelcomeEmail, siteBody1.includePasswordInWelcomeEmail) &&
        Objects.equals(this.allowedCountries, siteBody1.allowedCountries) &&
        Objects.equals(this.allowedIps, siteBody1.allowedIps) &&
        Objects.equals(this.disallowedCountries, siteBody1.disallowedCountries) &&
        Objects.equals(this.daysToRetainBackups, siteBody1.daysToRetainBackups) &&
        Objects.equals(this.maxPriorPasswords, siteBody1.maxPriorPasswords) &&
        Objects.equals(this.passwordValidityDays, siteBody1.passwordValidityDays) &&
        Objects.equals(this.passwordMinLength, siteBody1.passwordMinLength) &&
        Objects.equals(this.passwordRequireLetter, siteBody1.passwordRequireLetter) &&
        Objects.equals(this.passwordRequireMixed, siteBody1.passwordRequireMixed) &&
        Objects.equals(this.passwordRequireSpecial, siteBody1.passwordRequireSpecial) &&
        Objects.equals(this.passwordRequireNumber, siteBody1.passwordRequireNumber) &&
        Objects.equals(this.passwordRequireUnbreached, siteBody1.passwordRequireUnbreached) &&
        Objects.equals(this.sftpUserRootEnabled, siteBody1.sftpUserRootEnabled) &&
        Objects.equals(this.disablePasswordReset, siteBody1.disablePasswordReset) &&
        Objects.equals(this.immutableFiles, siteBody1.immutableFiles) &&
        Objects.equals(this.sessionPinnedByIp, siteBody1.sessionPinnedByIp) &&
        Objects.equals(this.bundlePasswordRequired, siteBody1.bundlePasswordRequired) &&
        Objects.equals(this.bundleRequireShareRecipient, siteBody1.bundleRequireShareRecipient) &&
        Objects.equals(this.passwordRequirementsApplyToBundles, siteBody1.passwordRequirementsApplyToBundles) &&
        Objects.equals(this.optOutGlobal, siteBody1.optOutGlobal) &&
        Objects.equals(this.useProvidedModifiedAt, siteBody1.useProvidedModifiedAt) &&
        Objects.equals(this.customNamespace, siteBody1.customNamespace) &&
        Objects.equals(this.disableUsersFromInactivityPeriodDays, siteBody1.disableUsersFromInactivityPeriodDays) &&
        Objects.equals(this.nonSsoGroupsAllowed, siteBody1.nonSsoGroupsAllowed) &&
        Objects.equals(this.nonSsoUsersAllowed, siteBody1.nonSsoUsersAllowed) &&
        Objects.equals(this.sharingEnabled, siteBody1.sharingEnabled) &&
        Objects.equals(this.userRequestsEnabled, siteBody1.userRequestsEnabled) &&
        Objects.equals(this.allowed2faMethodSms, siteBody1.allowed2faMethodSms) &&
        Objects.equals(this.allowed2faMethodU2f, siteBody1.allowed2faMethodU2f) &&
        Objects.equals(this.allowed2faMethodTotp, siteBody1.allowed2faMethodTotp) &&
        Objects.equals(this.allowed2faMethodYubi, siteBody1.allowed2faMethodYubi) &&
        Objects.equals(this.require2fa, siteBody1.require2fa) &&
        Objects.equals(this.require2faUserType, siteBody1.require2faUserType) &&
        Objects.equals(this.color2Top, siteBody1.color2Top) &&
        Objects.equals(this.color2Left, siteBody1.color2Left) &&
        Objects.equals(this.color2Link, siteBody1.color2Link) &&
        Objects.equals(this.color2Text, siteBody1.color2Text) &&
        Objects.equals(this.color2TopText, siteBody1.color2TopText) &&
        Objects.equals(this.siteHeader, siteBody1.siteHeader) &&
        Objects.equals(this.siteFooter, siteBody1.siteFooter) &&
        Objects.equals(this.loginHelpText, siteBody1.loginHelpText) &&
        Objects.equals(this.smtpAddress, siteBody1.smtpAddress) &&
        Objects.equals(this.smtpAuthentication, siteBody1.smtpAuthentication) &&
        Objects.equals(this.smtpFrom, siteBody1.smtpFrom) &&
        Objects.equals(this.smtpUsername, siteBody1.smtpUsername) &&
        Objects.equals(this.smtpPort, siteBody1.smtpPort) &&
        Objects.equals(this.ldapEnabled, siteBody1.ldapEnabled) &&
        Objects.equals(this.ldapType, siteBody1.ldapType) &&
        Objects.equals(this.ldapHost, siteBody1.ldapHost) &&
        Objects.equals(this.ldapHost2, siteBody1.ldapHost2) &&
        Objects.equals(this.ldapHost3, siteBody1.ldapHost3) &&
        Objects.equals(this.ldapPort, siteBody1.ldapPort) &&
        Objects.equals(this.ldapSecure, siteBody1.ldapSecure) &&
        Objects.equals(this.ldapUsername, siteBody1.ldapUsername) &&
        Objects.equals(this.ldapUsernameField, siteBody1.ldapUsernameField) &&
        Objects.equals(this.ldapDomain, siteBody1.ldapDomain) &&
        Objects.equals(this.ldapUserAction, siteBody1.ldapUserAction) &&
        Objects.equals(this.ldapGroupAction, siteBody1.ldapGroupAction) &&
        Objects.equals(this.ldapUserIncludeGroups, siteBody1.ldapUserIncludeGroups) &&
        Objects.equals(this.ldapGroupExclusion, siteBody1.ldapGroupExclusion) &&
        Objects.equals(this.ldapGroupInclusion, siteBody1.ldapGroupInclusion) &&
        Objects.equals(this.ldapBaseDn, siteBody1.ldapBaseDn) &&
        Objects.equals(this.icon16File, siteBody1.icon16File) &&
        Objects.equals(this.icon16Delete, siteBody1.icon16Delete) &&
        Objects.equals(this.icon32File, siteBody1.icon32File) &&
        Objects.equals(this.icon32Delete, siteBody1.icon32Delete) &&
        Objects.equals(this.icon48File, siteBody1.icon48File) &&
        Objects.equals(this.icon48Delete, siteBody1.icon48Delete) &&
        Objects.equals(this.icon128File, siteBody1.icon128File) &&
        Objects.equals(this.icon128Delete, siteBody1.icon128Delete) &&
        Objects.equals(this.logoFile, siteBody1.logoFile) &&
        Objects.equals(this.logoDelete, siteBody1.logoDelete) &&
        Objects.equals(this.disable2faWithDelay, siteBody1.disable2faWithDelay) &&
        Objects.equals(this.ldapPasswordChange, siteBody1.ldapPasswordChange) &&
        Objects.equals(this.ldapPasswordChangeConfirmation, siteBody1.ldapPasswordChangeConfirmation) &&
        Objects.equals(this.smtpPassword, siteBody1.smtpPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, subdomain, domain, email, replyToEmail, allowBundleNames, bundleExpiration, overageNotify, welcomeEmailEnabled, askAboutOverwrites, showRequestAccessLink, welcomeEmailCc, welcomeCustomText, language, windowsModeFtp, defaultTimeZone, desktopApp, desktopAppSessionIpPinning, desktopAppSessionLifetime, folderPermissionsGroupsOnly, welcomeScreen, officeIntegrationAvailable, sessionExpiry, sslRequired, tlsDisabled, userLockout, userLockoutTries, userLockoutWithin, userLockoutLockPeriod, includePasswordInWelcomeEmail, allowedCountries, allowedIps, disallowedCountries, daysToRetainBackups, maxPriorPasswords, passwordValidityDays, passwordMinLength, passwordRequireLetter, passwordRequireMixed, passwordRequireSpecial, passwordRequireNumber, passwordRequireUnbreached, sftpUserRootEnabled, disablePasswordReset, immutableFiles, sessionPinnedByIp, bundlePasswordRequired, bundleRequireShareRecipient, passwordRequirementsApplyToBundles, optOutGlobal, useProvidedModifiedAt, customNamespace, disableUsersFromInactivityPeriodDays, nonSsoGroupsAllowed, nonSsoUsersAllowed, sharingEnabled, userRequestsEnabled, allowed2faMethodSms, allowed2faMethodU2f, allowed2faMethodTotp, allowed2faMethodYubi, require2fa, require2faUserType, color2Top, color2Left, color2Link, color2Text, color2TopText, siteHeader, siteFooter, loginHelpText, smtpAddress, smtpAuthentication, smtpFrom, smtpUsername, smtpPort, ldapEnabled, ldapType, ldapHost, ldapHost2, ldapHost3, ldapPort, ldapSecure, ldapUsername, ldapUsernameField, ldapDomain, ldapUserAction, ldapGroupAction, ldapUserIncludeGroups, ldapGroupExclusion, ldapGroupInclusion, ldapBaseDn, Objects.hashCode(icon16File), icon16Delete, Objects.hashCode(icon32File), icon32Delete, Objects.hashCode(icon48File), icon48Delete, Objects.hashCode(icon128File), icon128Delete, Objects.hashCode(logoFile), logoDelete, disable2faWithDelay, ldapPasswordChange, ldapPasswordChangeConfirmation, smtpPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteBody1 {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subdomain: ").append(toIndentedString(subdomain)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    replyToEmail: ").append(toIndentedString(replyToEmail)).append("\n");
    sb.append("    allowBundleNames: ").append(toIndentedString(allowBundleNames)).append("\n");
    sb.append("    bundleExpiration: ").append(toIndentedString(bundleExpiration)).append("\n");
    sb.append("    overageNotify: ").append(toIndentedString(overageNotify)).append("\n");
    sb.append("    welcomeEmailEnabled: ").append(toIndentedString(welcomeEmailEnabled)).append("\n");
    sb.append("    askAboutOverwrites: ").append(toIndentedString(askAboutOverwrites)).append("\n");
    sb.append("    showRequestAccessLink: ").append(toIndentedString(showRequestAccessLink)).append("\n");
    sb.append("    welcomeEmailCc: ").append(toIndentedString(welcomeEmailCc)).append("\n");
    sb.append("    welcomeCustomText: ").append(toIndentedString(welcomeCustomText)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    windowsModeFtp: ").append(toIndentedString(windowsModeFtp)).append("\n");
    sb.append("    defaultTimeZone: ").append(toIndentedString(defaultTimeZone)).append("\n");
    sb.append("    desktopApp: ").append(toIndentedString(desktopApp)).append("\n");
    sb.append("    desktopAppSessionIpPinning: ").append(toIndentedString(desktopAppSessionIpPinning)).append("\n");
    sb.append("    desktopAppSessionLifetime: ").append(toIndentedString(desktopAppSessionLifetime)).append("\n");
    sb.append("    folderPermissionsGroupsOnly: ").append(toIndentedString(folderPermissionsGroupsOnly)).append("\n");
    sb.append("    welcomeScreen: ").append(toIndentedString(welcomeScreen)).append("\n");
    sb.append("    officeIntegrationAvailable: ").append(toIndentedString(officeIntegrationAvailable)).append("\n");
    sb.append("    sessionExpiry: ").append(toIndentedString(sessionExpiry)).append("\n");
    sb.append("    sslRequired: ").append(toIndentedString(sslRequired)).append("\n");
    sb.append("    tlsDisabled: ").append(toIndentedString(tlsDisabled)).append("\n");
    sb.append("    userLockout: ").append(toIndentedString(userLockout)).append("\n");
    sb.append("    userLockoutTries: ").append(toIndentedString(userLockoutTries)).append("\n");
    sb.append("    userLockoutWithin: ").append(toIndentedString(userLockoutWithin)).append("\n");
    sb.append("    userLockoutLockPeriod: ").append(toIndentedString(userLockoutLockPeriod)).append("\n");
    sb.append("    includePasswordInWelcomeEmail: ").append(toIndentedString(includePasswordInWelcomeEmail)).append("\n");
    sb.append("    allowedCountries: ").append(toIndentedString(allowedCountries)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    disallowedCountries: ").append(toIndentedString(disallowedCountries)).append("\n");
    sb.append("    daysToRetainBackups: ").append(toIndentedString(daysToRetainBackups)).append("\n");
    sb.append("    maxPriorPasswords: ").append(toIndentedString(maxPriorPasswords)).append("\n");
    sb.append("    passwordValidityDays: ").append(toIndentedString(passwordValidityDays)).append("\n");
    sb.append("    passwordMinLength: ").append(toIndentedString(passwordMinLength)).append("\n");
    sb.append("    passwordRequireLetter: ").append(toIndentedString(passwordRequireLetter)).append("\n");
    sb.append("    passwordRequireMixed: ").append(toIndentedString(passwordRequireMixed)).append("\n");
    sb.append("    passwordRequireSpecial: ").append(toIndentedString(passwordRequireSpecial)).append("\n");
    sb.append("    passwordRequireNumber: ").append(toIndentedString(passwordRequireNumber)).append("\n");
    sb.append("    passwordRequireUnbreached: ").append(toIndentedString(passwordRequireUnbreached)).append("\n");
    sb.append("    sftpUserRootEnabled: ").append(toIndentedString(sftpUserRootEnabled)).append("\n");
    sb.append("    disablePasswordReset: ").append(toIndentedString(disablePasswordReset)).append("\n");
    sb.append("    immutableFiles: ").append(toIndentedString(immutableFiles)).append("\n");
    sb.append("    sessionPinnedByIp: ").append(toIndentedString(sessionPinnedByIp)).append("\n");
    sb.append("    bundlePasswordRequired: ").append(toIndentedString(bundlePasswordRequired)).append("\n");
    sb.append("    bundleRequireShareRecipient: ").append(toIndentedString(bundleRequireShareRecipient)).append("\n");
    sb.append("    passwordRequirementsApplyToBundles: ").append(toIndentedString(passwordRequirementsApplyToBundles)).append("\n");
    sb.append("    optOutGlobal: ").append(toIndentedString(optOutGlobal)).append("\n");
    sb.append("    useProvidedModifiedAt: ").append(toIndentedString(useProvidedModifiedAt)).append("\n");
    sb.append("    customNamespace: ").append(toIndentedString(customNamespace)).append("\n");
    sb.append("    disableUsersFromInactivityPeriodDays: ").append(toIndentedString(disableUsersFromInactivityPeriodDays)).append("\n");
    sb.append("    nonSsoGroupsAllowed: ").append(toIndentedString(nonSsoGroupsAllowed)).append("\n");
    sb.append("    nonSsoUsersAllowed: ").append(toIndentedString(nonSsoUsersAllowed)).append("\n");
    sb.append("    sharingEnabled: ").append(toIndentedString(sharingEnabled)).append("\n");
    sb.append("    userRequestsEnabled: ").append(toIndentedString(userRequestsEnabled)).append("\n");
    sb.append("    allowed2faMethodSms: ").append(toIndentedString(allowed2faMethodSms)).append("\n");
    sb.append("    allowed2faMethodU2f: ").append(toIndentedString(allowed2faMethodU2f)).append("\n");
    sb.append("    allowed2faMethodTotp: ").append(toIndentedString(allowed2faMethodTotp)).append("\n");
    sb.append("    allowed2faMethodYubi: ").append(toIndentedString(allowed2faMethodYubi)).append("\n");
    sb.append("    require2fa: ").append(toIndentedString(require2fa)).append("\n");
    sb.append("    require2faUserType: ").append(toIndentedString(require2faUserType)).append("\n");
    sb.append("    color2Top: ").append(toIndentedString(color2Top)).append("\n");
    sb.append("    color2Left: ").append(toIndentedString(color2Left)).append("\n");
    sb.append("    color2Link: ").append(toIndentedString(color2Link)).append("\n");
    sb.append("    color2Text: ").append(toIndentedString(color2Text)).append("\n");
    sb.append("    color2TopText: ").append(toIndentedString(color2TopText)).append("\n");
    sb.append("    siteHeader: ").append(toIndentedString(siteHeader)).append("\n");
    sb.append("    siteFooter: ").append(toIndentedString(siteFooter)).append("\n");
    sb.append("    loginHelpText: ").append(toIndentedString(loginHelpText)).append("\n");
    sb.append("    smtpAddress: ").append(toIndentedString(smtpAddress)).append("\n");
    sb.append("    smtpAuthentication: ").append(toIndentedString(smtpAuthentication)).append("\n");
    sb.append("    smtpFrom: ").append(toIndentedString(smtpFrom)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    ldapEnabled: ").append(toIndentedString(ldapEnabled)).append("\n");
    sb.append("    ldapType: ").append(toIndentedString(ldapType)).append("\n");
    sb.append("    ldapHost: ").append(toIndentedString(ldapHost)).append("\n");
    sb.append("    ldapHost2: ").append(toIndentedString(ldapHost2)).append("\n");
    sb.append("    ldapHost3: ").append(toIndentedString(ldapHost3)).append("\n");
    sb.append("    ldapPort: ").append(toIndentedString(ldapPort)).append("\n");
    sb.append("    ldapSecure: ").append(toIndentedString(ldapSecure)).append("\n");
    sb.append("    ldapUsername: ").append(toIndentedString(ldapUsername)).append("\n");
    sb.append("    ldapUsernameField: ").append(toIndentedString(ldapUsernameField)).append("\n");
    sb.append("    ldapDomain: ").append(toIndentedString(ldapDomain)).append("\n");
    sb.append("    ldapUserAction: ").append(toIndentedString(ldapUserAction)).append("\n");
    sb.append("    ldapGroupAction: ").append(toIndentedString(ldapGroupAction)).append("\n");
    sb.append("    ldapUserIncludeGroups: ").append(toIndentedString(ldapUserIncludeGroups)).append("\n");
    sb.append("    ldapGroupExclusion: ").append(toIndentedString(ldapGroupExclusion)).append("\n");
    sb.append("    ldapGroupInclusion: ").append(toIndentedString(ldapGroupInclusion)).append("\n");
    sb.append("    ldapBaseDn: ").append(toIndentedString(ldapBaseDn)).append("\n");
    sb.append("    icon16File: ").append(toIndentedString(icon16File)).append("\n");
    sb.append("    icon16Delete: ").append(toIndentedString(icon16Delete)).append("\n");
    sb.append("    icon32File: ").append(toIndentedString(icon32File)).append("\n");
    sb.append("    icon32Delete: ").append(toIndentedString(icon32Delete)).append("\n");
    sb.append("    icon48File: ").append(toIndentedString(icon48File)).append("\n");
    sb.append("    icon48Delete: ").append(toIndentedString(icon48Delete)).append("\n");
    sb.append("    icon128File: ").append(toIndentedString(icon128File)).append("\n");
    sb.append("    icon128Delete: ").append(toIndentedString(icon128Delete)).append("\n");
    sb.append("    logoFile: ").append(toIndentedString(logoFile)).append("\n");
    sb.append("    logoDelete: ").append(toIndentedString(logoDelete)).append("\n");
    sb.append("    disable2faWithDelay: ").append(toIndentedString(disable2faWithDelay)).append("\n");
    sb.append("    ldapPasswordChange: ").append(toIndentedString(ldapPasswordChange)).append("\n");
    sb.append("    ldapPasswordChangeConfirmation: ").append(toIndentedString(ldapPasswordChangeConfirmation)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
