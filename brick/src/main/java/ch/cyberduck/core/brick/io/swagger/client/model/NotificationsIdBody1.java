/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * NotificationsIdBody1
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-12T10:20:43.848213+02:00[Europe/Paris]")
public class NotificationsIdBody1 {
  @JsonProperty("notify_on_copy")
  private Boolean notifyOnCopy = null;

  @JsonProperty("notify_user_actions")
  private Boolean notifyUserActions = null;

  @JsonProperty("recursive")
  private Boolean recursive = null;

  @JsonProperty("send_interval")
  private String sendInterval = null;

  public NotificationsIdBody1 notifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
    return this;
  }

   /**
   * If &#x60;true&#x60;, copying or moving resources into this path will trigger a notification, in addition to just uploads.
   * @return notifyOnCopy
  **/
  @Schema(description = "If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.")
  public Boolean isNotifyOnCopy() {
    return notifyOnCopy;
  }

  public void setNotifyOnCopy(Boolean notifyOnCopy) {
    this.notifyOnCopy = notifyOnCopy;
  }

  public NotificationsIdBody1 notifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
    return this;
  }

   /**
   * If &#x60;true&#x60; actions initiated by the user will still result in a notification
   * @return notifyUserActions
  **/
  @Schema(description = "If `true` actions initiated by the user will still result in a notification")
  public Boolean isNotifyUserActions() {
    return notifyUserActions;
  }

  public void setNotifyUserActions(Boolean notifyUserActions) {
    this.notifyUserActions = notifyUserActions;
  }

  public NotificationsIdBody1 recursive(Boolean recursive) {
    this.recursive = recursive;
    return this;
  }

   /**
   * If &#x60;true&#x60;, enable notifications for each subfolder in this path
   * @return recursive
  **/
  @Schema(description = "If `true`, enable notifications for each subfolder in this path")
  public Boolean isRecursive() {
    return recursive;
  }

  public void setRecursive(Boolean recursive) {
    this.recursive = recursive;
  }

  public NotificationsIdBody1 sendInterval(String sendInterval) {
    this.sendInterval = sendInterval;
    return this;
  }

   /**
   * The time interval that notifications are aggregated by.  Can be &#x60;five_minutes&#x60;, &#x60;fifteen_minutes&#x60;, &#x60;hourly&#x60;, or &#x60;daily&#x60;.
   * @return sendInterval
  **/
  @Schema(example = "daily", description = "The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.")
  public String getSendInterval() {
    return sendInterval;
  }

  public void setSendInterval(String sendInterval) {
    this.sendInterval = sendInterval;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationsIdBody1 notificationsIdBody1 = (NotificationsIdBody1) o;
    return Objects.equals(this.notifyOnCopy, notificationsIdBody1.notifyOnCopy) &&
        Objects.equals(this.notifyUserActions, notificationsIdBody1.notifyUserActions) &&
        Objects.equals(this.recursive, notificationsIdBody1.recursive) &&
        Objects.equals(this.sendInterval, notificationsIdBody1.sendInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notifyOnCopy, notifyUserActions, recursive, sendInterval);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationsIdBody1 {\n");
    
    sb.append("    notifyOnCopy: ").append(toIndentedString(notifyOnCopy)).append("\n");
    sb.append("    notifyUserActions: ").append(toIndentedString(notifyUserActions)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    sendInterval: ").append(toIndentedString(sendInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
