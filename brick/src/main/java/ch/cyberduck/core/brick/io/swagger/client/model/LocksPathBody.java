/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * LocksPathBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-25T22:25:43.390877+02:00[Europe/Paris]")
public class LocksPathBody {
  @JsonProperty("allow_access_by_any_user")
  private Boolean allowAccessByAnyUser = null;

  @JsonProperty("exclusive")
  private Boolean exclusive = null;

  @JsonProperty("recursive")
  private String recursive = null;

  @JsonProperty("timeout")
  private Integer timeout = null;

  public LocksPathBody allowAccessByAnyUser(Boolean allowAccessByAnyUser) {
    this.allowAccessByAnyUser = allowAccessByAnyUser;
    return this;
  }

   /**
   * Allow lock to be updated by any user?
   * @return allowAccessByAnyUser
  **/
  @Schema(description = "Allow lock to be updated by any user?")
  public Boolean isAllowAccessByAnyUser() {
    return allowAccessByAnyUser;
  }

  public void setAllowAccessByAnyUser(Boolean allowAccessByAnyUser) {
    this.allowAccessByAnyUser = allowAccessByAnyUser;
  }

  public LocksPathBody exclusive(Boolean exclusive) {
    this.exclusive = exclusive;
    return this;
  }

   /**
   * Is lock exclusive?
   * @return exclusive
  **/
  @Schema(description = "Is lock exclusive?")
  public Boolean isExclusive() {
    return exclusive;
  }

  public void setExclusive(Boolean exclusive) {
    this.exclusive = exclusive;
  }

  public LocksPathBody recursive(String recursive) {
    this.recursive = recursive;
    return this;
  }

   /**
   * Does lock apply to subfolders?
   * @return recursive
  **/
  @Schema(description = "Does lock apply to subfolders?")
  public String getRecursive() {
    return recursive;
  }

  public void setRecursive(String recursive) {
    this.recursive = recursive;
  }

  public LocksPathBody timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Lock timeout length
   * @return timeout
  **/
  @Schema(description = "Lock timeout length")
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocksPathBody locksPathBody = (LocksPathBody) o;
    return Objects.equals(this.allowAccessByAnyUser, locksPathBody.allowAccessByAnyUser) &&
        Objects.equals(this.exclusive, locksPathBody.exclusive) &&
        Objects.equals(this.recursive, locksPathBody.recursive) &&
        Objects.equals(this.timeout, locksPathBody.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAccessByAnyUser, exclusive, recursive, timeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocksPathBody {\n");
    
    sb.append("    allowAccessByAnyUser: ").append(toIndentedString(allowAccessByAnyUser)).append("\n");
    sb.append("    exclusive: ").append(toIndentedString(exclusive)).append("\n");
    sb.append("    recursive: ").append(toIndentedString(recursive)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
