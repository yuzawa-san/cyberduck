/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.io.File;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * BehaviorsBody2
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-11T22:16:14.309804+02:00[Europe/Paris]")
public class BehaviorsBody2 {
  @JsonProperty("value")
  private String value = null;

  @JsonProperty("attachment_file")
  private File attachmentFile = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("behavior")
  private String behavior = null;

  public BehaviorsBody2 value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior.
   * @return value
  **/
  @Schema(example = "{\"method\": \"GET\"}", description = "The value of the folder behavior.  Can be a integer, array, or hash depending on the type of folder behavior.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public BehaviorsBody2 attachmentFile(File attachmentFile) {
    this.attachmentFile = attachmentFile;
    return this;
  }

   /**
   * Certain behaviors may require a file, for instance, the \&quot;watermark\&quot; behavior requires a watermark image
   * @return attachmentFile
  **/
  @Schema(description = "Certain behaviors may require a file, for instance, the \"watermark\" behavior requires a watermark image")
  public File getAttachmentFile() {
    return attachmentFile;
  }

  public void setAttachmentFile(File attachmentFile) {
    this.attachmentFile = attachmentFile;
  }

  public BehaviorsBody2 path(String path) {
    this.path = path;
    return this;
  }

   /**
   * Folder behaviors path.
   * @return path
  **/
  @Schema(required = true, description = "Folder behaviors path.")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public BehaviorsBody2 behavior(String behavior) {
    this.behavior = behavior;
    return this;
  }

   /**
   * Behavior type.
   * @return behavior
  **/
  @Schema(example = "webhook", required = true, description = "Behavior type.")
  public String getBehavior() {
    return behavior;
  }

  public void setBehavior(String behavior) {
    this.behavior = behavior;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BehaviorsBody2 behaviorsBody2 = (BehaviorsBody2) o;
    return Objects.equals(this.value, behaviorsBody2.value) &&
        Objects.equals(this.attachmentFile, behaviorsBody2.attachmentFile) &&
        Objects.equals(this.path, behaviorsBody2.path) &&
        Objects.equals(this.behavior, behaviorsBody2.behavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, Objects.hashCode(attachmentFile), path, behavior);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BehaviorsBody2 {\n");
    
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    attachmentFile: ").append(toIndentedString(attachmentFile)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
