/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Begin file upload
 */
@ApiModel(description = "Begin file upload")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-06-30T21:29:25.490+02:00")
public class FileUploadPartEntity {
  @JsonProperty("send")
  private Object send = null;

  @JsonProperty("action")
  private String action = null;

  @JsonProperty("ask_about_overwrites")
  private Boolean askAboutOverwrites = null;

  @JsonProperty("available_parts")
  private Integer availableParts = null;

  @JsonProperty("expires")
  private String expires = null;

  @JsonProperty("headers")
  private Object headers = null;

  @JsonProperty("http_method")
  private String httpMethod = null;

  @JsonProperty("next_partsize")
  private Integer nextPartsize = null;

  @JsonProperty("parallel_parts")
  private Boolean parallelParts = null;

  @JsonProperty("parameters")
  private Object parameters = null;

  @JsonProperty("part_number")
  private Integer partNumber = null;

  @JsonProperty("partsize")
  private Integer partsize = null;

  @JsonProperty("path")
  private String path = null;

  @JsonProperty("ref")
  private String ref = null;

  @JsonProperty("upload_uri")
  private String uploadUri = null;

  public FileUploadPartEntity send(Object send) {
    this.send = send;
    return this;
  }

   /**
   * Content-Type and File to send
   * @return send
  **/
  @ApiModelProperty(example = "{}", value = "Content-Type and File to send")
  public Object getSend() {
    return send;
  }

  public void setSend(Object send) {
    this.send = send;
  }

  public FileUploadPartEntity action(String action) {
    this.action = action;
    return this;
  }

   /**
   * Type of upload
   * @return action
  **/
  @ApiModelProperty(example = "multipart", value = "Type of upload")
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }

  public FileUploadPartEntity askAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
    return this;
  }

   /**
   * If &#x60;true&#x60;, this file exists and you may wish to ask the user for overwrite confirmation
   * @return askAboutOverwrites
  **/
  @ApiModelProperty(example = "true", value = "If `true`, this file exists and you may wish to ask the user for overwrite confirmation")
  public Boolean isAskAboutOverwrites() {
    return askAboutOverwrites;
  }

  public void setAskAboutOverwrites(Boolean askAboutOverwrites) {
    this.askAboutOverwrites = askAboutOverwrites;
  }

  public FileUploadPartEntity availableParts(Integer availableParts) {
    this.availableParts = availableParts;
    return this;
  }

   /**
   * Number of parts in the upload
   * @return availableParts
  **/
  @ApiModelProperty(example = "1", value = "Number of parts in the upload")
  public Integer getAvailableParts() {
    return availableParts;
  }

  public void setAvailableParts(Integer availableParts) {
    this.availableParts = availableParts;
  }

  public FileUploadPartEntity expires(String expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Date/time of when this Upload part expires and the URL cannot be used any more
   * @return expires
  **/
  @ApiModelProperty(example = "", value = "Date/time of when this Upload part expires and the URL cannot be used any more")
  public String getExpires() {
    return expires;
  }

  public void setExpires(String expires) {
    this.expires = expires;
  }

  public FileUploadPartEntity headers(Object headers) {
    this.headers = headers;
    return this;
  }

   /**
   * Additional upload headers to provide as part of the upload
   * @return headers
  **/
  @ApiModelProperty(example = "{}", value = "Additional upload headers to provide as part of the upload")
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }

  public FileUploadPartEntity httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

   /**
   * HTTP Method to use for uploading the part, usually &#x60;PUT&#x60;
   * @return httpMethod
  **/
  @ApiModelProperty(example = "PUT", value = "HTTP Method to use for uploading the part, usually `PUT`")
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }

  public FileUploadPartEntity nextPartsize(Integer nextPartsize) {
    this.nextPartsize = nextPartsize;
    return this;
  }

   /**
   * Size in bytes for this part
   * @return nextPartsize
  **/
  @ApiModelProperty(example = "1", value = "Size in bytes for this part")
  public Integer getNextPartsize() {
    return nextPartsize;
  }

  public void setNextPartsize(Integer nextPartsize) {
    this.nextPartsize = nextPartsize;
  }

  public FileUploadPartEntity parallelParts(Boolean parallelParts) {
    this.parallelParts = parallelParts;
    return this;
  }

   /**
   * If &#x60;true&#x60;, multiple parts may be uploaded in parallel.  If &#x60;false&#x60;, be sure to only upload one part at a time, in order.
   * @return parallelParts
  **/
  @ApiModelProperty(example = "true", value = "If `true`, multiple parts may be uploaded in parallel.  If `false`, be sure to only upload one part at a time, in order.")
  public Boolean isParallelParts() {
    return parallelParts;
  }

  public void setParallelParts(Boolean parallelParts) {
    this.parallelParts = parallelParts;
  }

  public FileUploadPartEntity parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

   /**
   * Additional HTTP parameters to send with the upload
   * @return parameters
  **/
  @ApiModelProperty(example = "\"{}\"", value = "Additional HTTP parameters to send with the upload")
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }

  public FileUploadPartEntity partNumber(Integer partNumber) {
    this.partNumber = partNumber;
    return this;
  }

   /**
   * Number of this upload part
   * @return partNumber
  **/
  @ApiModelProperty(example = "1", value = "Number of this upload part")
  public Integer getPartNumber() {
    return partNumber;
  }

  public void setPartNumber(Integer partNumber) {
    this.partNumber = partNumber;
  }

  public FileUploadPartEntity partsize(Integer partsize) {
    this.partsize = partsize;
    return this;
  }

   /**
   * Size in bytes for the next upload part
   * @return partsize
  **/
  @ApiModelProperty(example = "1", value = "Size in bytes for the next upload part")
  public Integer getPartsize() {
    return partsize;
  }

  public void setPartsize(Integer partsize) {
    this.partsize = partsize;
  }

  public FileUploadPartEntity path(String path) {
    this.path = path;
    return this;
  }

   /**
   * New file path
   * @return path
  **/
  @ApiModelProperty(example = "path", value = "New file path")
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }

  public FileUploadPartEntity ref(String ref) {
    this.ref = ref;
    return this;
  }

   /**
   * Reference name for this upload part
   * @return ref
  **/
  @ApiModelProperty(example = "upload-1", value = "Reference name for this upload part")
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }

  public FileUploadPartEntity uploadUri(String uploadUri) {
    this.uploadUri = uploadUri;
    return this;
  }

   /**
   * URI to upload this part to
   * @return uploadUri
  **/
  @ApiModelProperty(example = "", value = "URI to upload this part to")
  public String getUploadUri() {
    return uploadUri;
  }

  public void setUploadUri(String uploadUri) {
    this.uploadUri = uploadUri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileUploadPartEntity fileUploadPartEntity = (FileUploadPartEntity) o;
    return Objects.equals(this.send, fileUploadPartEntity.send) &&
        Objects.equals(this.action, fileUploadPartEntity.action) &&
        Objects.equals(this.askAboutOverwrites, fileUploadPartEntity.askAboutOverwrites) &&
        Objects.equals(this.availableParts, fileUploadPartEntity.availableParts) &&
        Objects.equals(this.expires, fileUploadPartEntity.expires) &&
        Objects.equals(this.headers, fileUploadPartEntity.headers) &&
        Objects.equals(this.httpMethod, fileUploadPartEntity.httpMethod) &&
        Objects.equals(this.nextPartsize, fileUploadPartEntity.nextPartsize) &&
        Objects.equals(this.parallelParts, fileUploadPartEntity.parallelParts) &&
        Objects.equals(this.parameters, fileUploadPartEntity.parameters) &&
        Objects.equals(this.partNumber, fileUploadPartEntity.partNumber) &&
        Objects.equals(this.partsize, fileUploadPartEntity.partsize) &&
        Objects.equals(this.path, fileUploadPartEntity.path) &&
        Objects.equals(this.ref, fileUploadPartEntity.ref) &&
        Objects.equals(this.uploadUri, fileUploadPartEntity.uploadUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(send, action, askAboutOverwrites, availableParts, expires, headers, httpMethod, nextPartsize, parallelParts, parameters, partNumber, partsize, path, ref, uploadUri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileUploadPartEntity {\n");
    
    sb.append("    send: ").append(toIndentedString(send)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    askAboutOverwrites: ").append(toIndentedString(askAboutOverwrites)).append("\n");
    sb.append("    availableParts: ").append(toIndentedString(availableParts)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    nextPartsize: ").append(toIndentedString(nextPartsize)).append("\n");
    sb.append("    parallelParts: ").append(toIndentedString(parallelParts)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    partsize: ").append(toIndentedString(partsize)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    uploadUri: ").append(toIndentedString(uploadUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

