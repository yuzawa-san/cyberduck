/*
 * Files.com API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@files.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.brick.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.brick.io.swagger.client.model.PatchFormFieldSetsFormFields;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Update Form Field Set
 */
@Schema(description = "Update Form Field Set")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-07-12T12:23:43.971535+02:00[Europe/Paris]")
public class PatchFormFieldSets {
  @JsonProperty("form_fields")
  private List<PatchFormFieldSetsFormFields> formFields = null;

  @JsonProperty("skip_company")
  private Boolean skipCompany = null;

  @JsonProperty("skip_email")
  private Boolean skipEmail = null;

  @JsonProperty("skip_name")
  private Boolean skipName = null;

  @JsonProperty("title")
  private String title = null;

  public PatchFormFieldSets formFields(List<PatchFormFieldSetsFormFields> formFields) {
    this.formFields = formFields;
    return this;
  }

  public PatchFormFieldSets addFormFieldsItem(PatchFormFieldSetsFormFields formFieldsItem) {
    if (this.formFields == null) {
      this.formFields = new ArrayList<>();
    }
    this.formFields.add(formFieldsItem);
    return this;
  }

   /**
   * Get formFields
   * @return formFields
  **/
  @Schema(description = "")
  public List<PatchFormFieldSetsFormFields> getFormFields() {
    return formFields;
  }

  public void setFormFields(List<PatchFormFieldSetsFormFields> formFields) {
    this.formFields = formFields;
  }

  public PatchFormFieldSets skipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
    return this;
  }

   /**
   * Skip validating company
   * @return skipCompany
  **/
  @Schema(description = "Skip validating company")
  public Boolean isSkipCompany() {
    return skipCompany;
  }

  public void setSkipCompany(Boolean skipCompany) {
    this.skipCompany = skipCompany;
  }

  public PatchFormFieldSets skipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
    return this;
  }

   /**
   * Skip validating form email
   * @return skipEmail
  **/
  @Schema(description = "Skip validating form email")
  public Boolean isSkipEmail() {
    return skipEmail;
  }

  public void setSkipEmail(Boolean skipEmail) {
    this.skipEmail = skipEmail;
  }

  public PatchFormFieldSets skipName(Boolean skipName) {
    this.skipName = skipName;
    return this;
  }

   /**
   * Skip validating form name
   * @return skipName
  **/
  @Schema(description = "Skip validating form name")
  public Boolean isSkipName() {
    return skipName;
  }

  public void setSkipName(Boolean skipName) {
    this.skipName = skipName;
  }

  public PatchFormFieldSets title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title to be displayed
   * @return title
  **/
  @Schema(description = "Title to be displayed")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchFormFieldSets patchFormFieldSets = (PatchFormFieldSets) o;
    return Objects.equals(this.formFields, patchFormFieldSets.formFields) &&
        Objects.equals(this.skipCompany, patchFormFieldSets.skipCompany) &&
        Objects.equals(this.skipEmail, patchFormFieldSets.skipEmail) &&
        Objects.equals(this.skipName, patchFormFieldSets.skipName) &&
        Objects.equals(this.title, patchFormFieldSets.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formFields, skipCompany, skipEmail, skipName, title);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchFormFieldSets {\n");
    
    sb.append("    formFields: ").append(toIndentedString(formFields)).append("\n");
    sb.append("    skipCompany: ").append(toIndentedString(skipCompany)).append("\n");
    sb.append("    skipEmail: ").append(toIndentedString(skipEmail)).append("\n");
    sb.append("    skipName: ").append(toIndentedString(skipName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
